generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/@prisma/mysql/client"
}

datasource db {
    provider = "mysql"
    url      = env("MYSQL_URL")
}

model Analytics {
    id          Int       @id
    event_id    Int
    date        DateTime? @db.Date
    pageviews   Int?
    impressions Int?
}

model activity {
    id          Int      @id @default(autoincrement())
    entity_type String   @db.VarChar(20)
    entity_id   Int
    created     DateTime @db.DateTime(0)
    created_by  Int
    stage       String   @db.VarChar(20)
    activity    String   @db.VarChar(20)
    remark      String?  @db.VarChar(100)
    modified    DateTime @db.DateTime(0)

    @@unique([entity_type, entity_id], map: "unique_activity")
}

model activity_history {
    id          Int       @id @default(autoincrement())
    activity_id Int
    entity_type String    @db.VarChar(20)
    entity_id   Int
    created     DateTime? @db.DateTime(0)
    created_by  Int
    stage       String    @db.VarChar(20)
    activity    String    @db.VarChar(20)
    remark      String?   @db.VarChar(1000)

    @@index([activity], map: "activity")
    @@index([created], map: "created")
    @@index([entity_id], map: "entity_id")
    @@index([entity_id], map: "entity_id_2")
    @@index([entity_id], map: "entity_id_3")
    @@index([entity_type], map: "entity_type")
    @@index([entity_type, entity_id, created, activity], map: "entity_type_2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ad_audience {
    id                                Int         @id @unique(map: "id") @default(autoincrement())
    interest                          String?     @db.VarChar(50)
    value                             String?     @db.VarChar(200)
    created                           DateTime    @default(now()) @db.Timestamp(0)
    createdby                         Int
    modified                          DateTime?   @db.Timestamp(0)
    modifiedby                        Int?
    published                         Int         @db.TinyInt
    ad_campaign_id                    Int
    position                          Int?        @default(0)
    user_ad_audience_createdbyTouser  user        @relation("ad_audience_createdbyTouser", fields: [createdby], references: [id], onUpdate: Restrict, map: "ad_audience_ibfk_1")
    user_ad_audience_modifiedbyTouser user?       @relation("ad_audience_modifiedbyTouser", fields: [modifiedby], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ad_audience_ibfk_2")
    ad_campaign                       ad_campaign @relation(fields: [ad_campaign_id], references: [id], onUpdate: Restrict, map: "ad_audience_ibfk_6")

    @@index([ad_campaign_id], map: "ad_campaign_id")
    @@index([createdby], map: "createdby")
    @@index([modifiedby], map: "modifiedby")
}

model ad_budget_history {
    id             Int         @unique(map: "id") @default(autoincrement())
    start_date     DateTime    @db.Date
    end_date       DateTime?   @db.Date
    total_budget   Decimal     @db.Decimal(13, 2)
    type           Int         @db.TinyInt
    created        DateTime    @default(now()) @db.Timestamp(0)
    createdby      Int
    ad_campaign_id Int
    company_id     Int
    user           user        @relation(fields: [createdby], references: [id], onUpdate: Restrict, map: "ad_budget_history_ibfk_2")
    ad_campaign    ad_campaign @relation(fields: [ad_campaign_id], references: [id], onUpdate: Restrict, map: "ad_budget_history_ibfk_3")
    company        company     @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "ad_budget_history_ibfk_4")

    @@index([ad_campaign_id], map: "ad_campaign_id")
    @@index([company_id], map: "company_id")
    @@index([createdby], map: "createdby")
}

model ad_budget_spent {
    id             Int         @unique(map: "id") @default(autoincrement())
    ad_campaign_id Int
    date           DateTime    @db.Date
    today_budget   Decimal     @db.Decimal(13, 2)
    budget_spent   Decimal     @db.Decimal(13, 2)
    ad_campaign    ad_campaign @relation(fields: [ad_campaign_id], references: [id], onUpdate: Restrict, map: "ad_budget_spent_ibfk_1")

    @@unique([ad_campaign_id, date], map: "ad_campaign_id_2")
    @@index([ad_campaign_id], map: "ad_campaign_id")
}

model ad_campaign {
    id                                Int                 @id @unique(map: "id") @default(autoincrement())
    name                              String              @db.VarChar(100)
    created                           DateTime            @default(now()) @db.Timestamp(0)
    createdby                         Int
    modified                          DateTime?           @db.Timestamp(0)
    modifiedby                        Int?
    event_id                          Int
    status                            Int                 @db.TinyInt
    published                         Int                 @db.TinyInt
    goal                              Int                 @db.TinyInt
    type                              Int                 @db.TinyInt
    audience_type                     Int                 @db.TinyInt
    ad_audience                       ad_audience[]
    ad_budget_history                 ad_budget_history[]
    ad_budget_spent                   ad_budget_spent[]
    user_ad_campaign_createdbyTouser  user                @relation("ad_campaign_createdbyTouser", fields: [createdby], references: [id], onUpdate: Restrict, map: "ad_campaign_ibfk_1")
    user_ad_campaign_modifiedbyTouser user?               @relation("ad_campaign_modifiedbyTouser", fields: [modifiedby], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ad_campaign_ibfk_2")
    event                             event               @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "ad_campaign_ibfk_3")

    @@index([createdby], map: "createdby")
    @@index([event_id], map: "event_id")
    @@index([modifiedby], map: "modifiedby")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agenda_analytics {
    id                        Int                         @id @default(autoincrement())
    agenda_attachment_id      Int
    likes                     Int                         @db.TinyInt
    ga_user_id                Int
    published                 Int
    comment                   String?                     @db.VarChar(200)
    created                   DateTime                    @default(now()) @db.DateTime(0)
    modified                  DateTime?                   @db.DateTime(0)
    created_by                Int?
    modified_by               Int?
    total_likes               Int?                        @default(0)
    total_dislikes            Int?                        @default(0)
    agenda_attachment         agenda_attachment           @relation(fields: [agenda_attachment_id], references: [id], onUpdate: Restrict, map: "agenda_analytics_ibfk_1")
    ga_user                   ga_user                     @relation(fields: [ga_user_id], references: [id], onUpdate: Restrict, map: "agenda_analytics_ibfk_2")
    agenda_analytics_feedback agenda_analytics_feedback[]

    @@index([agenda_attachment_id], map: "agenda_attachment_id")
    @@index([ga_user_id], map: "ga_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agenda_analytics_feedback {
    id                  Int              @id @default(autoincrement())
    agenda_analytics_id Int
    type                String           @db.VarChar(20)
    comment             String?          @db.VarChar(200)
    ga_user_id          Int
    published           Int              @default(1) @db.TinyInt
    created             DateTime         @default(now()) @db.DateTime(0)
    modified            DateTime?        @db.DateTime(0)
    agenda_analytics    agenda_analytics @relation(fields: [agenda_analytics_id], references: [id], onUpdate: Restrict, map: "agenda_analytics_feedback_ibfk_1")
    ga_user             ga_user          @relation(fields: [ga_user_id], references: [id], onUpdate: Restrict, map: "agenda_analytics_feedback_ibfk_2")

    @@index([agenda_analytics_id], map: "agenda_analytics_id")
    @@index([ga_user_id], map: "ga_user_id")
}

model agenda_answers {
    id                   Int                  @id @default(autoincrement())
    agenda               Int
    visitor              Int
    question             Int
    answer               String?              @db.VarChar(2000)
    created              DateTime             @default(now()) @db.Timestamp(0)
    modified             DateTime?            @db.Timestamp(0)
    event_visitor        event_visitor        @relation(fields: [visitor], references: [id], onUpdate: Restrict, map: "agenda_answers_ibfk_1")
    agenda_questionnaire agenda_questionnaire @relation(fields: [question], references: [id], onUpdate: Restrict, map: "agenda_answers_ibfk_2")
    event_agenda         event_agenda         @relation(fields: [agenda], references: [id], onUpdate: Restrict, map: "agenda_answers_ibfk_3")

    @@index([agenda], map: "agenda")
    @@index([question], map: "question")
    @@index([visitor], map: "visitor")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agenda_attachment {
    id               Int                @id @default(autoincrement())
    agenda_id        Int
    attachment_id    String             @db.VarChar(5000)
    published        Int                @default(1) @db.TinyInt
    created          DateTime           @default(now()) @db.DateTime(0)
    modified         DateTime?          @db.DateTime(0)
    created_by       Int
    modified_by      Int?
    type             String?            @db.VarChar(20)
    size             String?            @db.VarChar(6)
    view             Int?
    agenda_analytics agenda_analytics[]
    event_agenda     event_agenda       @relation(fields: [agenda_id], references: [id], onUpdate: Restrict, map: "agenda_attachment_ibfk_1")

    @@index([agenda_id], map: "agenda_id")
}

model agenda_follow {
    id                Int          @id @default(autoincrement())
    agenda_id         Int
    follower_id       Int
    alert_time        DateTime?    @db.Timestamp(0)
    checkin_time      DateTime?    @db.DateTime(0)
    status            Int          @default(1) @db.TinyInt
    rating            Int?
    created           DateTime?    @default(now()) @db.Timestamp(0)
    unfollow_date     DateTime?    @db.Timestamp(0)
    source            String?      @db.VarChar(20)
    notification_sent Int?
    notes             String?      @db.VarChar(200)
    user              user         @relation(fields: [follower_id], references: [id], onUpdate: Restrict, map: "agenda_follow_ibfk_1")
    event_agenda      event_agenda @relation(fields: [agenda_id], references: [id], onUpdate: Restrict, map: "agenda_follow_ibfk_2")

    @@index([agenda_id], map: "agenda_id")
    @@index([follower_id], map: "follower_id")
}

model agenda_questionnaire {
    id             Int              @id @default(autoincrement())
    question       String           @db.VarChar(1500)
    options        String?          @db.VarChar(5000)
    answer_type    Boolean          @default(false)
    agenda_answers agenda_answers[]
}

model agenda_questionnaire_mapping {
    id           Int      @id @default(autoincrement())
    event_id     Int
    agenda_id    Int
    question_id  Int
    position     Int?
    is_mandatory Boolean  @default(false)
    published    Boolean? @default(true)

    @@index([agenda_id], map: "agenda_id")
    @@index([event_id], map: "event_id")
    @@index([question_id], map: "question_id")
}

model agenda_streaming {
    id              Int          @id @default(autoincrement())
    agenda_id       Int
    live_event      String       @db.VarChar(50)
    assest_name     String?      @db.VarChar(50)
    stream_locator  String?      @db.VarChar(50)
    live_output     String?      @db.VarChar(50)
    start           DateTime?    @db.DateTime(0)
    stop            DateTime?    @db.DateTime(0)
    ingest_url      String       @db.Text
    stream_url      String?      @db.Text
    output_url      String?      @db.VarChar(200)
    created         DateTime     @default(now()) @db.DateTime(0)
    modified        DateTime?    @db.DateTime(0)
    active          Int?         @default(0) @db.TinyInt
    last_disconnect DateTime?    @db.DateTime(0)
    event_agenda    event_agenda @relation(fields: [agenda_id], references: [id], onUpdate: Restrict, map: "agenda_streaming_ibfk_1")

    @@index([agenda_id], map: "agenda_id")
}

model agenda_ticket {
    id           Int          @id @default(autoincrement())
    ticket_id    Int
    entity_type  String       @db.VarChar(20)
    entity_id    String       @db.VarChar(20)
    created      DateTime     @default(now()) @db.DateTime(0)
    created_by   Int
    published    Int          @default(1) @db.TinyInt
    modified     DateTime?    @db.DateTime(0)
    modified_by  Int?
    event_ticket event_ticket @relation(fields: [ticket_id], references: [id], onUpdate: Restrict, map: "agenda_ticket_ibfk_1")

    @@index([ticket_id], map: "ticket_id")
}

model alternate_contacts {
    id           Int       @id @default(autoincrement())
    user_id      Int
    contact_type String    @db.VarChar(20)
    value        String    @db.VarChar(100)
    published    Int       @default(1) @db.TinyInt
    created      DateTime  @default(now()) @db.DateTime(0)
    created_by   Int
    modified     DateTime? @db.DateTime(0)
    modified_by  Int?
    user         user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "alternate_contacts_ibfk_1")

    @@index([user_id], map: "user_id")
}

model analytics {
    id          Int       @id @default(autoincrement())
    date        DateTime? @db.Date
    path        String?   @db.VarChar(1000)
    pageviews   Int?
    impressions Int?
    event_id    Int?
    content     String?   @db.LongText

    @@index([date], map: "date")
    @@index([event_id], map: "event_id")
}

model api_timing {
    id         Int       @id @default(autoincrement())
    url        String    @db.VarChar(300)
    log_date   DateTime? @db.Date
    total_hits Int
    avg_timing Float     @db.Float
    max_timing Float     @db.Float
    max_url    String    @db.VarChar(300)
    published  Int       @default(1) @db.TinyInt
    created    DateTime? @default(now()) @db.Timestamp(0)
    modified   DateTime? @db.Timestamp(0)
    optimized  DateTime? @db.Timestamp(0)

    @@unique([url, log_date], map: "unique_index")
}

model apiscope {
    id      Int     @id @default(autoincrement())
    apiname String? @db.VarChar(200)
    type    String? @db.VarChar(40)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model app {
    id                 Int                  @id @default(autoincrement())
    en_id              String?              @db.VarChar(4)
    app_version        String?              @db.VarChar(20)
    cust_id            String?              @unique(map: "cust_id") @db.VarChar(15)
    app_name           String               @db.VarChar(40)
    app_title          String               @db.VarChar(40)
    android_domain     String?              @unique(map: "android_domain") @db.VarChar(60)
    ios_domain         String?              @unique(map: "ios_domain") @db.VarChar(60)
    web_domain         String?              @db.VarChar(50)
    ssl_certified      DateTime?            @db.Timestamp(0)
    api_key            String               @unique(map: "api_key") @db.VarChar(200)
    onesignal          String?              @db.VarChar(100)
    colour_primary     String?              @db.VarChar(7)
    colour_secondary   String?              @db.VarChar(7)
    template_id        Boolean?
    google_key         String?              @db.VarChar(50)
    ln_key             String?              @db.VarChar(50)
    fb_key             String?              @db.VarChar(50)
    ga_key             String?              @db.VarChar(50)
    description        String?              @db.VarChar(200)
    created            DateTime?            @db.Timestamp(0)
    modified           DateTime?            @db.Timestamp(0)
    createdby          Int?
    modifiedby         Int?
    icons              String?              @db.VarChar(200)
    published          Boolean?             @default(true)
    tabs               String?              @db.Text
    contact            Int?
    event_permissions  String?              @db.Text
    status             Int?                 @db.TinyInt
    app_privacy        Int?                 @db.TinyInt
    keyword            String?              @db.VarChar(80)
    app_type           String               @default("event") @db.VarChar(20)
    android_status     Int?                 @db.TinyInt
    ios_status         Int?                 @db.TinyInt
    web_status         Int?                 @db.TinyInt
    fb_android_id      String?              @db.VarChar(50)
    fb_ios_id          String?              @db.VarChar(50)
    play_store_link    String?              @db.VarChar(150)
    app_store_link     String?              @db.VarChar(150)
    configuration      String               @db.VarChar(800)
    user               user?                @relation(fields: [contact], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "app_ibfk_1")
    app_events         app_events[]
    app_tabs_mapping   app_tabs_mapping[]
    esite_tabs_mapping esite_tabs_mapping[]

    @@index([android_status, ios_status, web_status], map: "android_status")
    @@index([contact], map: "contact")
    @@index([createdby], map: "createdby")
    @@index([modifiedby], map: "modifiedby")
    @@index([status], map: "status")
    @@index([web_domain], map: "web_domain")
}

model app_advertisement {
    id                 Int     @id @default(autoincrement())
    title              String? @db.VarChar(50)
    description        String? @db.VarChar(100)
    type               String? @db.VarChar(15)
    img_url            String? @db.VarChar(50)
    action_button_text String? @db.VarChar(15)
    redirect_url       String? @db.VarChar(50)
    app_version        String? @db.VarChar(6)
    group_name         String? @db.VarChar(15)
    status             Int?    @db.TinyInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model app_events {
    id         Int      @id @default(autoincrement())
    app_id     Int
    company_id Int
    event_id   Int?
    privacy    Boolean?
    event      event?   @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "app_events_ibfk_1")
    app        app      @relation(fields: [app_id], references: [id], onUpdate: Restrict, map: "app_events_ibfk_2")
    company    company  @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "app_events_ibfk_3")

    @@index([app_id], map: "app_id")
    @@index([company_id], map: "company_id")
    @@index([event_id], map: "event_id")
}

model app_tabs {
    id               Int                @id @default(autoincrement())
    type             String?            @default("default") @db.VarChar(30)
    data             String             @db.Text
    app_tabs_mapping app_tabs_mapping[]
}

model app_tabs_mapping {
    id                    Int                     @id @default(autoincrement())
    app_id                Int
    tab_id                Int?
    name                  String?                 @db.VarChar(200)
    position              Int?
    published             Int?
    app                   app                     @relation(fields: [app_id], references: [id], onUpdate: Restrict, map: "app_tabs_mapping_ibfk_1")
    app_tabs              app_tabs?               @relation(fields: [tab_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "app_tabs_mapping_ibfk_2")
    app_tabs_mapping_lang app_tabs_mapping_lang[]

    @@unique([app_id, position], map: "appid_postion")
    @@unique([app_id, tab_id], map: "appid_tabid")
    @@index([tab_id], map: "tab_id")
}

model app_tabs_mapping_lang {
    id                  Int              @id @default(autoincrement())
    app_tabs_mapping_id Int
    ln                  String?          @db.VarChar(2)
    value               String?          @db.VarChar(20)
    app_tabs_mapping    app_tabs_mapping @relation(fields: [app_tabs_mapping_id], references: [id], onUpdate: Restrict, map: "app_tabs_mapping_lang_ibfk_1")

    @@unique([app_tabs_mapping_id, ln], map: "app_tabs_mapping_id_2")
    @@index([app_tabs_mapping_id], map: "app_tabs_mapping_id")
}

model area_values {
    id         Int       @id @default(autoincrement())
    name       String?   @db.VarChar(100)
    place_id   String?   @unique(map: "place_id") @db.VarChar(100)
    url        String?   @db.VarChar(100)
    type_value String?   @db.VarChar(100)
    abbr_name  String?   @db.VarChar(100)
    published  Int       @default(1) @db.TinyInt
    country    String?   @db.VarChar(10)
    geometry   Json?
    av_source  String?   @db.VarChar(50)
    city       city[]
    country1   country[]
}

model association_membership {
    id             Int      @id @default(autoincrement())
    event_id       Int?
    company_id     Int?
    association_id Int?
    event          event?   @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "association_membership_ibfk_1")
    company        company? @relation(fields: [company_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "association_membership_ibfk_2")

    @@unique([company_id, association_id], map: "company_id")
    @@unique([event_id, association_id], map: "event_id")
}

model async_process {
    id              Int       @id @default(autoincrement())
    url             String    @db.VarChar(1000)
    comm_tracker_id Int?
    referral        String?   @db.VarChar(30)
    http_method     String    @db.VarChar(7)
    http_header     String    @db.VarChar(1000)
    http_payload    String    @db.MediumText
    http_response   String?   @db.VarChar(1000)
    http_code       Int?
    priority        Int?
    created         DateTime  @db.DateTime(0)
    modified        DateTime? @db.DateTime(0)
    scheduled       DateTime? @db.DateTime(0)
    published       Int       @default(1) @db.TinyInt
    reference_id    Int?
    source          String?   @db.VarChar(50)

    @@index([referral], map: "referral")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model attachment {
    id                                                         Int                    @id @default(autoincrement())
    file_type                                                  String                 @db.VarChar(20)
    value                                                      String                 @db.VarChar(1000)
    zh_value                                                   String?                @db.VarChar(500)
    title                                                      String?                @db.VarChar(200)
    cdn_url                                                    String?                @db.VarChar(1000)
    metadata                                                   String?                @db.VarChar(4000)
    published                                                  Boolean                @default(false)
    created                                                    DateTime               @default(now()) @db.Timestamp(0)
    modified                                                   DateTime?              @db.Timestamp(0)
    createdby                                                  Int
    modifiedby                                                 Int?
    status                                                     Int?
    size                                                       String?                @db.VarChar(6)
    view                                                       Int?
    company                                                    company[]
    event_event_logoToattachment                               event[]                @relation("event_logoToattachment")
    event_event_wrapperToattachment                            event[]                @relation("event_wrapperToattachment")
    event_event_wrapper_smallToattachment                      event[]                @relation("event_wrapper_smallToattachment")
    event_backup_event_backup_logoToattachment                 event_backup[]         @relation("event_backup_logoToattachment")
    event_backup_event_backup_wrapperToattachment              event_backup[]         @relation("event_backup_wrapperToattachment")
    event_backup_event_backup_wrapper_smallToattachment        event_backup[]         @relation("event_backup_wrapper_smallToattachment")
    event_feedback_media                                       event_feedback_media[]
    event_sponsors                                             event_sponsors[]
    groups_groups_logoToattachment                             groups[]               @relation("groups_logoToattachment")
    groups_groups_wrapperToattachment                          groups[]               @relation("groups_wrapperToattachment")
    notification_bell_notification_bell_attachmentToattachment notification_bell[]    @relation("notification_bell_attachmentToattachment")
    product                                                    product[]
    venue_venue_venue_logoToattachment                         venue[]                @relation("venue_venue_logoToattachment")
    venue_venue_wrapperToattachment                            venue[]                @relation("venue_wrapperToattachment")
    venue_venue_small_wrapperToattachment                      venue[]                @relation("venue_small_wrapperToattachment")
    venue_feedback_media                                       venue_feedback_media[]

    @@index([created], map: "created")
    @@index([file_type], map: "file_type")
    @@index([modified], map: "modified")
    @@index([status], map: "status")
}

model auth_group {
    id                     Int                      @id @default(autoincrement())
    name                   String                   @unique(map: "name") @db.VarChar(150)
    auth_group_permissions auth_group_permissions[]
    auth_user_groups       auth_user_groups[]
}

model auth_group_permissions {
    id              BigInt          @id @default(autoincrement())
    group_id        Int
    permission_id   Int
    auth_permission auth_permission @relation(fields: [permission_id], references: [id], onUpdate: Restrict, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
    auth_group      auth_group      @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

    @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
    @@index([permission_id], map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
}

model auth_groups_users {
    id         Int      @id @default(autoincrement()) @db.UnsignedInt
    user_id    Int      @db.UnsignedInt
    group      String   @db.VarChar(255)
    created_at DateTime @db.DateTime(0)
    users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "auth_groups_users_user_id_foreign")

    @@index([user_id], map: "auth_groups_users_user_id_foreign")
}

model auth_identities {
    id           Int       @id @default(autoincrement()) @db.UnsignedInt
    user_id      Int       @db.UnsignedInt
    type         String    @db.VarChar(255)
    name         String?   @db.VarChar(255)
    secret       String    @db.VarChar(255)
    secret2      String?   @db.VarChar(255)
    expires      DateTime? @db.DateTime(0)
    extra        String?   @db.Text
    force_reset  Boolean   @default(false)
    last_used_at DateTime? @db.DateTime(0)
    created_at   DateTime? @db.DateTime(0)
    updated_at   DateTime? @db.DateTime(0)
    reset_time   Int
    users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "auth_identities_user_id_foreign")

    @@unique([type, secret], map: "type_secret")
    @@index([user_id], map: "user_id")
}

model auth_logins {
    id         Int      @id @default(autoincrement()) @db.UnsignedInt
    ip_address String   @db.VarChar(255)
    user_agent String?  @db.VarChar(255)
    id_type    String   @db.VarChar(255)
    identifier String   @db.VarChar(255)
    user_id    Int?     @db.UnsignedInt
    date       DateTime @db.DateTime(0)
    success    Boolean

    @@index([id_type, identifier], map: "id_type_identifier")
    @@index([user_id], map: "user_id")
}

model auth_permission {
    id                         Int                          @id @default(autoincrement())
    name                       String                       @db.VarChar(255)
    content_type_id            Int
    codename                   String                       @db.VarChar(100)
    auth_group_permissions     auth_group_permissions[]
    django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onUpdate: Restrict, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
    auth_user_user_permissions auth_user_user_permissions[]

    @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_permissions_users {
    id         Int      @id @default(autoincrement()) @db.UnsignedInt
    user_id    Int      @db.UnsignedInt
    permission String   @db.VarChar(255)
    created_at DateTime @db.DateTime(0)
    updated_at DateTime @db.Date
    users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "auth_permissions_users_user_id_foreign")

    @@index([user_id], map: "auth_permissions_users_user_id_foreign")
}

model auth_remember_tokens {
    id              Int      @id @default(autoincrement()) @db.UnsignedInt
    selector        String   @unique(map: "selector") @db.VarChar(255)
    hashedValidator String   @db.VarChar(255)
    user_id         Int      @db.UnsignedInt
    expires         DateTime @db.DateTime(0)
    created_at      DateTime @db.DateTime(0)
    updated_at      DateTime @db.DateTime(0)
    users           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "auth_remember_tokens_user_id_foreign")

    @@index([user_id], map: "auth_remember_tokens_user_id_foreign")
}

model auth_token_logins {
    id         Int      @id @default(autoincrement()) @db.UnsignedInt
    ip_address String   @db.VarChar(255)
    user_agent String?  @db.VarChar(255)
    id_type    String   @db.VarChar(255)
    identifier String   @db.VarChar(255)
    user_id    Int?     @db.UnsignedInt
    date       DateTime @db.DateTime(0)
    success    Boolean

    @@index([id_type, identifier], map: "id_type_identifier")
    @@index([user_id], map: "user_id")
}

model auth_user {
    id                         Int                          @id @default(autoincrement())
    password                   String                       @db.VarChar(128)
    last_login                 DateTime?                    @db.DateTime(6)
    is_superuser               Boolean
    username                   String                       @unique(map: "username") @db.VarChar(150)
    first_name                 String                       @db.VarChar(150)
    last_name                  String                       @db.VarChar(150)
    email                      String                       @db.VarChar(254)
    is_staff                   Boolean
    is_active                  Boolean
    date_joined                DateTime                     @db.DateTime(6)
    auth_user_groups           auth_user_groups[]
    auth_user_user_permissions auth_user_user_permissions[]
    django_admin_log           django_admin_log[]
}

model auth_user_groups {
    id         BigInt     @id @default(autoincrement())
    user_id    Int
    group_id   Int
    auth_group auth_group @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
    auth_user  auth_user  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

    @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
    @@index([group_id], map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
}

model auth_user_user_permissions {
    id              BigInt          @id @default(autoincrement())
    user_id         Int
    permission_id   Int
    auth_permission auth_permission @relation(fields: [permission_id], references: [id], onUpdate: Restrict, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
    auth_user       auth_user       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

    @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
    @@index([permission_id], map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
}

model badge {
    id                                 Int          @id @default(autoincrement())
    name                               String       @unique(map: "name") @db.VarChar(55)
    color                              String       @db.VarChar(20)
    badge_type_badge_type_badgeTobadge badge_type[] @relation("badge_type_badgeTobadge")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model badge_setup {
    id                                 Int       @id @default(autoincrement())
    event_id                           Int       @unique(map: "event_id_2")
    t_badge_on                         Boolean   @default(true)
    template_id                        Int       @default(1)
    applicable_for                     Boolean?
    header_image                       String?   @db.VarChar(255)
    sponser_image                      String?   @db.VarChar(255)
    thankyou_msg                       String?   @db.VarChar(500)
    stall_thankyou_msg                 String?   @db.VarChar(500)
    created                            DateTime  @default(now()) @db.Timestamp(0)
    created_by                         Int
    modified                           DateTime? @db.Timestamp(0)
    modified_by                        Int?
    qr_template                        String?   @db.VarChar(255)
    user_badge_setup_created_byTouser  user      @relation("badge_setup_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "badge_setup_ibfk_2")
    user_badge_setup_modified_byTouser user?     @relation("badge_setup_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "badge_setup_ibfk_3")

    @@index([applicable_for], map: "applicable_for")
    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
}

model badge_type {
    id                                Int       @id @default(autoincrement())
    badge_setup_id                    Int
    badge                             Int
    band_color                        String    @db.VarChar(55)
    created                           DateTime  @default(now()) @db.Timestamp(0)
    created_by                        Int
    modified                          DateTime? @db.Timestamp(0)
    modified_by                       Int?
    published                         Int?      @db.TinyInt
    user_badge_type_created_byTouser  user      @relation("badge_type_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "badge_type_ibfk_2")
    user_badge_type_modified_byTouser user?     @relation("badge_type_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "badge_type_ibfk_3")
    badge_badge_type_badgeTobadge     badge     @relation("badge_type_badgeTobadge", fields: [badge], references: [id], onUpdate: Restrict, map: "badge_type_ibfk_4")

    @@unique([badge_setup_id, badge], map: "u_badge_type")
    @@index([badge], map: "badge")
    @@index([badge_setup_id], map: "badge_setup_id")
    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
}

model banner_config {
    id           Int       @id @default(autoincrement())
    code         String    @unique(map: "code") @db.VarChar(50)
    description  String?   @db.VarChar(200)
    height       Int       @db.TinyInt
    width        Int       @db.TinyInt
    entity_type  String    @db.VarChar(10)
    entity_url   String    @db.VarChar(20)
    redirect_url String    @db.VarChar(200)
    start_date   DateTime? @db.Date
    end_date     DateTime? @db.Date
    published    Int?      @default(1) @db.UnsignedTinyInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model blacklist_domains {
    id              Int       @id @default(autoincrement())
    domain          String    @db.VarChar(30)
    b_type          Int       @db.TinyInt
    b_country       String?   @db.VarChar(5)
    created         DateTime? @default(now()) @db.DateTime(0)
    created_by      Int?
    domain_bcountry String?   @unique(map: "domain_bcountry") @db.VarChar(200)
    reason          String?   @db.VarChar(50)
    modified        DateTime? @db.DateTime(0)
    modified_by     Int?
    source_domain   String?   @db.VarChar(30)
    country         country?  @relation(fields: [b_country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "blacklist_domains_ibfk_1")

    @@index([b_country], map: "b_country")
    @@index([created], map: "created")
    @@index([domain, b_type], map: "domain")
}

model board_access {
    id                                  Int          @id @default(autoincrement())
    board_page_id                       Int?
    user_id                             Int?
    access_level                        Int
    created                             DateTime     @default(now()) @db.DateTime(0)
    created_by                          Int?
    modified                            DateTime?    @db.DateTime(0)
    modified_by                         Int?
    access                              String?      @db.Text
    board_pages                         board_pages? @relation(fields: [board_page_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "board_access_ibfk_1")
    user_board_access_user_idTouser     user?        @relation("board_access_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "board_access_ibfk_2")
    user_board_access_modified_byTouser user?        @relation("board_access_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "board_access_ibfk_3")
    user_board_access_created_byTouser  user?        @relation("board_access_created_byTouser", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "board_access_ibfk_4")

    @@unique([board_page_id, user_id], map: "unique_index")
    @@index([user_id], map: "board_access_ibfk_2")
    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modifed_by")
}

model board_pages {
    id           Int            @id @default(autoincrement())
    name         String?        @db.VarChar(60)
    url          String?        @db.VarChar(200)
    menu         String?        @unique(map: "unique_index") @db.VarChar(5)
    published    Boolean?       @default(true)
    board_access board_access[]
}

model board_pages_backup {
    id        Int      @id @default(autoincrement())
    name      String?  @db.VarChar(60)
    url       String?  @unique(map: "url") @db.VarChar(200)
    menu      String?  @unique(map: "unique_index") @db.VarChar(5)
    published Boolean? @default(true)
}

model booking_type {
    item_type    String         @id @db.Char(4)
    item_group   String         @db.VarChar(10)
    display_name String         @db.VarChar(20)
    fa_icon      String?        @db.VarChar(25)
    user_booking user_booking[]
}

model campaign_feedback {
    id                                       Int                  @id @default(autoincrement())
    service_subscription_id                  Int
    question_id                              Int
    answer                                   String               @db.VarChar(200)
    created                                  DateTime             @default(now()) @db.Timestamp(0)
    created_by                               Int
    modified                                 DateTime?            @db.Timestamp(0)
    modified_by                              Int?
    service_subscription                     service_subscription @relation(fields: [service_subscription_id], references: [id], onUpdate: Restrict, map: "campaign_feedback_ibfk_1")
    questionnaire                            questionnaire        @relation(fields: [question_id], references: [id], onUpdate: Restrict, map: "campaign_feedback_ibfk_2")
    user_campaign_feedback_created_byTouser  user                 @relation("campaign_feedback_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "campaign_feedback_ibfk_3")
    user_campaign_feedback_modified_byTouser user?                @relation("campaign_feedback_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "campaign_feedback_ibfk_4")

    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
    @@index([question_id], map: "question_id")
    @@index([service_subscription_id], map: "service_subscription_id")
}

model campaign_pool {
    user                          Int
    communication_log_id          Int
    channel                       Int?
    sent                          DateTime?         @db.Timestamp(0)
    created                       DateTime?         @db.Timestamp(0)
    modified                      DateTime?         @db.Timestamp(0)
    id                            Int               @id @default(autoincrement())
    published                     Int?              @default(1) @db.TinyInt
    user_campaign_pool_userTouser user              @relation("campaign_pool_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "campaign_pool_ibfk_1")
    communication_log             communication_log @relation(fields: [communication_log_id], references: [id], onUpdate: Restrict, map: "campaign_pool_ibfk_2")

    @@index([communication_log_id], map: "communication_log_id")
    @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model campaign_tracker {
    id                                                                                              Int                       @id @default(autoincrement())
    service_agreement_service                                                                       Int
    date                                                                                            DateTime?                 @db.Date
    track                                                                                           Boolean?                  @default(false)
    current_status                                                                                  Int?
    history                                                                                         String?                   @db.Text
    source                                                                                          Int?
    escalatedto                                                                                     Int?
    type                                                                                            String?                   @db.Char(1)
    tat                                                                                             DateTime?                 @db.DateTime(0)
    user_campaign_tracker_escalatedtoTouser                                                         user?                     @relation("campaign_tracker_escalatedtoTouser", fields: [escalatedto], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_to_user_id")
    service_agreement_service_campaign_tracker_service_agreement_serviceToservice_agreement_service service_agreement_service @relation("campaign_tracker_service_agreement_serviceToservice_agreement_service", fields: [service_agreement_service], references: [id], onUpdate: Restrict, map: "campaign_tracker_ibfk_1")
    user_campaign_tracker_sourceTouser                                                              user?                     @relation("campaign_tracker_sourceTouser", fields: [source], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "campaign_tracker_ibfk_2")

    @@index([escalatedto], map: "FK_to_user_id")
    @@index([service_agreement_service], map: "campaign_tracker_ibfk_1")
    @@index([source], map: "campaign_tracker_ibfk_2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model category {
    id                                                    Int                   @id @default(autoincrement())
    name                                                  String                @unique(map: "name") @db.VarChar(100)
    zh_name                                               String?               @db.VarChar(100)
    url                                                   String                @unique(map: "url") @db.VarChar(200)
    icon                                                  String?               @db.VarChar(20)
    published                                             Boolean               @default(false)
    upcoming_events                                       Int?
    total_events                                          Int?
    created                                               DateTime              @default(now()) @db.Timestamp(0)
    modified                                              DateTime?             @db.Timestamp(0)
    createdby                                             Int
    modifiedby                                            Int?
    short_name                                            String                @db.Text
    tags                                                  String?               @db.VarChar(600)
    is_group                                              Boolean?
    relevant_tags                                         String?               @db.VarChar(200)
    products                                              String?               @db.VarChar(200)
    format_restriction                                    String?               @db.VarChar(100)
    content                                               String?               @db.VarChar(5000)
    tag_type                                              Int
    category_node_category_node_categoryTocategory        category_node[]       @relation("category_node_categoryTocategory")
    category_node_category_node_parent_categoryTocategory category_node[]       @relation("category_node_parent_categoryTocategory")
    event_category_event_category_categoryTocategory      event_category[]      @relation("event_category_categoryTocategory")
    listing_follow_page                                   listing_follow_page[]
    product_product_categoryTocategory                    product[]             @relation("product_categoryTocategory")

    @@index([published], map: "published")
    @@index([tags], map: "tags")
    @@index([zh_name], map: "zh_name")
}

model category_node {
    id                                               Int       @id @default(autoincrement())
    category                                         Int
    parent_category                                  Int
    created                                          DateTime  @default(now()) @db.DateTime(0)
    modified                                         DateTime? @db.DateTime(0)
    published                                        Int       @default(1) @db.TinyInt
    category_category_node_categoryTocategory        category  @relation("category_node_categoryTocategory", fields: [category], references: [id], onUpdate: Restrict, map: "category_node_ibfk_1")
    category_category_node_parent_categoryTocategory category  @relation("category_node_parent_categoryTocategory", fields: [parent_category], references: [id], onUpdate: Restrict, map: "category_node_ibfk_2")

    @@unique([category, parent_category], map: "category_2")
    @@index([category], map: "category")
    @@index([parent_category], map: "parent_category")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cc_action {
    id                 Int             @id @default(autoincrement())
    phone_no           String?         @unique @db.VarChar(25)
    action             String          @db.VarChar(100)
    dialled_no         String          @db.VarChar(12)
    action_type        Boolean         @default(true)
    created            DateTime        @default(now()) @db.Timestamp(0)
    event_visitor_id   Int?
    visitor_company    String?         @db.VarChar(100)
    event_id           Int             @db.UnsignedInt
    suspect            String?         @db.Text
    by_user            String?         @default("SYSTEM GENERATED") @db.VarChar(72)
    email_id           String?         @db.VarChar(100)
    spoken_to          String?         @db.VarChar(150)
    reference_by       Int?
    verify_status      String?         @db.VarChar(80)
    notification       Int?            @default(0)
    source             String?         @db.VarChar(30)
    is_multiple        Boolean         @default(false)
    type               Boolean?        @default(false)
    vendor_id          Int?
    status             String?         @db.VarChar(20)
    remark             String?         @db.VarChar(55)
    reminder_caller_id Int?
    // cc_login           cc_login?       @relation(fields: [phone_no], references: [phone_no], onDelete: Restrict, onUpdate: Restrict, map: "cc_action_ibfk_3")
    vendor             vendor?         @relation(fields: [vendor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "cc_action_ibfk_4")
    cc_escalation      cc_escalation[]
    cc_login           cc_login?       @relation(fields: [cc_loginId], references: [id])
    cc_loginId         Int?

    @@unique([action, event_id], map: "action_event")
    @@index([action_type], map: "action_type")
    @@index([created], map: "created")
    @@index([dialled_no], map: "dialled_no")
    @@index([email_id, spoken_to], map: "email_id")
    @@index([event_id], map: "event_id")
    @@index([event_visitor_id], map: "event_visitior_id")
    @@index([phone_no], map: "phone_no")
    @@index([reference_by, verify_status, notification], map: "reference_by")
    @@index([source], map: "source")
    @@index([vendor_id], map: "vendor_id")
    @@index([visitor_company], map: "visitor_company")
}

model cc_agent {
    id                  Int       @id @default(autoincrement())
    phone               String    @db.VarChar(10)
    status              String?   @db.VarChar(100)
    vendor_status       String?   @db.VarChar(100)
    last_whitelist_date DateTime? @db.DateTime(0)
    created             DateTime  @default(now()) @db.Timestamp(0)
    vendor_action_time  DateTime? @db.DateTime(0)
    created_by          Int
    vendor              vendor    @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "cc_agent_ibfk_1")

    @@index([created_by], map: "created_by")
}

model cc_agent_history {
    id                  Int       @id @default(autoincrement())
    phone               String    @db.VarChar(10)
    status              String?   @db.VarChar(100)
    vendor_status       String?   @db.VarChar(100)
    last_whitelist_date DateTime? @db.DateTime(0)
    created             DateTime  @default(now()) @db.Timestamp(0)
    vendor_action_time  DateTime? @db.DateTime(0)
    created_by          Int
}

model cc_escalation {
    id                                       Int       @id @default(autoincrement())
    cc_action_id                             Int
    action                                   String    @db.VarChar(100)
    created                                  DateTime  @default(now()) @db.Timestamp(0)
    created_by                               Int
    modified                                 DateTime? @db.Timestamp(0)
    modified_by                              Int?
    vendor_cc_escalation_created_byTovendor  vendor    @relation("cc_escalation_created_byTovendor", fields: [created_by], references: [id], onUpdate: Restrict, map: "cc_escalation_ibfk_1")
    vendor_cc_escalation_modified_byTovendor vendor?   @relation("cc_escalation_modified_byTovendor", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "cc_escalation_ibfk_2")
    cc_action                                cc_action @relation(fields: [cc_action_id], references: [id], onUpdate: Restrict, map: "cc_escalation_ibfk_3")

    @@index([cc_action_id], map: "cc_action_id")
    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
}

model cc_login {
    id        Int         @id @default(autoincrement())
    phone_no  String      @db.VarChar(12)
    created   DateTime    @default(now()) @db.Timestamp(0)
    ip_addr   String      @db.VarChar(15)
    cc_action cc_action[]

    @@index([phone_no, created], map: "phone_no")
}

model cc_suspect_rule {
    id         Int      @id @default(autoincrement())
    event_id   Int?
    suspect_id String?  @db.VarChar(20)
    rule       String?  @db.VarChar(3000)
    created    DateTime @default(now()) @db.Timestamp(0)

    @@unique([event_id, suspect_id], map: "event_id")
}

model change_history {
    id                                Int      @id @default(autoincrement())
    status                            Boolean  @default(false)
    city                              Boolean? @default(false)
    country                           Boolean? @default(false)
    venue                             Boolean? @default(false)
    company                           Boolean? @default(false)
    date                              Boolean? @default(false)
    rehosted                          Boolean? @default(false)
    event_type                        Boolean  @default(false)
    badge                             Boolean? @default(false)
    shortname                         Boolean  @default(false)
    event_punchline                   Boolean  @default(false)
    event_frequency                   Boolean  @default(false)
    timings                           Boolean  @default(false)
    category                          Boolean  @default(false)
    description                       Boolean? @default(false)
    agenda                            Boolean? @default(false)
    pricing                           Boolean? @default(false)
    edition                           Boolean? @default(false)
    photo_video                       Boolean? @default(false)
    exhibitors                        Boolean  @default(false)
    speakers                          Boolean? @default(false)
    official_url                      Boolean  @default(false)
    twitter_handle                    Boolean  @default(false)
    twitter_hashtag                   Boolean  @default(false)
    facebook_url                      Boolean  @default(false)
    contact                           Boolean? @default(false)
    post_review_id                    Int?
    event                             Int?
    created_date                      DateTime @default(now()) @db.Timestamp(0)
    event_change_history_eventToevent event?   @relation("change_history_eventToevent", fields: [event], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "change_history_ibfk_2")

    @@index([event], map: "event")
    @@index([post_review_id], map: "post_review_id")
}

model channelize_queue {
    id              Int       @id @default(autoincrement())
    action          String    @db.VarChar(255)
    payload         String    @db.Text
    api             String    @db.VarChar(255)
    loginid         Int?
    method          String?   @db.VarChar(25)
    created         DateTime? @default(now()) @db.Timestamp(0)
    modified        DateTime? @db.DateTime(0)
    status          Int
    response_status Int?
    response_data   String?   @db.Text
}

model channelize_sync {
    id            Int    @id
    hitdata       String @db.VarChar(11)
    lastUserId    Int?   @unique(map: "lastUserId")
    lastConnectId Int?
    lastThreadId  Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model city {
    id                                                 Int                   @id @default(autoincrement())
    name                                               String                @db.VarChar(45)
    zh_name                                            String?               @db.VarChar(50)
    state                                              String?               @db.VarChar(45)
    zh_state                                           String?               @db.VarChar(50)
    country                                            String?               @db.VarChar(2)
    place_id                                           String?               @unique(map: "place_id_2") @db.VarChar(300)
    search_level                                       String?               @db.VarChar(100)
    phonecode                                          String?               @db.VarChar(5)
    alias                                              String?               @db.VarChar(4000)
    geo_lat                                            Decimal?              @db.Decimal(10, 6)
    geo_long                                           Decimal?              @db.Decimal(10, 6)
    url                                                String?               @unique(map: "url") @db.VarChar(200)
    published                                          Boolean               @default(false)
    orig_city                                          Int?
    created                                            DateTime?             @default(now()) @db.Timestamp(0)
    modified                                           DateTime?             @db.DateTime(0)
    createdby                                          Int?
    modifiedby                                         Int?
    near_by                                            String?               @db.VarChar(4000)
    map_image                                          String?               @db.VarChar(100)
    utc_offset                                         Int?
    state_id                                           Int?
    timezone                                           String?               @db.VarChar(50)
    city                                               city?                 @relation("cityTocity", fields: [orig_city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "city_ibfk_1")
    other_city                                         city[]                @relation("cityTocity")
    area_values                                        area_values?          @relation(fields: [state_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "city_ibfk_2")
    company_company_cityTocity                         company[]             @relation("company_cityTocity")
    enquiry_enquiry_cityTocity                         enquiry[]             @relation("enquiry_cityTocity")
    event_event_cityTocity                             event[]               @relation("event_cityTocity")
    event_exhibitor_event_exhibitor_cityTocity         event_exhibitor[]     @relation("event_exhibitor_cityTocity")
    groups_groups_cityTocity                           groups[]              @relation("groups_cityTocity")
    hotel_desc_21dec                                   hotel_desc_21dec[]
    listing_combo_listing_combo_cityTocity             listing_combo[]       @relation("listing_combo_cityTocity")
    listing_follow_page_listing_follow_page_cityTocity listing_follow_page[] @relation("listing_follow_page_cityTocity")
    user_user_cityTocity                               user[]                @relation("user_cityTocity")
    user_devices                                       user_devices[]
    user_history_user_history_cityTocity               user_history[]        @relation("user_history_cityTocity")
    venue_venue_cityTocity                             venue[]               @relation("venue_cityTocity")

    @@index([state_id], map: "fk_city_area_values")
    @@index([country], map: "fk_city_country")
    @@index([geo_lat], map: "geo_lat")
    @@index([geo_long], map: "geo_long")
    @@index([name], map: "name")
    @@index([near_by(length: 767)], map: "near_by")
    @@index([orig_city], map: "orig_city")
    @@index([published], map: "published")
    @@index([timezone], map: "timezone")
    @@index([zh_name], map: "zh_name")
    @@index([zh_state], map: "zh_state")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model city_old_1 {
    id               Int          @id @default(autoincrement())
    name             String       @db.VarChar(45)
    zh_name          String?      @db.VarChar(50)
    state            String?      @db.VarChar(45)
    zh_state         String?      @db.VarChar(50)
    country          String?      @db.VarChar(2)
    place_id         String?      @unique(map: "place_id_2") @db.VarChar(300)
    search_level     String?      @db.VarChar(100)
    phonecode        String?      @db.VarChar(5)
    alias            String?      @db.VarChar(4000)
    geo_lat          Decimal?     @db.Decimal(10, 6)
    geo_long         Decimal?     @db.Decimal(10, 6)
    url              String?      @unique(map: "url") @db.VarChar(200)
    published        Boolean      @default(false)
    orig_city        Int?
    created          DateTime?    @default(now()) @db.Timestamp(0)
    modified         DateTime?    @db.DateTime(0)
    createdby        Int?
    modifiedby       Int?
    near_by          String?      @db.VarChar(4000)
    map_image        String?      @db.VarChar(100)
    utc_offset       Int?
    state_id         String?      @db.VarChar(100)
    city_old_1       city_old_1?  @relation("city_old_1Tocity_old_1", fields: [orig_city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "city_old_1_ibfk_1")
    other_city_old_1 city_old_1[] @relation("city_old_1Tocity_old_1")

    @@index([country], map: "fk_city_country")
    @@index([geo_lat, geo_long], map: "geo_lat")
    @@index([name], map: "name")
    @@index([near_by(length: 767)], map: "near_by")
    @@index([orig_city], map: "orig_city")
    @@index([published], map: "published")
    @@index([zh_name], map: "zh_name")
    @@index([zh_state], map: "zh_state")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model claim {
    id                              Int       @id @default(autoincrement())
    user                            Int
    event                           Int?
    company                         Int?
    created                         DateTime? @default(now()) @db.Timestamp(0)
    modified                        DateTime? @db.Timestamp(0)
    status                          Int       @default(0)
    requested_from                  Int?
    approvedby                      Int?
    approvedon                      DateTime? @db.Timestamp(0)
    mail_type                       String?   @db.VarChar(150)
    venue                           Int?
    user_claim_userTouser           user      @relation("claim_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "claim_ibfk_1")
    event_claim_eventToevent        event?    @relation("claim_eventToevent", fields: [event], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "claim_ibfk_2")
    company_claim_companyTocompany  company?  @relation("claim_companyTocompany", fields: [company], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "claim_ibfk_3")
    user_claim_approvedbyTouser     user?     @relation("claim_approvedbyTouser", fields: [approvedby], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "claim_ibfk_4")
    venue_claim_venueTovenue        venue?    @relation("claim_venueTovenue", fields: [venue], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "claim_ibfk_6")
    user_claim_requested_fromTouser user?     @relation("claim_requested_fromTouser", fields: [requested_from], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "claim_ibfk_7")

    @@unique([user, company], map: "c_company")
    @@unique([user, event], map: "c_event")
    @@index([venue], map: "claim_ibfk_6")
    @@index([company], map: "company_id")
    @@index([company, status], map: "company_status")
    @@index([event], map: "event_id")
    @@index([mail_type], map: "mail_type")
    @@index([modified], map: "modified")
    @@index([approvedby], map: "modifiedby")
    @@index([requested_from], map: "requested_from")
    @@index([status], map: "status")
    @@index([user], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model communication_log {
    id               Int             @id @default(autoincrement())
    event_id         Int
    edition_id       Int
    communication_id String          @db.VarChar(30)
    sent_date        DateTime?       @db.Timestamp(0)
    quantity         Int?
    schedule         DateTime?       @db.Timestamp(0)
    created          DateTime        @default(now()) @db.Timestamp(0)
    campaign_pool    campaign_pool[]
    event            event           @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "communication_log_ibfk_1")
    event_edition    event_edition   @relation(fields: [edition_id], references: [id], onUpdate: Restrict, map: "communication_log_ibfk_2")

    @@unique([event_id, edition_id, communication_id], map: "unique_index")
    @@index([communication_id], map: "com_id")
    @@index([created], map: "created")
    @@index([edition_id], map: "edition")
    @@index([event_id], map: "event")
    @@index([schedule], map: "schedule")
    @@index([sent_date], map: "sent_date")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company {
    id                                                 Int                      @id @unique(map: "host_un") @default(autoincrement())
    gst_no                                             String?                  @db.VarChar(45)
    name                                               String                   @db.VarChar(100)
    zh_name                                            String?                  @db.VarChar(100)
    city                                               Int?
    country                                            String?                  @db.VarChar(2)
    address                                            String?                  @db.VarChar(200)
    pincode                                            String?                  @db.VarChar(20)
    website                                            String?                  @db.VarChar(255)
    phone                                              String?                  @db.VarChar(200)
    profile                                            String?                  @db.VarChar(4000)
    logo                                               Int?
    membership                                         Int?                     @default(0)
    url                                                String?                  @unique(map: "url") @db.VarChar(200)
    parent_company                                     Int?
    facebook_id                                        String?                  @db.VarChar(100)
    linkedin_id                                        String?                  @db.VarChar(100)
    twitter_id                                         String?                  @db.VarChar(100)
    account_manager                                    Int?
    last_login                                         DateTime?                @db.Timestamp(0)
    upcoming_events                                    Int?
    total_events                                       Int?
    total_leads                                        Int?
    avg_leads                                          Float?                   @db.Float
    onboard_date                                       DateTime?                @db.Timestamp(0)
    pipedrive_id                                       Int?                     @unique(map: "pipedrive_id")
    published                                          Boolean?                 @default(false)
    created                                            DateTime?                @default(now()) @db.Timestamp(0)
    createdby                                          Int?
    modified                                           DateTime?                @default(now()) @db.Timestamp(0)
    modifiedby                                         Int?
    host                                               String?                  @db.VarChar(200)
    domain                                             String?                  @db.VarChar(200)
    level                                              Boolean?                 @default(false)
    first_login                                        DateTime?                @db.Timestamp(0)
    last_event_added                                   DateTime?                @db.Timestamp(0)
    billing_company                                    Int?                     @default(0)
    odash_request_access                               String?                  @db.VarChar(300)
    profile_score                                      Int?
    verified_status                                    Int?                     @db.TinyInt
    verified_on                                        DateTime?                @db.DateTime(0)
    verified_by                                        Int?
    company_score                                      Int?
    total_exhibit                                      Int?
    total_visitor                                      Int?
    linked_event                                       Int?
    total_sponsor                                      Int?
    odash_activeness                                   Int?
    total_follower                                     Int?
    verified_mode                                      String?                  @db.VarChar(100)
    source                                             String?                  @db.VarChar(25)
    credit_balance                                     Float?                   @db.Float
    ft_ex_upe                                          Int?
    ft_ex_upe_t                                        Int?
    ft_ex_upe_c                                        Int?
    ad_budget_history                                  ad_budget_history[]
    app_events                                         app_events[]
    association_membership                             association_membership[]
    claim_claim_companyTocompany                       claim[]                  @relation("claim_companyTocompany")
    user_company_account_managerTouser                 user?                    @relation("company_account_managerTouser", fields: [account_manager], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "company_ibfk_1")
    attachment                                         attachment?              @relation(fields: [logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "company_ibfk_2")
    city_company_cityTocity                            city?                    @relation("company_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_city_id")
    country_company_countryTocountry                   country?                 @relation("company_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_company_country")
    company                                            company?                 @relation("companyTocompany", fields: [parent_company], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_parent_company")
    other_company                                      company[]                @relation("companyTocompany")
    company_tag_company_tag_companyTocompany           company_tag[]            @relation("company_tag_companyTocompany")
    company_user                                       company_user[]
    credits_config                                     credits_config[]
    document_mapping_document_mapping_companyTocompany document_mapping[]       @relation("document_mapping_companyTocompany")
    enquiry_enquiry_companyTocompany                   enquiry[]                @relation("enquiry_companyTocompany")
    groups                                             groups[]
    payment_gateway_setup                              payment_gateway_setup[]
    pending_checkins                                   pending_checkins[]
    user_user_companyTocompany                         user[]                   @relation("user_companyTocompany")
    user_enquiry_user_enquiry_companyTocompany         user_enquiry[]           @relation("user_enquiry_companyTocompany")
    venue_venue_companyTocompany                       venue[]                  @relation("venue_companyTocompany")
    webinar_ledger                                     webinar_ledger[]
    whitelabel_conf                                    whitelabel_conf[]

    @@index([account_manager, onboard_date], map: "account_manager")
    @@index([billing_company], map: "billing_company")
    @@index([country, published], map: "country")
    @@index([created], map: "created")
    @@index([city], map: "fk_city_id")
    @@index([country], map: "fk_company_country")
    @@index([ft_ex_upe], map: "ft_ex_upe")
    @@index([ft_ex_upe_c], map: "ft_ex_upe_c")
    @@index([ft_ex_upe_t], map: "ft_ex_upe_t")
    @@index([gst_no], map: "glusr_id")
    @@index([host], map: "host")
    @@index([last_event_added], map: "last_event_added")
    @@index([last_login, upcoming_events, total_events], map: "last_login")
    @@index([logo], map: "logo")
    @@index([modified], map: "modified")
    @@index([name], map: "name")
    @@index([name], map: "name_2")
    @@index([name, website, host], map: "name_website_host")
    @@index([onboard_date], map: "onboard_date")
    @@index([parent_company], map: "parent_company")
    @@index([profile(length: 3072)], map: "profile")
    @@index([profile_score], map: "profile_score")
    @@index([published], map: "published")
    @@index([total_events], map: "total_events")
    @@index([total_leads], map: "total_leads")
    @@index([upcoming_events], map: "upcoming_events")
    @@index([zh_name], map: "zh_name")
}

model company_follow {
    id            Int       @id @default(autoincrement())
    company_id    Int
    follower_id   Int
    status        Int       @default(1) @db.TinyInt
    created       DateTime? @default(now()) @db.Timestamp(0)
    unfollow_date DateTime? @db.Timestamp(0)
    source        String?   @db.VarChar(20)
    user          user      @relation(fields: [follower_id], references: [id], onUpdate: Restrict, map: "company_follow_ibfk_2")

    @@unique([company_id, follower_id], map: "company_id_2")
    @@index([company_id], map: "company_id")
    @@index([follower_id], map: "follower_id")
}

model company_interests {
    id        Int       @id @default(autoincrement())
    company   Int
    interest  String?   @db.VarChar(50)
    value     String?   @db.VarChar(200)
    source    String?   @db.VarChar(100)
    created   DateTime? @default(now()) @db.Timestamp(0)
    confirmed Boolean?  @default(false)
    modified  DateTime? @db.Timestamp(0)

    @@unique([company, interest, value], map: "company_2")
    @@index([interest, value], map: "interest_value")
}

model company_product {
    id                                       Int      @id @default(autoincrement())
    event_exb_id                             Int
    product                                  Int
    created                                  DateTime @default(now()) @db.Timestamp(0)
    created_by                               Int
    product_company_product_productToproduct product  @relation("company_product_productToproduct", fields: [product], references: [id], onUpdate: Restrict, map: "company_product_ibfk_2")

    @@unique([event_exb_id, product], map: "unique_index")
    @@index([event_exb_id], map: "event_exb_id")
    @@index([product], map: "product")
}

model company_tag {
    id                                   Int       @id @default(autoincrement())
    tag_name                             String    @db.VarChar(50)
    company                              Int
    created                              DateTime  @db.DateTime(0)
    createdby                            Int
    modified                             DateTime? @db.DateTime(0)
    modifiedby                           Int?
    published                            Boolean
    company_company_tag_companyTocompany company   @relation("company_tag_companyTocompany", fields: [company], references: [id], onUpdate: Restrict, map: "companyTag_fk1")
    user_company_tag_createdbyTouser     user      @relation("company_tag_createdbyTouser", fields: [createdby], references: [id], onUpdate: Restrict, map: "companyTag_fk2")
    user_company_tag_modifiedbyTouser    user?     @relation("company_tag_modifiedbyTouser", fields: [modifiedby], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "companyTag_fk3")

    @@index([company], map: "companyTag_fk1")
    @@index([createdby], map: "companyTag_fk2")
    @@index([modifiedby], map: "companyTag_fk3")
}

model company_user {
    id         Int      @id @default(autoincrement())
    company_id Int
    user_id    Int
    published  Int      @db.TinyInt
    created    DateTime @default(now()) @db.Timestamp(0)
    company    company  @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "company_user_ibfk_1")
    user       user     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "company_user_ibfk_2")

    @@unique([company_id, user_id], map: "company_id")
    @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model connect {
    id               Int                @id @default(autoincrement())
    sender           Int
    receiver         Int
    event            Int?
    edition          Int?
    status           Int
    access_key       String             @db.VarChar(100)
    activation_token String?            @db.VarChar(200)
    created          DateTime?          @default(now()) @db.Timestamp(0)
    modified         DateTime?          @db.DateTime(0)
    ip_addr          String?            @db.Char(15)
    source           String?            @db.VarChar(50)
    device           String?            @db.VarChar(50)
    meeting          DateTime?          @db.Timestamp(0)
    time             DateTime?          @db.Time(0)
    type             Int?               @db.TinyInt
    visitor_meetings visitor_meetings[]

    @@index([access_key], map: "access_key")
    @@index([activation_token], map: "activation_token")
    @@index([created], map: "created")
    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([modified], map: "modified")
    @@index([sender, receiver], map: "sender_2")
    @@index([source], map: "source")
}

model connect_backup {
    id               Int       @id @default(autoincrement())
    sender           Int
    receiver         Int
    event            Int
    edition          Int?
    status           Int
    access_key       String    @db.VarChar(100)
    activation_token String?   @db.VarChar(200)
    created          DateTime? @default(now()) @db.Timestamp(0)
    modified         DateTime? @default(now()) @db.Timestamp(0)
    ip_addr          String?   @db.Char(15)
    source           String?   @db.VarChar(50)
    device           String?   @db.VarChar(50)
    meeting          DateTime? @db.Timestamp(0)
    time             DateTime? @db.Time(0)
    type             Int?      @db.TinyInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contact {
    id             Int       @id @default(autoincrement())
    entity_type    Int
    entity_id      Int
    user_reference Int
    metadata       String?   @db.VarChar(4000)
    notification   Int       @default(10)
    role_id        Int?      @default(0)
    published      Int?      @default(1)
    show_phone     Int?      @default(0) @db.TinyInt
    sales_user     String?   @db.VarChar(40)
    created        DateTime  @default(now()) @db.Timestamp(0)
    modified       DateTime? @db.Timestamp(0)
    createdby      Int
    modifiedby     Int?
    is_stall       Boolean?  @default(false)
    is_visitor     Boolean?  @default(false)
    verified_on    DateTime? @db.Timestamp(0)
    verified_by    Int?
    verified_type  String?   @db.Char(2)

    @@unique([entity_id, entity_type, user_reference], map: "entity_id_2")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([user_reference], map: "fk_linked_user_id")
    @@index([notification], map: "notification")
    @@index([published], map: "published")
    @@index([role_id], map: "role_id")
    @@index([sales_user], map: "sales_user")
    @@index([verified_on, verified_by], map: "verified_on")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contact1 {
    id               Int       @id @default(autoincrement())
    entity_type      Int
    entity_id        Int
    user_reference   Int
    metadata         String?   @db.VarChar(4000)
    notification     Int       @default(10)
    role_id          Int?      @default(0)
    sales_user       String?   @db.VarChar(40)
    created          DateTime  @default(now()) @db.Timestamp(0)
    modified         DateTime? @db.Timestamp(0)
    createdby        Int
    modifiedby       Int?
    verified_by_us   DateTime? @db.Timestamp(0)
    verified_by_user DateTime? @db.Timestamp(0)
    is_stall         Boolean?  @default(false)
    is_visitor       Boolean?  @default(false)

    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([user_reference], map: "fk_linked_user_id")
    @@index([notification], map: "notification")
    @@index([role_id], map: "role_id")
    @@index([sales_user], map: "sales_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contact_backup {
    id             Int       @id @default(autoincrement())
    entity_type    Int
    entity_id      Int
    user_reference Int
    metadata       String?   @db.VarChar(4000)
    display        Boolean   @default(false)
    general_mail   Boolean   @default(false)
    space_mail     Boolean   @default(false)
    visitor_mail   Boolean   @default(false)
    role_id        Int?      @default(0)
    created        DateTime  @default(now()) @db.Timestamp(0)
    modified       DateTime? @db.Timestamp(0)
    createdby      Int
    modifiedby     Int?
    action         String?   @db.VarChar(20)
    sales_user     String?   @db.VarChar(40)

    @@index([display], map: "display")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([user_reference], map: "fk_linked_user_id")
    @@index([role_id], map: "role_id")
}

model contact_mail {
    id        Int      @id @default(autoincrement())
    mail_from Int
    event     Int
    edition   Int
    mail_type String   @db.VarChar(12)
    subject   String   @db.VarChar(300)
    mail_text String   @db.VarChar(3000)
    metadata  String   @db.VarChar(100)
    count     Int
    created   DateTime @default(now()) @db.Timestamp(0)
}

model contact_temp {
    id         Int  @id @default(autoincrement())
    contact_id Int?
}

model conv_group {
    id           Int            @id @default(autoincrement())
    ch_id        String         @unique(map: "ch_id") @db.VarChar(40)
    entity_type  String         @db.VarChar(30)
    entity_id    Int
    group_type   String         @db.VarChar(30)
    created      DateTime       @default(now()) @db.Timestamp(0)
    modified     DateTime?      @db.Timestamp(0)
    published    Int
    title        String?        @db.VarChar(255)
    conv_member  conv_member[]
    conv_message conv_message[]

    @@unique([group_type, entity_type, entity_id], map: "group_type")
}

model conv_member {
    id                          Int        @id @default(autoincrement())
    conv_group_id               Int
    user                        Int
    published                   Int
    created                     DateTime   @default(now()) @db.Timestamp(0)
    modified                    DateTime?  @db.Timestamp(0)
    user_conv_member_userTouser user       @relation("conv_member_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "conv_member_ibfk_1")
    conv_group                  conv_group @relation(fields: [conv_group_id], references: [id], onUpdate: Restrict, map: "conv_member_ibfk_2")

    @@unique([conv_group_id, user], map: "group_user")
    @@index([user], map: "user")
}

model conv_message {
    id            Int        @id @default(autoincrement())
    conv_group_id Int
    sender        Int
    created       DateTime?  @default(now()) @db.Timestamp(0)
    published     Int
    message       String     @db.Text
    user          user       @relation(fields: [sender], references: [id], onUpdate: Restrict, map: "conv_message_ibfk_1")
    conv_group    conv_group @relation(fields: [conv_group_id], references: [id], onUpdate: Restrict, map: "conv_message_ibfk_2")

    @@index([conv_group_id], map: "conv_group_id")
    @@index([sender], map: "sender")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model country {
    id                                                       String                @id @db.Char(2)
    name                                                     String                @db.VarChar(45)
    zh_name                                                  String?               @db.VarChar(45)
    shortname                                                String                @db.VarChar(20)
    phonecode                                                String                @db.VarChar(10)
    zone                                                     String?               @db.VarChar(45)
    alias                                                    String?               @db.VarChar(1000)
    url                                                      String                @unique(map: "url") @db.VarChar(200)
    place_id                                                 String                @unique(map: "place_id_2") @db.VarChar(100)
    currency                                                 String?               @db.Char(3)
    published                                                Boolean               @default(false)
    created                                                  DateTime              @default(now()) @db.Timestamp(0)
    modified                                                 DateTime?             @db.Timestamp(0)
    createdby                                                Int
    modifiedby                                               Int?
    country_longname                                         String?               @db.Text
    continent                                                String?               @db.VarChar(45)
    sub_continent                                            Int?
    sub_continent1                                           Int?
    blacklist_domains                                        blacklist_domains[]
    company_company_countryTocountry                         company[]             @relation("company_countryTocountry")
    area_values                                              area_values?          @relation(fields: [sub_continent], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "area_values_fk")
    enquiry_enquiry_countryTocountry                         enquiry[]             @relation("enquiry_countryTocountry")
    event_event_countryTocountry                             event[]               @relation("event_countryTocountry")
    event_backup_event_backup_countryTocountry               event_backup[]        @relation("event_backup_countryTocountry")
    event_exhibitor_event_exhibitor_countryTocountry         event_exhibitor[]     @relation("event_exhibitor_countryTocountry")
    groups_groups_countryTocountry                           groups[]              @relation("groups_countryTocountry")
    ip_country                                               ip_country[]
    listing_combo_listing_combo_countryTocountry             listing_combo[]       @relation("listing_combo_countryTocountry")
    listing_follow_page_listing_follow_page_countryTocountry listing_follow_page[] @relation("listing_follow_page_countryTocountry")
    user_user_countryTocountry                               user[]                @relation("user_countryTocountry")
    user_devices                                             user_devices[]
    user_history_user_history_countryTocountry               user_history[]        @relation("user_history_countryTocountry")
    venue_venue_countryTocountry                             venue[]               @relation("venue_countryTocountry")

    @@index([sub_continent], map: "area_values_fk")
    @@index([name], map: "name")
    @@index([shortname], map: "shortname")
    @@index([zh_name], map: "zh_name")
    @@index([zone], map: "zone")
}

model credit_note {
    id                                                           Int             @id @default(autoincrement())
    created                                                      DateTime?       @default(now()) @db.Timestamp(0)
    service_invoice                                              Int
    created_by                                                   Int
    amount                                                       Float?          @db.Float
    instruction                                                  String?         @db.VarChar(2000)
    service_invoice_credit_note_service_invoiceToservice_invoice service_invoice @relation("credit_note_service_invoiceToservice_invoice", fields: [service_invoice], references: [id], onUpdate: Restrict, map: "credit_note_ibfk_1")
    user                                                         user            @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "credit_note_ibfk_2")

    @@index([created_by], map: "created_by")
    @@index([service_invoice], map: "service_invoice")
}

model credits_config {
    id                                    Int       @id @default(autoincrement())
    company_id                            Int
    feature                               String    @db.VarChar(50)
    credit                                Int
    auto_allocate                         Int?      @db.TinyInt
    created                               DateTime? @db.Timestamp(0)
    created_by                            Int?
    modified                              DateTime? @db.Timestamp(0)
    modified_by                           Int?
    company                               company   @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "credits_config_ibfk_1")
    user_credits_config_created_byTouser  user?     @relation("credits_config_created_byTouser", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "credits_config_ibfk_2")
    user_credits_config_modified_byTouser user?     @relation("credits_config_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "credits_config_ibfk_3")

    @@index([company_id], map: "company_id")
    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
}

model crons {
    id        Int       @id @default(autoincrement())
    name      String?   @db.VarChar(200)
    frequency Int       @default(0)
    owner     Int?
    type      String?   @db.VarChar(50)
    last_run  DateTime? @db.Timestamp(0)
    output    String?   @db.VarChar(5000)
    published Int       @default(1)
    user      user?     @relation(fields: [owner], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "crons_ibfk_1")

    @@index([owner], map: "owner")
}

model cta_clicks {
    id           Int      @id @default(autoincrement())
    user         Int?
    channel      String?  @db.VarChar(500)
    created      DateTime @default(now()) @db.Timestamp(0)
    campaign     String?  @db.VarChar(500)
    campaign_ref Int?
    source       String?  @db.VarChar(500)
    medium       String?  @db.VarChar(500)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer_membership {
    id                   Int       @id @default(autoincrement())
    entity_type          Int       @db.TinyInt
    entity_id            Int?
    company              Int?
    cust_membership_plan Int       @db.TinyInt
    start_date           DateTime  @db.Date
    end_date             DateTime  @db.Date
    work_order           Int
    published            Int       @default(1) @db.TinyInt
    pay_amount           Int?
    comment              String?   @db.VarChar(200)
    created              DateTime  @default(now()) @db.Timestamp(0)
    modified             DateTime? @db.Timestamp(0)
    createdby            Int
    modifiedby           Int?

    @@index([company], map: "company")
    @@index([cust_membership_plan], map: "cust_membership_plan")
    @@index([end_date], map: "end_date")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([company], map: "fk_customer_membership_company")
    @@index([published], map: "published")
    @@index([start_date], map: "start_date")
    @@index([work_order], map: "work_order")
}

model customization {
    id          Int       @id @default(autoincrement())
    entity_type Int
    entity_id   Int
    title       String?   @db.VarChar(100)
    value       String?   @db.VarChar(100)
    created     DateTime  @default(now()) @db.Timestamp(0)
    modified    DateTime? @db.Timestamp(0)
}

model daily_event_check {
    id           Int       @id @default(autoincrement())
    event_id     Int
    edition_id   Int
    check_date   DateTime  @default(now()) @db.Timestamp(0)
    check_by     Int?
    counter      Int       @default(0) @db.TinyInt
    priority     Int?      @db.TinyInt
    pool         Int?      @db.TinyInt
    counter_date DateTime? @db.Date
    remark       String    @db.VarChar(30)
}

model designation {
    id                                                     Int                        @id @default(autoincrement())
    display_name                                           String                     @db.VarChar(200)
    alias_of                                               Int?
    spelling_of                                            Int?
    role                                                   String?                    @db.VarChar(40)
    department                                             String?                    @db.VarChar(30)
    created                                                DateTime                   @default(now()) @db.Timestamp(0)
    created_by                                             Int?
    published                                              Int                        @default(1) @db.TinyInt
    display_group                                          String?                    @db.VarChar(50)
    url                                                    String?                    @db.Char(50)
    user                                                   user?                      @relation(fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "designation_ibfk_3")
    designation_designation_alias_ofTodesignation          designation?               @relation("designation_alias_ofTodesignation", fields: [alias_of], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "designation_ibfk_4")
    other_designation_designation_alias_ofTodesignation    designation[]              @relation("designation_alias_ofTodesignation")
    designation_designation_spelling_ofTodesignation       designation?               @relation("designation_spelling_ofTodesignation", fields: [spelling_of], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "designation_ibfk_5")
    other_designation_designation_spelling_ofTodesignation designation[]              @relation("designation_spelling_ofTodesignation")
    designation_page_mapping                               designation_page_mapping[]

    @@index([alias_of], map: "alias_of")
    @@index([created_by], map: "created_by")
    @@index([department], map: "department")
    @@index([display_group], map: "display_group")
    @@index([display_name], map: "display_name")
    @@index([id], map: "id")
    @@index([published], map: "published")
    @@index([role], map: "role")
    @@index([spelling_of], map: "spelling_of")
}

model designation_page {
    id                       Int                        @id @default(autoincrement())
    name                     String                     @db.VarChar(50)
    url                      String                     @db.VarChar(50)
    published                Int                        @default(1)
    created                  DateTime                   @default(now()) @db.DateTime(0)
    logo                     Int?
    wrapper                  Int?
    tags                     String?                    @db.VarChar(300)
    designation_page_mapping designation_page_mapping[]
}

model designation_page_mapping {
    id                  Int              @id @default(autoincrement())
    designation_id      Int
    designation_page_id Int
    created             DateTime         @default(now()) @db.DateTime(0)
    modified            DateTime?        @db.DateTime(0)
    published           Int
    designation         designation      @relation(fields: [designation_id], references: [id], onUpdate: Restrict, map: "designation_page_mapping_ibfk_1")
    designation_page    designation_page @relation(fields: [designation_page_id], references: [id], onUpdate: Restrict, map: "designation_page_mapping_ibfk_2")

    @@unique([designation_id, designation_page_id], map: "designation")
    @@index([designation_id], map: "designation_2")
    @@index([designation_page_id], map: "page_id")
}

model django_admin_log {
    id                  Int                  @id @default(autoincrement())
    action_time         DateTime             @db.DateTime(6)
    object_id           String?              @db.LongText
    object_repr         String               @db.VarChar(200)
    action_flag         Int                  @db.UnsignedSmallInt
    change_message      String               @db.LongText
    content_type_id     Int?
    user_id             Int
    django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
    auth_user           auth_user            @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

    @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
    @@index([user_id], map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")
}

model django_content_type {
    id               Int                @id @default(autoincrement())
    app_label        String             @db.VarChar(100)
    model            String             @db.VarChar(100)
    auth_permission  auth_permission[]
    django_admin_log django_admin_log[]

    @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
    id      BigInt   @id @default(autoincrement())
    app     String   @db.VarChar(255)
    name    String   @db.VarChar(255)
    applied DateTime @db.DateTime(6)
}

model django_session {
    session_key  String   @id @db.VarChar(40)
    session_data String   @db.LongText
    expire_date  DateTime @db.DateTime(6)

    @@index([expire_date], map: "django_session_expire_date_a5c62663")
}

model document {
    id               Int                @id @default(autoincrement())
    name             String             @db.VarChar(300)
    title            String?            @db.VarChar(500)
    media_type       String             @db.VarChar(10)
    media_value      String             @db.VarChar(500)
    published        Boolean
    created          DateTime           @default(now()) @db.DateTime(0)
    type             String?            @db.VarChar(100)
    thumbnail        String?            @db.VarChar(500)
    size             String?            @db.VarChar(200)
    createdby        Int
    document_mapping document_mapping[]
    document_tracker document_tracker[]
}

model document_mapping {
    id                                        Int                @id @default(autoincrement())
    document_id                               Int?
    url                                       String?            @db.VarChar(200)
    edition                                   Int?
    company                                   Int?
    last_seen                                 DateTime?          @db.Timestamp(0)
    score                                     Int                @default(0)
    campaign_ref                              String?            @db.VarChar(50)
    download                                  Int                @default(0)
    created                                   DateTime?          @db.Timestamp(0)
    position                                  Int
    document                                  document?          @relation(fields: [document_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_mapping_ibfk_1")
    event_edition                             event_edition?     @relation(fields: [edition], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_mapping_ibfk_2")
    company_document_mapping_companyTocompany company?           @relation("document_mapping_companyTocompany", fields: [company], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_mapping_ibfk_3")
    document_tracker                          document_tracker[]

    @@index([document_id], map: "document_mapping_ibfk_1")
    @@index([edition], map: "document_mapping_ibfk_2")
    @@index([company], map: "document_mapping_ibfk_3")
}

model document_tracker {
    id                               Int                        @id @default(autoincrement())
    ga_user                          Int?
    created                          DateTime                   @default(now()) @db.Timestamp(0)
    referby                          Int?
    duration                         Int?
    seen                             DateTime?                  @db.Timestamp(0)
    scroll                           Float?                     @db.Float
    dt_id                            Int?
    user                             Int?
    dm_id                            Int?
    downloads                        Int?                       @default(0)
    last_download                    DateTime?                  @db.Timestamp(0)
    user_document_tracker_userTouser user?                      @relation("document_tracker_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_tacker_ibfk_3")
    document                         document?                  @relation(fields: [dt_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_tracker_ibfk_1")
    document_mapping                 document_mapping?          @relation(fields: [dm_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_tracker_ibfk_2")
    document_tracker_history         document_tracker_history[]

    @@index([dm_id], map: "dm_id")
    @@index([dt_id], map: "document_id")
    @@index([user], map: "document_tacker_ibfk_3")
}

model document_tracker_history {
    id               Int               @id @default(autoincrement())
    duration         Int?
    dt_id            Int?
    seen             DateTime          @default(now()) @db.Timestamp(0)
    scroll           Float?            @db.Float
    document_tracker document_tracker? @relation(fields: [dt_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "document_tracker_history_ibfk_1")

    @@index([dt_id], map: "dt_id")
}

model domain {
    id          Int    @id @default(autoincrement())
    domain_id   String @db.VarChar(500)
    comp_count  Int
    event_count Int
    user_count  Int?
    company_id  Int

    @@index([domain_id], map: "domain_id")
}

model dummy_floor_logs {
    id                Int      @id @default(autoincrement())
    ip                String?  @db.VarChar(100)
    date              DateTime @db.DateTime(0)
    hour              Int
    minute            Int
    seconds           Int
    url               String   @db.VarChar(1000)
    screen            String   @db.VarChar(100)
    server            Int
    content           Int
    user_agent        String   @db.VarChar(1000)
    browser           String   @db.VarChar(100)
    device            String   @db.VarChar(100)
    ipfound           String   @db.VarChar(100)
    requestcount      Int
    castscreenvisited Int      @default(0)
}

model eht_events {
    id                            Int       @id @default(autoincrement())
    event                         Int       @unique(map: "event_2")
    eht_url                       String    @db.VarChar(200)
    eht_desc                      String    @db.Text
    mcat_id                       String    @db.VarChar(1000)
    mcat_name                     String?   @db.VarChar(1000)
    tz_cat_id                     String    @db.VarChar(1000)
    tz_cat_name                   String?   @db.VarChar(1000)
    published                     Boolean   @default(false)
    created                       DateTime  @default(now()) @db.Timestamp(0)
    modified                      DateTime? @db.Timestamp(0)
    createdby                     Int
    modifiedby                    Int?
    event_eht_events_eventToevent event     @relation("eht_events_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "eht_events_ibfk_1")

    @@index([created], map: "created")
    @@index([createdby], map: "createdby")
    @@index([modified], map: "modified")
    @@index([modifiedby], map: "modifiedby")
    @@index([published], map: "published")
}

model enquiry {
    id                               Int       @id @default(autoincrement())
    entity_type                      String?   @db.VarChar(50)
    entity_id                        Int?
    name                             String?   @db.VarChar(200)
    city                             Int?
    country                          String?   @db.Char(2)
    user                             Int?
    company                          Int?
    designation                      String?   @db.VarChar(100)
    website                          String?   @db.VarChar(200)
    created                          DateTime? @default(now()) @db.Timestamp(0)
    metadata                         String?   @db.Text
    city_enquiry_cityTocity          city?     @relation("enquiry_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "city")
    company_enquiry_companyTocompany company?  @relation("enquiry_companyTocompany", fields: [company], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "company")
    country_enquiry_countryTocountry country?  @relation("enquiry_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "country")
    user_enquiry_userTouser          user?     @relation("enquiry_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_id")

    @@index([city], map: "city")
    @@index([company], map: "company")
    @@index([country], map: "country")
    @@index([entity_id], map: "entity_id")
    @@index([user], map: "user")
}

model es_index {
    id            Int      @id @default(autoincrement())
    page_type     String   @db.VarChar(20)
    page_id       Int
    modified_time DateTime @default(now()) @db.Timestamp(0)
    priority      Int
    index_at      DateTime @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    indexed_at    DateTime @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    version       Int      @default(0)
    status        Int      @default(0) @db.TinyInt

    @@unique([page_type, page_id], map: "page_type")
    @@index([page_type, status, index_at], map: "es_page_type_status_index")
}

model escalation_tracking {
    id           Int       @id @default(autoincrement())
    created      DateTime? @default(now()) @db.Timestamp(0)
    entity_type  String?   @db.VarChar(20)
    entity_id    Int?
    action       String?   @db.VarChar(50)
    action_by    Int?
    action_value String?   @db.VarChar(50)
    user         user?     @relation(fields: [action_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "escalation_tracking_ibfk_1")

    @@index([action_by], map: "action_by")
}

model esite_tabs_mapping {
    id        Int     @id @default(autoincrement())
    app_id    Int
    tab_id    Int?
    name      String? @db.VarChar(200)
    position  Float?  @db.Float
    published Boolean @default(true)
    app       app     @relation(fields: [app_id], references: [id], onUpdate: Restrict, map: "app_tabs_mapping")

    @@unique([app_id, position], map: "appid_postion")
    @@unique([app_id, tab_id], map: "appid_tabid")
}

model estimate {
    id                            Int       @id
    event_id                      Int?
    country                       String?   @db.VarChar(100)
    start_date                    DateTime? @db.Date
    end_date                      DateTime? @db.Date
    categories                    String?   @db.VarChar(255)
    event_type                    Int?
    venueId                       Int?
    companyId                     Int?
    TotalExhibitors               Float?    @db.Float
    lowEstimate                   Float?    @db.Float
    finalEstimate                 Float?    @db.Float
    highEstimate                  Float?    @db.Float
    response_code                 Int?
    request_payload               String?   @db.Text
    cdf_based_score_international Float?    @db.Float
    cdf_based_score_inbound       Float?    @db.Float
    tags_international            String?   @db.VarChar(50)
    tags_inbound                  String?   @db.VarChar(50)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event {
    id                                                                               Int                                 @id @default(autoincrement())
    name                                                                             String                              @db.VarChar(200)
    zh_name                                                                          String?                             @db.VarChar(200)
    abbr_name                                                                        String?                             @db.VarChar(200)
    native_name                                                                      String?                             @db.VarChar(200)
    event_edition                                                                    Int?
    city                                                                             Int
    country                                                                          String                              @db.Char(2)
    start_date                                                                       DateTime?                           @db.Date
    end_date                                                                         DateTime?                           @db.Date
    website                                                                          String?                             @db.VarChar(300)
    frequency                                                                        String?                             @db.VarChar(45)
    url                                                                              String?                             @unique(map: "url") @db.VarChar(200)
    redirect_url                                                                     String?                             @db.VarChar(200)
    membership                                                                       Int?                                @default(0) @db.TinyInt
    published                                                                        Boolean?                            @default(false)
    app_id                                                                           Int?
    verified                                                                         DateTime?                           @db.DateTime(0)
    verifiedby                                                                       Int?
    status                                                                           String?                             @db.Char(1)
    created                                                                          DateTime                            @default(now()) @db.Timestamp(0)
    modified                                                                         DateTime?                           @default(now()) @db.Timestamp(0)
    createdby                                                                        Int?
    modifiedby                                                                       Int?
    event_type                                                                       Int                                 @db.TinyInt
    mail_type                                                                        Int                                 @default(1) @db.TinyInt
    mail_date                                                                        DateTime?                           @db.Timestamp(0)
    wrapper                                                                          Int?
    logo                                                                             Int?
    wrapper_small                                                                    Int?
    host                                                                             String?                             @db.VarChar(100)
    hotel_id                                                                         String?                             @db.VarChar(2000)
    punchline                                                                        String?                             @db.VarChar(500)
    validation                                                                       Int?                                @default(0) @db.TinyInt
    onboard_date                                                                     DateTime?                           @db.Timestamp(0)
    concurrent                                                                       Int?                                @default(0) @db.TinyInt
    duplicate                                                                        Int?
    badge_initial_id                                                                 String?                             @db.VarChar(50)
    tags                                                                             String?                             @db.VarChar(300)
    score                                                                            Int?                                @default(0)
    hotel_id2                                                                        String?                             @db.VarChar(20000)
    ios_url                                                                          String?                             @db.VarChar(300)
    android_url                                                                      String?                             @db.VarChar(300)
    adsense                                                                          Boolean                             @default(false)
    brand_id                                                                         Int?
    zh_published                                                                     Boolean?                            @default(false)
    functionality                                                                    String?                             @default("open") @db.VarChar(20)
    multi_city                                                                       Int?                                @default(0) @db.TinyInt
    remark                                                                           String?                             @db.VarChar(200)
    group_id                                                                         Int?
    sub_event_type                                                                   Int?
    online_event                                                                     Int?
    event_audience                                                                   String?                             @db.VarChar(20)
    ad_campaign                                                                      ad_campaign[]
    app_events                                                                       app_events[]
    association_membership                                                           association_membership[]
    change_history_change_history_eventToevent                                       change_history[]                    @relation("change_history_eventToevent")
    claim_claim_eventToevent                                                         claim[]                             @relation("claim_eventToevent")
    communication_log                                                                communication_log[]
    eht_events_eht_events_eventToevent                                               eht_events?                         @relation("eht_events_eventToevent")
    country_event_countryTocountry                                                   country                             @relation("event_countryTocountry", fields: [country], references: [id], onUpdate: Restrict, map: "event_ibfk_2")
    attachment_event_logoToattachment                                                attachment?                         @relation("event_logoToattachment", fields: [logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_ibfk_3")
    attachment_event_wrapperToattachment                                             attachment?                         @relation("event_wrapperToattachment", fields: [wrapper], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_ibfk_4")
    attachment_event_wrapper_smallToattachment                                       attachment?                         @relation("event_wrapper_smallToattachment", fields: [wrapper_small], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_ibfk_5")
    event_brands                                                                     event_brands?                       @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_ibfk_6")
    city_event_cityTocity                                                            city                                @relation("event_cityTocity", fields: [city], references: [id], onUpdate: Restrict, map: "event_ibfk_7")
    event_edition_event_event_editionToevent_edition                                 event_edition?                      @relation("event_event_editionToevent_edition", fields: [event_edition], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_event_event_edition1")
    event_agenda_event_agenda_eventToevent                                           event_agenda[]                      @relation("event_agenda_eventToevent")
    event_category_event_category_eventToevent                                       event_category[]                    @relation("event_category_eventToevent")
    event_communication_customization_event_communication_customization_eventToevent event_communication_customization[] @relation("event_communication_customization_eventToevent")
    event_data_event_data_eventToevent                                               event_data[]                        @relation("event_data_eventToevent")
    event_exhibitor                                                                  event_exhibitor[]
    event_feedback                                                                   event_feedback[]
    event_floorplan_event_floorplan_eventToevent                                     event_floorplan[]                   @relation("event_floorplan_eventToevent")
    event_products_event_products_eventToevent                                       event_products[]                    @relation("event_products_eventToevent")
    event_reverify                                                                   event_reverify[]
    event_settings                                                                   event_settings?
    event_speaker_event_speaker_eventToevent                                         event_speaker[]                     @relation("event_speaker_eventToevent")
    event_sponsors                                                                   event_sponsors[]
    event_ticket_event_ticket_eventToevent                                           event_ticket[]                      @relation("event_ticket_eventToevent")
    event_ticket_setup                                                               event_ticket_setup?
    event_visitor_event_visitor_eventToevent                                         event_visitor[]                     @relation("event_visitor_eventToevent")
    faq_faq_eventToevent                                                             faq[]                               @relation("faq_eventToevent")
    floor_analytics                                                                  floor_analytics[]
    leads                                                                            leads[]
    leads_push_leads_push_eventToevent                                               leads_push?                         @relation("leads_push_eventToevent")
    pending_checkins                                                                 pending_checkins[]
    resolution_history                                                               resolution_history[]
    service_subscription_service_subscription_eventToevent                           service_subscription[]              @relation("service_subscription_eventToevent")
    service_subscription_history_service_subscription_history_eventToevent           service_subscription_history[]      @relation("service_subscription_history_eventToevent")
    user_booking                                                                     user_booking[]
    visitor_badge_visitor_badge_eventToevent                                         visitor_badge[]                     @relation("visitor_badge_eventToevent")
    visitor_meetings_visitor_meetings_eventToevent                                   visitor_meetings[]                  @relation("visitor_meetings_eventToevent")
    visitor_questionnaire                                                            visitor_questionnaire[]
    webinar_ledger                                                                   webinar_ledger[]

    @@index([abbr_name], map: "abbr_name")
    @@index([app_id], map: "app_id")
    @@index([createdby], map: "createdby")
    @@index([duplicate], map: "duplicate")
    @@index([end_date], map: "end_date")
    @@index([brand_id], map: "event_ibfk_6")
    @@index([event_type], map: "event_type")
    @@index([city], map: "fk_event_city1")
    @@index([country], map: "fk_event_country1")
    @@index([event_edition], map: "fk_event_event_edition1")
    @@index([name], map: "fulltext_name")
    @@index([functionality], map: "functionality")
    @@index([host], map: "host")
    @@index([logo], map: "logo")
    @@index([membership], map: "membership")
    @@index([name], map: "name")
    @@index([native_name], map: "native_name")
    @@index([onboard_date], map: "onboard_date")
    @@index([redirect_url], map: "redirect_url")
    @@index([score], map: "score")
    @@index([name, abbr_name, native_name], map: "search_event")
    @@index([start_date], map: "start_date")
    @@index([tags], map: "tags")
    @@index([website], map: "website")
    @@index([wrapper], map: "wrapper")
    @@index([wrapper_small], map: "wrapper_small")
    @@index([zh_name], map: "zh_name")
}

model event_agenda {
    id                              Int                           @id @default(autoincrement())
    event                           Int
    edition                         Int
    subvenue                        Int?
    title                           String?                       @db.VarChar(200)
    description                     String?                       @db.VarChar(7000)
    type                            String?                       @db.VarChar(50)
    start_time                      DateTime?                     @db.Timestamp(0)
    end_time                        DateTime?                     @db.Timestamp(0)
    tabs                            String?                       @db.VarChar(30)
    avg_rating                      Float?                        @db.Float
    attachment                      String?                       @db.VarChar(500)
    published                       Int                           @default(1)
    created                         DateTime                      @default(now()) @db.Timestamp(0)
    createdby                       Int?
    modified                        DateTime?                     @db.Timestamp(0)
    modified_by                     Int?
    dd                              Int?
    rec_status                      Int                           @default(0) @db.TinyInt
    joined                          Int                           @default(0)
    hosted_on                       String?                       @db.VarChar(50)
    start_utc                       BigInt?
    end_utc                         BigInt?
    download_status                 Int?                          @default(0) @db.TinyInt
    rec_vid                         String?                       @db.Text
    agenda_answers                  agenda_answers[]
    agenda_attachment               agenda_attachment[]
    agenda_follow                   agenda_follow[]
    agenda_streaming                agenda_streaming[]
    event_event_agenda_eventToevent event                         @relation("event_agenda_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_agenda_ibfk_1")
    event_edition                   event_edition                 @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "event_agenda_ibfk_2")
    sub_venue                       sub_venue?                    @relation(fields: [subvenue], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_agenda_ibfk_3")
    event_agenda_lang               event_agenda_lang[]
    event_agenda_speaker_rating     event_agenda_speaker_rating[]
    floor_contacts                  floor_contacts[]

    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([subvenue], map: "subvenue")
}

model event_agenda_lang {
    id              Int          @id @default(autoincrement())
    event_agenda_id Int
    title           String?      @db.VarChar(200)
    description     String?      @db.VarChar(7000)
    ln              String       @db.VarChar(2)
    event_agenda    event_agenda @relation(fields: [event_agenda_id], references: [id], onUpdate: Restrict, map: "event_agenda_lang_ibfk_1")

    @@unique([event_agenda_id, ln], map: "event_agenda_id")
    @@index([event_agenda_id], map: "event_agenda_id_2")
}

model event_agenda_speaker {
    id           Int       @id @default(autoincrement())
    agenda       Int
    speaker      Int
    speaker_type Int?      @db.TinyInt
    published    Int       @default(1)
    created      DateTime  @default(now()) @db.Timestamp(0)
    modified     DateTime? @db.Timestamp(0)

    @@index([agenda], map: "agenda")
    @@index([published], map: "published")
    @@index([speaker], map: "speaker")
}

model event_agenda_speaker_bkp {
    id        Int       @id @default(autoincrement())
    agenda    Int
    speaker   Int
    published Int       @default(1)
    created   DateTime  @default(now()) @db.Timestamp(0)
    modified  DateTime? @db.Timestamp(0)

    @@index([agenda], map: "agenda")
    @@index([published], map: "published")
    @@index([speaker], map: "speaker")
}

model event_agenda_speaker_rating {
    id            Int           @id @default(autoincrement())
    agenda        Int
    speaker       Int
    visitor       Int
    rating        Float?        @db.Float
    comment       String?       @db.VarChar(500)
    created       DateTime      @default(now()) @db.Timestamp(0)
    modified      DateTime?     @db.Timestamp(0)
    event_agenda  event_agenda  @relation(fields: [agenda], references: [id], onUpdate: Restrict, map: "event_agenda_speaker_rating_ibfk_1")
    event_speaker event_speaker @relation(fields: [speaker], references: [id], onUpdate: Restrict, map: "event_agenda_speaker_rating_ibfk_2")
    event_visitor event_visitor @relation(fields: [visitor], references: [id], onUpdate: Restrict, map: "event_agenda_speaker_rating_ibfk_3")

    @@index([agenda], map: "agenda_id")
    @@index([speaker], map: "speaker_id")
    @@index([visitor], map: "visitor_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_backup {
    id                                                Int           @id @default(autoincrement())
    name                                              String        @db.VarChar(200)
    zh_name                                           String?       @db.VarChar(200)
    abbr_name                                         String?       @db.VarChar(200)
    native_name                                       String?       @db.VarChar(200)
    event_edition                                     Int?
    city                                              Int
    country                                           String        @db.Char(2)
    start_date                                        DateTime?     @db.Date
    end_date                                          DateTime?     @db.Date
    website                                           String?       @db.VarChar(300)
    frequency                                         String?       @db.VarChar(45)
    url                                               String?       @unique(map: "url") @db.VarChar(200)
    redirect_url                                      String?       @db.VarChar(200)
    membership                                        Int?          @default(0) @db.TinyInt
    published                                         Boolean?      @default(false)
    app_id                                            Int?
    verified                                          DateTime?     @db.DateTime(0)
    verifiedby                                        Int?
    status                                            String?       @db.Char(1)
    created                                           DateTime      @default(now()) @db.Timestamp(0)
    modified                                          DateTime?     @default(now()) @db.Timestamp(0)
    createdby                                         Int?
    modifiedby                                        Int?
    event_type                                        Int           @db.TinyInt
    mail_type                                         Int           @default(1) @db.TinyInt
    mail_date                                         DateTime?     @db.Timestamp(0)
    wrapper                                           Int?
    logo                                              Int?
    wrapper_small                                     Int?
    host                                              String?       @db.VarChar(100)
    hotel_id                                          String?       @db.VarChar(2000)
    punchline                                         String?       @db.VarChar(500)
    validation                                        Int?          @default(0) @db.TinyInt
    onboard_date                                      DateTime?     @db.Timestamp(0)
    concurrent                                        Int?          @default(0) @db.TinyInt
    duplicate                                         Int?
    badge_initial_id                                  String?       @db.VarChar(50)
    tags                                              String?       @db.VarChar(300)
    score                                             Int?          @default(0)
    hotel_id2                                         String?       @db.VarChar(20000)
    ios_url                                           String?       @db.VarChar(300)
    android_url                                       String?       @db.VarChar(300)
    adsense                                           Boolean       @default(false)
    brand_id                                          Int?
    zh_published                                      Boolean?      @default(false)
    functionality                                     String?       @default("open") @db.VarChar(20)
    multi_city                                        Int?          @default(0) @db.TinyInt
    remark                                            String?       @db.VarChar(200)
    group_id                                          Int?
    sub_event_type                                    Int?
    online_event                                      Int?
    event_audience                                    String?       @db.VarChar(20)
    country_event_backup_countryTocountry             country       @relation("event_backup_countryTocountry", fields: [country], references: [id], onUpdate: Restrict, map: "eventbkp_ibfk_2")
    attachment_event_backup_logoToattachment          attachment?   @relation("event_backup_logoToattachment", fields: [logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "eventbkp_ibfk_3")
    attachment_event_backup_wrapperToattachment       attachment?   @relation("event_backup_wrapperToattachment", fields: [wrapper], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "eventbkp_ibfk_4")
    attachment_event_backup_wrapper_smallToattachment attachment?   @relation("event_backup_wrapper_smallToattachment", fields: [wrapper_small], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "eventbkp_ibfk_5")
    event_brands                                      event_brands? @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "eventbkp_ibfk_6")

    @@index([abbr_name], map: "abbr_name")
    @@index([app_id], map: "app_id")
    @@index([createdby], map: "createdby")
    @@index([duplicate], map: "duplicate")
    @@index([end_date], map: "end_date")
    @@index([brand_id], map: "event_ibfk_6")
    @@index([event_type], map: "event_type")
    @@index([city], map: "fk_event_city1")
    @@index([country], map: "fk_event_country1")
    @@index([event_edition], map: "fk_event_event_edition1")
    @@index([name], map: "fulltext_name")
    @@index([functionality], map: "functionality")
    @@index([host], map: "host")
    @@index([logo], map: "logo")
    @@index([membership], map: "membership")
    @@index([name], map: "name")
    @@index([native_name], map: "native_name")
    @@index([onboard_date], map: "onboard_date")
    @@index([redirect_url], map: "redirect_url")
    @@index([score], map: "score")
    @@index([name, abbr_name, native_name], map: "search_event")
    @@index([start_date], map: "start_date")
    @@index([tags], map: "tags")
    @@index([website], map: "website")
    @@index([wrapper], map: "wrapper")
    @@index([wrapper_small], map: "wrapper_small")
    @@index([zh_name], map: "zh_name")
}

model event_brands {
    id                Int            @id @default(autoincrement())
    brand             String         @db.VarChar(50)
    keywords          String         @db.VarChar(200)
    upcoming_events   Int?
    total_events      Int?
    follower_counts   Int?
    multiple_location Int?           @default(0) @db.TinyInt
    created           DateTime?      @default(now()) @db.DateTime(0)
    created_by        Int?
    event             event[]
    event_backup      event_backup[]
}

model event_category {
    id                                         Int       @id @default(autoincrement())
    category                                   Int
    event                                      Int
    created                                    DateTime? @default(now()) @db.Timestamp(0)
    modified                                   DateTime? @db.Timestamp(0)
    createdby                                  Int?
    modifiedby                                 Int?
    verified_on                                DateTime? @db.Timestamp(0)
    verified_by                                Int?
    category_event_category_categoryTocategory category  @relation("event_category_categoryTocategory", fields: [category], references: [id], onUpdate: Restrict, map: "fk_event_category_category1")
    event_event_category_eventToevent          event     @relation("event_category_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "fk_event_category_event1")

    @@unique([event, category], map: "event_category")
    @@index([category], map: "fk_event_category_category1")
    @@index([event], map: "fk_event_category_event1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_check {
    id            Int       @id @default(autoincrement())
    event_id      Int?
    entity_id     Int
    entity_type   Int       @default(1)
    check_date    DateTime? @db.Date
    check_by      Int?
    total_checked Int?      @default(0)
    visibility    Boolean?  @default(true)
    counter       Int       @default(0) @db.TinyInt
    priority      Int?      @db.TinyInt
    pool          Int?      @db.TinyInt
    counter_date  DateTime? @db.Date
    remark        String?   @db.VarChar(100)

    @@unique([entity_id, entity_type], map: "entity_id")
    @@index([check_date], map: "check_date")
    @@index([visibility], map: "visibility")
}

model event_communication {
    id                                Int                                 @id @default(autoincrement())
    channel                           String                              @db.VarChar(100)
    communication                     String?                             @db.VarChar(100)
    created                           DateTime                            @default(now()) @db.Timestamp(0)
    event_communication_customization event_communication_customization[]

    @@index([channel], map: "channel")
    @@index([communication], map: "communication")
}

model event_communication_customization {
    id                                                   Int                           @id @default(autoincrement())
    event                                                Int
    template_id                                          Int?
    status                                               Int
    communication_id                                     Int
    created                                              DateTime                      @default(now()) @db.Timestamp(0)
    modified                                             DateTime?                     @db.Timestamp(0)
    event_event_communication_customization_eventToevent event                         @relation("event_communication_customization_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_communication_customization_ibfk_1")
    event_communication                                  event_communication           @relation(fields: [communication_id], references: [id], onUpdate: Restrict, map: "event_communication_customization_ibfk_2")
    event_communication_template                         event_communication_template? @relation(fields: [template_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_communication_customization_ibfk_3")

    @@unique([event, communication_id], map: "event_2")
    @@index([communication_id], map: "communication_id")
    @@index([event], map: "event")
    @@index([template_id], map: "template_id")
}

model event_communication_template {
    id                                Int                                 @id @default(autoincrement())
    created                           DateTime?                           @default(now()) @db.Timestamp(0)
    modified                          DateTime?                           @db.Timestamp(0)
    event_communication_customization event_communication_customization[]
}

model event_data {
    id                                                    Int               @id @default(autoincrement())
    event                                                 Int
    event_edition                                         Int
    data_type                                             String            @db.VarChar(20)
    title                                                 String            @db.VarChar(20)
    value                                                 String?           @db.VarChar(6000)
    published                                             Boolean?          @default(false)
    created                                               DateTime?         @default(now()) @db.Timestamp(0)
    modified                                              DateTime?         @db.Timestamp(0)
    createdby                                             Int
    modifiedby                                            Int?
    event_event_data_eventToevent                         event             @relation("event_data_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "fk_event_data_event1")
    event_edition_event_data_event_editionToevent_edition event_edition     @relation("event_data_event_editionToevent_edition", fields: [event_edition], references: [id], onUpdate: Restrict, map: "fk_event_data_event_edition1")
    event_data_lang                                       event_data_lang[]

    @@unique([event, event_edition, title], map: "event")
    @@index([data_type], map: "data_type")
    @@index([event], map: "fk_event_data_event1")
    @@index([event_edition], map: "fk_event_data_event_edition1")
    @@index([published], map: "published")
    @@index([title], map: "title")
}

model event_data_bkp_2 {
    id            Int       @id @default(autoincrement())
    event         Int
    event_edition Int
    data_type     String    @db.VarChar(20)
    title         String    @db.VarChar(20)
    value         String?   @db.VarChar(6000)
    published     Boolean?  @default(false)
    created       DateTime? @default(now()) @db.Timestamp(0)
    modified      DateTime? @db.Timestamp(0)
    createdby     Int
    modifiedby    Int?

    @@unique([event, event_edition, title], map: "event")
    @@index([data_type], map: "data_type")
    @@index([event], map: "fk_event_data_event1")
    @@index([event_edition], map: "fk_event_data_event_edition1")
    @@index([published], map: "published")
    @@index([title], map: "title")
}

model event_data_lang {
    id            Int        @id @default(autoincrement())
    event_data_id Int
    value         String?    @db.VarChar(6000)
    ln            String     @db.VarChar(2)
    event_data    event_data @relation(fields: [event_data_id], references: [id], onUpdate: Restrict, map: "event_data_lang_ibfk_1")

    @@unique([event_data_id, ln], map: "event_data_id_2")
    @@index([event_data_id], map: "event_data_id")
}

model event_data_pricing {
    id            Int       @id @default(autoincrement())
    event         Int
    event_edition Int
    data_type     String    @db.VarChar(20)
    title         String    @db.VarChar(20)
    value         String?   @db.VarChar(6000)
    published     Boolean?  @default(false)
    created       DateTime? @default(now()) @db.Timestamp(0)
    modified      DateTime? @db.Timestamp(0)
    createdby     Int
    modifiedby    Int?

    @@index([data_type], map: "data_type")
    @@index([event], map: "fk_event_data_event1")
    @@index([event_edition], map: "fk_event_data_event_edition1")
    @@index([published], map: "published")
    @@index([title], map: "title")
}

model event_designation_stats {
    id                  Int       @id @default(autoincrement())
    designation_page_id Int
    event               Int
    total_user          Int?
    total_visitor       Int?
    created             DateTime? @db.DateTime(0)
    modified            DateTime? @db.DateTime(0)

    @@unique([designation_page_id, event], map: "designation")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_edition {
    id                                                         Int                 @id @default(autoincrement())
    event                                                      Int?
    city                                                       Int?
    venue                                                      Int?
    edition_number                                             Int?
    start_date                                                 DateTime?           @db.Date
    end_date                                                   DateTime?           @db.Date
    company_id                                                 Int?
    min_visit_fees                                             Float?
    max_visit_fees                                             Float?
    min_space_fees                                             Float?
    max_space_fees                                             Float?
    visitors_total                                             Int?
    exhibitors_total                                           Int?
    area_total                                                 Float?
    total_views                                                Int?
    android_views                                              Int?
    iphone_views                                               Int?
    web_views                                                  Int?
    timeline_visit_open                                        DateTime?           @db.Timestamp(0)
    timeline_visit_close                                       DateTime?           @db.Timestamp(0)
    timeline_space_open                                        DateTime?           @db.Timestamp(0)
    timeline_space_close                                       DateTime?           @db.Timestamp(0)
    timeline_space_buildup                                     DateTime?           @db.Timestamp(0)
    timeline_space_dismanting                                  DateTime?           @db.Timestamp(0)
    timeline_space_deadline                                    DateTime?           @db.Timestamp(0)
    facebook_id                                                String?             @db.VarChar(100)
    linkedin_id                                                String?             @db.VarChar(100)
    twitter_id                                                 String?             @db.VarChar(100)
    twitter_hashtag                                            String?             @db.VarChar(500)
    google_id                                                  String?             @db.VarChar(100)
    event_brite                                                String?             @db.VarChar(100)
    sales_action                                               DateTime?           @db.Timestamp(0)
    sales_action_by                                            Int?
    sales_status                                               String?             @db.VarChar(20)
    sales_remark                                               String?             @db.VarChar(50)
    created                                                    DateTime            @default(now()) @db.Timestamp(0)
    modified                                                   DateTime?           @db.Timestamp(0)
    createdby                                                  Int
    modifiedby                                                 Int?
    website                                                    String?             @db.VarChar(300)
    published                                                  Int?
    status                                                     String?             @db.Char(1)
    eep_process                                                Int?                @default(2) @db.TinyInt
    online_event                                               Int?
    edition_strength                                           Decimal?            @db.Decimal(10, 2)
    custom_flag                                                String?             @db.VarChar(10)
    communication_log                                          communication_log[]
    document_mapping                                           document_mapping[]
    event_event_event_editionToevent_edition                   event[]             @relation("event_event_editionToevent_edition")
    event_agenda                                               event_agenda[]
    event_data_event_data_event_editionToevent_edition         event_data[]        @relation("event_data_event_editionToevent_edition")
    venue_event_edition_venueTovenue                           venue?              @relation("event_edition_venueTovenue", fields: [venue], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_event_edition_venue1")
    event_exhibitor                                            event_exhibitor[]
    event_feeds                                                event_feeds[]
    event_floorplan                                            event_floorplan[]
    event_products                                             event_products[]
    event_speaker                                              event_speaker[]
    event_sponsors_event_sponsors_event_editionToevent_edition event_sponsors[]    @relation("event_sponsors_event_editionToevent_edition")
    event_ticket                                               event_ticket[]
    event_visitor                                              event_visitor[]
    faq                                                        faq[]
    user_booking                                               user_booking[]
    visitor_badge                                              visitor_badge[]
    visitor_meetings                                           visitor_meetings[]

    @@index([android_views, iphone_views, web_views], map: "android_views")
    @@index([company_id], map: "company_id")
    @@index([created], map: "created")
    @@index([edition_strength], map: "edition_strength")
    @@index([end_date], map: "end_date")
    @@index([event], map: "fk_event_edition_event1")
    @@index([venue], map: "fk_event_edition_venue1")
    @@index([start_date], map: "start_date")
    @@index([total_views], map: "total_views")
}

model event_exhibitor {
    id                                       Int               @id @default(autoincrement())
    event_id                                 Int
    edition_id                               Int
    contact_user_id                          Int?
    company_id                               Int?
    company_name                             String            @db.VarChar(100)
    website                                  String?           @db.VarChar(255)
    address                                  String?           @db.VarChar(200)
    city                                     Int?
    country                                  String?           @db.VarChar(2)
    booth                                    String?           @db.VarChar(30)
    published                                Boolean           @default(true)
    created                                  DateTime          @default(now()) @db.Timestamp(0)
    created_by                               Int
    modified                                 DateTime?         @db.Timestamp(0)
    modified_by                              Int?
    search                                   String?           @db.VarChar(1000)
    profile_score                            Int?
    logo                                     Int?
    premium_booth                            Int?
    position                                 Int?
    verified                                 Int?              @default(1) @db.TinyInt
    verified_on                              DateTime?         @db.DateTime(0)
    verified_by                              Int?
    verified1                                Int?              @default(1) @db.TinyInt
    verified1_on                             DateTime?         @default(now()) @db.DateTime(0)
    verified1_by                             Int?
    event                                    event             @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "event_exhibitor_ibfk_1")
    event_edition                            event_edition     @relation(fields: [edition_id], references: [id], onUpdate: Restrict, map: "event_exhibitor_ibfk_2")
    city_event_exhibitor_cityTocity          city?             @relation("event_exhibitor_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_exhibitor_ibfk_3")
    country_event_exhibitor_countryTocountry country?          @relation("event_exhibitor_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_exhibitor_ibfk_4")
    user_event_exhibitor_created_byTouser    user              @relation("event_exhibitor_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "event_exhibitor_ibfk_7")
    user_event_exhibitor_modified_byTouser   user?             @relation("event_exhibitor_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_exhibitor_ibfk_8")
    event_floorplan                          event_floorplan[]

    @@unique([edition_id, company_id], map: "unique_index")
    @@index([city], map: "city")
    @@index([company_id], map: "company_id")
    @@index([company_name], map: "company_name")
    @@index([contact_user_id], map: "contact_user_id")
    @@index([country], map: "country")
    @@index([created_by], map: "created_by")
    @@index([edition_id], map: "edition_id")
    @@index([modified_by], map: "event_exhibitor_ibfk_8")
    @@index([event_id], map: "event_id")
    @@index([logo], map: "logo")
    @@index([search], map: "search")
    @@index([company_name, search], map: "search_name_search")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model event_exhibitor2 {
    id              Int
    event_id        Int
    edition_id      Int
    contact_user_id Int?
    company_id      Int?
    company_name    String    @db.VarChar(100)
    website         String?   @db.VarChar(255)
    address         String?   @db.VarChar(200)
    city            Int?
    country         String?   @db.VarChar(2)
    booth           String?   @db.VarChar(30)
    published       Boolean   @default(true)
    created         DateTime  @default(now()) @db.Timestamp(0)
    created_by      Int
    modified        DateTime? @db.Timestamp(0)
    modified_by     Int?
    search          String?   @db.VarChar(1000)
    profile_score   Int?

    @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model event_exhibitor_1 {
    id              Int
    event_id        Int
    edition_id      Int
    contact_user_id Int?
    company_id      Int?
    company_name    String    @db.VarChar(100)
    website         String?   @db.VarChar(255)
    address         String?   @db.VarChar(200)
    city            Int?
    country         String?   @db.VarChar(2)
    booth           String?   @db.VarChar(30)
    published       Boolean   @default(true)
    created         DateTime  @default(now()) @db.Timestamp(0)
    created_by      Int
    modified        DateTime? @db.Timestamp(0)
    modified_by     Int?
    search          String?   @db.VarChar(1000)
    profile_score   Int?

    @@ignore
}

model event_feed_comments {
    id                                  Int            @id @default(autoincrement())
    feed_id                             Int
    user                                Int
    visitor_id                          Int?
    comment                             String         @db.VarChar(500)
    published                           Int
    created                             DateTime       @default(now()) @db.Timestamp(0)
    seen                                Int            @default(0) @db.TinyInt
    event_feeds                         event_feeds    @relation(fields: [feed_id], references: [id], onUpdate: Restrict, map: "event_feed_comments_ibfk_1")
    user_event_feed_comments_userTouser user           @relation("event_feed_comments_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "event_feed_comments_ibfk_2")
    event_visitor                       event_visitor? @relation(fields: [visitor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feed_comments_ibfk_3")

    @@unique([feed_id, visitor_id], map: "feed_id")
    @@unique([feed_id, visitor_id], map: "feed_id_2")
    @@index([feed_id], map: "feed")
    @@index([user], map: "user")
    @@index([visitor_id], map: "visitor")
}

model event_feed_comments_backup {
    id         Int      @id @default(autoincrement())
    feed_id    Int
    user       Int
    visitor_id Int?
    comment    String   @db.VarChar(500)
    published  Int
    created    DateTime @default(now()) @db.Timestamp(0)
    remarks    String   @db.VarChar(20)
}

model event_feed_likes {
    id                               Int         @id @default(autoincrement())
    feed_id                          Int
    user                             Int
    visitor_id                       Int?
    likes                            Boolean
    published                        Int?        @default(1)
    created                          DateTime    @default(now()) @db.Timestamp(0)
    seen                             Int         @default(0) @db.TinyInt
    event_feeds                      event_feeds @relation(fields: [feed_id], references: [id], onUpdate: Restrict, map: "event_feed_likes_ibfk_1")
    user_event_feed_likes_userTouser user        @relation("event_feed_likes_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "event_feed_likes_ibfk_2")

    @@unique([feed_id, visitor_id], map: "feed_id")
    @@unique([feed_id, visitor_id], map: "feed_id_2")
    @@unique([feed_id, visitor_id], map: "feed_id_3")
    @@index([feed_id], map: "feed")
    @@index([user], map: "user")
    @@index([visitor_id], map: "visitor")
}

model event_feed_likes_backup {
    id         Int      @id @default(autoincrement())
    feed_id    Int
    user       Int
    visitor_id Int?
    likes      Boolean
    published  Int?     @default(1)
    created    DateTime @default(now()) @db.Timestamp(0)
    remarks    String   @db.VarChar(20)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_feedback {
    id                                                                          Int                       @id @default(autoincrement())
    event_id                                                                    Int
    edition_id                                                                  Int?
    user_id                                                                     Int
    visitor_id                                                                  Int                       @unique(map: "visitor_id_2")
    pre_source                                                                  Int?
    pre_status                                                                  Int?
    pre_created                                                                 DateTime?                 @db.Timestamp(0)
    post_source                                                                 Int?
    post_status                                                                 Int?
    post_created                                                                DateTime?                 @db.Timestamp(0)
    rating                                                                      Int?
    comments                                                                    String?                   @db.VarChar(1000)
    media                                                                       String?                   @db.VarChar(100)
    mark_spam                                                                   Int?
    confirmed_spam                                                              String?                   @db.VarChar(30)
    ip_addr                                                                     String?                   @db.VarChar(50)
    org_reply                                                                   String?                   @db.VarChar(1000)
    org_reply_created                                                           DateTime?                 @db.Timestamp(0)
    org_reply_id                                                                Int?
    pushtoTop                                                                   DateTime?                 @db.DateTime(0)
    device                                                                      String?                   @db.VarChar(20)
    event_answer                                                                Int?
    venue_answer                                                                Int?
    organiser_answer                                                            Int?
    event_answer_notvisited                                                     Int?
    comeback                                                                    Boolean?
    modified                                                                    DateTime?                 @db.Timestamp(0)
    platform_answer                                                             Int?
    event                                                                       event                     @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "event_feedback_ibfk_1")
    user                                                                        user?                     @relation(fields: [org_reply_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_ibfk_5")
    feedback_question_event_feedback_event_answerTofeedback_question            feedback_question?        @relation("event_feedback_event_answerTofeedback_question", fields: [event_answer], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_ibfk_6")
    feedback_question_event_feedback_venue_answerTofeedback_question            feedback_question?        @relation("event_feedback_venue_answerTofeedback_question", fields: [venue_answer], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_ibfk_7")
    feedback_question_event_feedback_organiser_answerTofeedback_question        feedback_question?        @relation("event_feedback_organiser_answerTofeedback_question", fields: [organiser_answer], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_ibfk_8")
    feedback_question_event_feedback_event_answer_notvisitedTofeedback_question feedback_question?        @relation("event_feedback_event_answer_notvisitedTofeedback_question", fields: [event_answer_notvisited], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_ibfk_9")
    event_feedback_comments                                                     event_feedback_comments[]
    event_feedback_likes                                                        event_feedback_likes[]
    event_feedback_media                                                        event_feedback_media[]

    @@index([comments(length: 767)], map: "comments")
    @@index([edition_id], map: "edition_id")
    @@index([org_reply_id], map: "event_feedback_ibfk_5")
    @@index([event_answer], map: "event_feedback_ibfk_6")
    @@index([venue_answer], map: "event_feedback_ibfk_7")
    @@index([organiser_answer], map: "event_feedback_ibfk_8")
    @@index([event_answer_notvisited], map: "event_feedback_ibfk_9")
    @@index([event_id], map: "event_id")
    @@index([event_id, post_status], map: "event_status")
    @@index([mark_spam], map: "mark_spam")
    @@index([post_created], map: "post_created")
    @@index([post_status], map: "post_status")
    @@index([pushtoTop], map: "pushtoTop")
    @@index([rating], map: "rating")
    @@index([user_id], map: "user_id")
}

model event_feedback_comments {
    id                                      Int            @id @default(autoincrement())
    feedback_id                             Int
    user                                    Int
    published                               Int?           @default(1)
    comment                                 String         @db.VarChar(1000)
    from_org                                Int?           @db.TinyInt
    created                                 DateTime       @default(now()) @db.Timestamp(0)
    modified                                DateTime?      @db.Timestamp(0)
    event_feedback                          event_feedback @relation(fields: [feedback_id], references: [id], onUpdate: Restrict, map: "event_feedback_comments_ibfk_1")
    user_event_feedback_comments_userTouser user           @relation("event_feedback_comments_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "event_feedback_comments_ibfk_3")

    @@index([feedback_id], map: "feedback")
    @@index([from_org], map: "from_org")
    @@index([user], map: "user")
}

model event_feedback_likes {
    id                                            Int            @id @default(autoincrement())
    feedback_id                                   Int
    user                                          Int?
    ga_user                                       Int?
    status                                        Int
    published                                     Int            @db.TinyInt
    created                                       DateTime       @default(now()) @db.Timestamp(0)
    modified                                      DateTime?      @db.Timestamp(0)
    user_event_feedback_likes_userTouser          user?          @relation("event_feedback_likes_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_likes_ibfk_1")
    event_feedback                                event_feedback @relation(fields: [feedback_id], references: [id], onUpdate: Restrict, map: "event_feedback_likes_ibfk_2")
    ga_user_event_feedback_likes_ga_userToga_user ga_user?       @relation("event_feedback_likes_ga_userToga_user", fields: [ga_user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_likes_ibfk_3")

    @@index([feedback_id], map: "feedback")
    @@index([ga_user], map: "ga_id")
    @@index([user], map: "user")
}

model event_feedback_media {
    id                                          Int            @id @default(autoincrement())
    feedback_id                                 Int
    attachment_id                               Int
    published                                   Int?           @default(0)
    created                                     DateTime       @default(now()) @db.DateTime(0)
    created_by                                  Int
    modified                                    DateTime?      @db.DateTime(0)
    modified_by                                 Int?
    event_feedback                              event_feedback @relation(fields: [feedback_id], references: [id], onUpdate: Restrict, map: "event_feedback_media_ibfk_1")
    attachment                                  attachment     @relation(fields: [attachment_id], references: [id], onUpdate: Restrict, map: "event_feedback_media_ibfk_2")
    user_event_feedback_media_created_byTouser  user           @relation("event_feedback_media_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "event_feedback_media_ibfk_3")
    user_event_feedback_media_modified_byTouser user?          @relation("event_feedback_media_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feedback_media_ibfk_4")

    @@index([attachment_id], map: "attachment_id")
    @@index([created_by], map: "created_by")
    @@index([feedback_id, attachment_id, published, created, created_by], map: "feedback_id")
    @@index([modified_by], map: "modified_by")
}

model event_feeds {
    id                          Int                   @id @default(autoincrement())
    event                       Int?
    edition                     Int?
    group_id                    String?               @db.VarChar(500)
    user                        Int?
    social_user                 BigInt?
    source                      String?               @db.VarChar(50)
    visitor_id                  Int?
    comment                     String?               @db.VarChar(2000)
    media                       String?               @db.VarChar(5000)
    published                   Boolean?              @default(true)
    created                     DateTime              @default(now()) @db.Timestamp(0)
    modified                    DateTime?             @db.Timestamp(0)
    event_feed_comments         event_feed_comments[]
    event_feed_likes            event_feed_likes[]
    event_edition               event_edition?        @relation(fields: [edition], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feeds_ibfk_2")
    user_event_feeds_userTouser user?                 @relation("event_feeds_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feeds_ibfk_3")
    event_visitor               event_visitor?        @relation(fields: [visitor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_feeds_ibfk_4")

    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([social_user], map: "social_user")
    @@index([user], map: "user")
    @@index([visitor_id], map: "visitor")
}

model event_feeds_backup {
    id          Int       @id @default(autoincrement())
    event       Int
    edition     Int
    user        Int?
    social_user BigInt?
    source      String?   @db.VarChar(50)
    visitor_id  Int?
    comment     String?   @db.VarChar(500)
    media       String?   @db.VarChar(5000)
    published   Boolean?  @default(true)
    created     DateTime  @default(now()) @db.Timestamp(0)
    modified    DateTime? @db.Timestamp(0)
    remarks     String?   @db.VarChar(20)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_floorplan {
    id                                 Int                    @id @default(autoincrement())
    event                              Int
    edition                            Int
    floor_name                         String?                @db.VarChar(50)
    event_ticket_id                    Int?
    exhibitor_id                       Int?
    position                           String?                @db.VarChar(20)
    booth_name                         String?                @db.VarChar(50)
    size                               String?                @db.VarChar(20)
    status                             String?                @db.VarChar(20)
    published                          Int                    @default(1) @db.TinyInt
    created                            DateTime               @default(now()) @db.DateTime(0)
    modified                           DateTime?              @db.DateTime(0)
    event_event_floorplan_eventToevent event                  @relation("event_floorplan_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_floorplan_ibfk_1")
    event_edition                      event_edition          @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "event_floorplan_ibfk_2")
    event_exhibitor                    event_exhibitor?       @relation(fields: [exhibitor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_floorplan_ibfk_3")
    event_ticket                       event_ticket?          @relation(fields: [event_ticket_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_floorplan_ibfk_4")
    event_visitor_ticket               event_visitor_ticket[]

    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([event_ticket_id], map: "event_ticket_id")
    @@index([exhibitor_id], map: "exhibitor_id")
}

model event_groups_mapping {
    id       Int @id @default(autoincrement())
    event    Int
    group_id Int
}

model event_old_ranking {
    id        Int      @id @default(autoincrement())
    event_id  Int
    score     Int
    date      String   @db.VarChar(10)
    created   DateTime @default(now()) @db.Timestamp(0)
    new_score Int?
}

model event_old_ranking_2023 {
    id        Int      @id @default(autoincrement())
    event_id  Int
    new_score Int?
    date      String   @db.VarChar(10)
    created   DateTime @default(now()) @db.Timestamp(0)
}

model event_payout {
    id             Int       @id @default(autoincrement())
    event_id       Int
    payout_type    String    @db.VarChar(20)
    name           String    @db.VarChar(50)
    address        String?   @db.VarChar(400)
    country        String    @db.VarChar(65)
    country_code   String    @db.VarChar(5)
    city           String    @db.VarChar(55)
    city_code      String?   @db.VarChar(20)
    account_number String    @db.VarChar(55)
    bank_name      String    @db.VarChar(100)
    ifsc_code      String?   @db.VarChar(100)
    date_created   DateTime  @db.DateTime(0)
    date_updated   DateTime? @db.DateTime(0)
}

model event_products {
    id                                      Int           @id @default(autoincrement())
    event                                   Int
    edition                                 Int
    product                                 Int
    published                               Int           @default(1)
    created                                 DateTime      @default(now()) @db.Timestamp(0)
    createdby                               Int?
    modified                                DateTime?     @db.Timestamp(0)
    modifiedby                              Int?
    event_event_products_eventToevent       event         @relation("event_products_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_products_ibfk_1")
    event_edition                           event_edition @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "event_products_ibfk_2")
    product_event_products_productToproduct product       @relation("event_products_productToproduct", fields: [product], references: [id], onUpdate: Restrict, map: "event_products_ibfk_3")

    @@unique([event, edition, product], map: "event_edition_product")
    @@unique([event, edition, product], map: "unique_index")
    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([product], map: "product")
}

model event_questionnaire {
    id            Int      @id @default(autoincrement())
    event_id      Int
    question_id   Int
    position      Int?
    is_mandatory  Boolean  @default(false)
    published     Boolean? @default(true)
    for_exhibitor Int      @default(0)
    stage         Int      @default(0) @db.TinyInt

    @@index([event_id], map: "event_id")
    @@index([question_id], map: "question_id")
}

model event_ranking {
    id         Int      @id @default(autoincrement())
    event_id   Int
    country    String?  @db.VarChar(3)
    category   Int?
    event_rank Int
    created    DateTime @db.DateTime(0)

    @@index([category], map: "category")
    @@index([country], map: "country")
    @@index([event_id], map: "event_id")
}

model event_ranking_average {
    id         Int      @id @default(autoincrement())
    event_id   Int
    country    String?  @db.VarChar(3)
    category   Int?
    event_rank Int
    created    DateTime @default(now()) @db.Timestamp(0)
}

model event_ranking_updated {
    id         Int      @id @default(autoincrement())
    event_id   Int
    country    String?  @db.VarChar(3)
    category   Int?
    event_rank Int
    created    DateTime @default(now()) @db.Timestamp(0)
}

model event_ranking_updated_2023 {
    id         Int      @id @default(autoincrement())
    event_id   Int
    country    String?  @db.VarChar(3)
    category   Int?
    event_rank Int
    created    DateTime @default(now()) @db.Timestamp(0)
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model event_replica {
    id            Int       @default(autoincrement())
    event         Int
    edition       Int
    start_date    DateTime  @db.Date
    end_date      DateTime  @db.Date
    city          Int?
    country       String?   @db.VarChar(2)
    venue         Int?
    company       Int?
    status        String?   @db.VarChar(1)
    score         Int?
    membership    Int?
    type          Int       @db.TinyInt
    category      Int
    geo_lat       Decimal?  @db.Decimal(10, 6)
    geo_long      Decimal?  @db.Decimal(10, 6)
    published     Int       @default(1) @db.TinyInt
    event_created DateTime? @db.Timestamp(0)
    functionality String?   @db.VarChar(20)
    phy_city      Int?

    @@id([id, end_date])
    @@index([category], map: "category")
    @@index([city], map: "city")
    @@index([company], map: "company")
    @@index([category, company], map: "company_2")
    @@index([country], map: "country")
    @@index([country, published], map: "country_2")
    @@index([country, end_date, score], map: "country_3")
    @@index([country, published, category], map: "country_publish_category")
    @@index([edition], map: "edition")
    @@index([end_date], map: "end_date")
    @@index([event], map: "event")
    @@index([venue, start_date, end_date, company, published], map: "event_2")
    @@index([event, category, end_date], map: "event_3")
    @@index([geo_lat], map: "geo_lat")
    @@index([geo_long, geo_lat], map: "geo_lat_2")
    @@index([geo_long], map: "geo_long")
    @@index([geo_lat, geo_long, end_date, start_date], map: "lat-long_start_end")
    @@index([membership], map: "membership")
    @@index([published], map: "published")
    @@index([score], map: "score")
    @@index([score, country, end_date], map: "score_2")
    @@index([start_date], map: "start_date")
    @@index([end_date, start_date], map: "start_date_2")
    @@index([type], map: "type")
    @@index([venue], map: "venue")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_reverify {
    id                        Int       @id @default(autoincrement())
    event_id                  Int
    type                      Int?      @db.TinyInt
    reverify_date             DateTime  @db.Date
    reverify_processed        Int       @db.TinyInt
    qc_processed              Int       @db.TinyInt
    qc_modified               Int       @db.TinyInt
    reverify_processed_date   DateTime? @db.Timestamp(0)
    reverify_by               Int?
    review_id                 String?   @db.VarChar(11)
    parent_vendor             Int?
    escalation_processed_by   Int?
    escalation_processed_date DateTime? @db.Timestamp(0)
    escalation_comment        String?   @db.VarChar(100)
    escalation_processsed     Int       @default(0) @db.TinyInt
    qc_process_date           DateTime? @db.Timestamp(0)
    qc_by                     Int?
    screenshot                String?   @db.VarChar(1000)
    event_edition             Int?
    event                     event     @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "event_reverify_ibfk_1")
    vendor                    vendor?   @relation(fields: [reverify_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_reverify_ibfk_2")

    @@unique([event_id, reverify_date], map: "unievent_reve")
    @@index([escalation_processed_by, escalation_processed_date], map: "escalation_processed_by")
    @@index([event_id], map: "event_id")
    @@index([parent_vendor], map: "parent_vendor")
    @@index([qc_modified], map: "qc_modified")
    @@index([qc_processed], map: "qc_processed")
    @@index([reverify_by], map: "reverify_by")
    @@index([reverify_processed], map: "reverify_processed")
    @@index([reverify_processed_date, reverify_by], map: "reverify_processed_date")
    @@index([review_id], map: "review_id")
    @@index([type], map: "type")
}

model event_settings {
    id                                    Int       @id @unique(map: "id") @default(autoincrement())
    event_id                              Int       @unique(map: "event_id")
    rsvp_fol                              Boolean?  @default(false)
    rsvp_int                              Boolean?  @default(false)
    rsvp_exh                              Boolean?  @default(false)
    rsvp_spk                              Boolean?  @default(false)
    rsvp_spo                              Boolean?  @default(false)
    eapp_login                            Boolean?  @default(false)
    eapp_exh                              Boolean?  @default(false)
    eapp_spk                              Boolean?  @default(false)
    eapp_spo                              Boolean?  @default(false)
    esite_int                             Boolean?  @default(false)
    esite_exh                             Boolean?  @default(false)
    esite_spk                             Boolean?  @default(false)
    esite_spo                             Boolean?  @default(false)
    created                               DateTime  @default(now()) @db.Timestamp(0)
    created_by                            Int
    modified                              DateTime? @db.Timestamp(0)
    modified_by                           Int?
    event                                 event     @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "event_settings_ibfk_1")
    user_event_settings_created_byTouser  user      @relation("event_settings_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "event_settings_ibfk_2")
    user_event_settings_modified_byTouser user?     @relation("event_settings_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_settings_ibfk_3")

    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
}

model event_speaker {
    id                               Int                           @id @default(autoincrement())
    event                            Int
    speaker_name                     String?                       @db.VarChar(50)
    position                         Int?
    display_picture                  Int?
    edition                          Int
    user_id                          Int?
    title                            String?                       @db.VarChar(500)
    published                        Boolean                       @default(true)
    modified                         DateTime?                     @db.Timestamp(0)
    modifiedby                       Int?
    created                          DateTime                      @default(now()) @db.Timestamp(0)
    createdby                        Int
    speaker_profile                  String?                       @db.Text
    show_profile                     Boolean?                      @default(true)
    verified                         Int?                          @db.TinyInt
    verified_on                      DateTime?                     @db.Timestamp(0)
    verified_by                      Int?
    event_agenda_speaker_rating      event_agenda_speaker_rating[]
    event_event_speaker_eventToevent event                         @relation("event_speaker_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_speaker_ibfk_2")
    event_edition                    event_edition                 @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "event_speaker_ibfk_3")
    user                             user?                         @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_speaker_ibfk_4")
    speaker_event_stats              speaker_event_stats?

    @@unique([edition, user_id], map: "unique_speaker")
    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([position], map: "position")
    @@index([speaker_name, display_picture], map: "speaker_name")
    @@index([user_id], map: "user_id")
}

model event_sponsors {
    id                                                        Int            @id @default(autoincrement())
    event_id                                                  Int?
    event_edition                                             Int?
    title                                                     String?        @db.VarChar(200)
    name                                                      String?        @db.VarChar(50)
    company_id                                                Int?
    position                                                  Boolean?
    logo                                                      Int?
    published                                                 Int?           @default(1) @db.TinyInt
    created                                                   DateTime       @default(now()) @db.DateTime(0)
    createdby                                                 Int
    modified                                                  DateTime?      @db.DateTime(0)
    modifiedby                                                Int?
    verified                                                  Int?           @db.TinyInt
    verified_on                                               DateTime?      @db.Timestamp(0)
    verified_by                                               Int?
    event_edition_event_sponsors_event_editionToevent_edition event_edition? @relation("event_sponsors_event_editionToevent_edition", fields: [event_edition], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_sponsors_ibfk_1")
    event                                                     event?         @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_sponsors_ibfk_2")
    attachment                                                attachment?    @relation(fields: [logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_sponsors_ibfk_4")

    @@unique([event_edition, company_id, event_id], map: "event_edition_2")
    @@index([company_id], map: "company_id")
    @@index([event_edition], map: "event_edition")
    @@index([event_id], map: "event_id")
    @@index([logo], map: "event_sponsors_ibfk_4")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_ticket {
    id                              Int                    @id @default(autoincrement())
    event                           Int
    edition                         Int
    name                            String?                @db.VarChar(40)
    type                            String                 @db.VarChar(15)
    currency                        String?                @db.Char(3)
    price                           Float                  @default(0) @db.Float
    taxable                         String?                @db.VarChar(24)
    quantity                        Int?
    description                     String?                @db.VarChar(150)
    ticket_url                      String?                @db.VarChar(200)
    published                       Boolean                @default(true)
    created                         DateTime               @default(now()) @db.Timestamp(0)
    createdby                       Int
    modified                        DateTime?              @db.Timestamp(0)
    modifiedby                      Int?
    custom_data                     String?                @db.Text
    payment_method                  String?                @db.VarChar(25)
    reservation_price               Decimal?               @db.Decimal(10, 2)
    refundable                      Int?
    is_stall                        Int?                   @default(0) @db.TinyInt
    remaining_tickets               Int?
    area                            Decimal?               @db.Decimal(10, 6)
    unit                            String?                @db.VarChar(20)
    discount                        String?                @db.VarChar(50)
    agenda_ticket                   agenda_ticket[]
    event_floorplan                 event_floorplan[]
    event_event_ticket_eventToevent event                  @relation("event_ticket_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_ticket_ibfk_1")
    event_edition                   event_edition          @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "event_ticket_ibfk_2")
    event_visitor_ticket            event_visitor_ticket[]

    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([id], map: "id")
}

model event_ticket_gateway_setup {
    id                    Int                   @id @default(autoincrement())
    ticket_setup_id       Int
    created               DateTime              @default(now()) @db.DateTime(0)
    modified              DateTime?             @db.DateTime(0)
    published             Int                   @default(1) @db.TinyInt
    gateway_setup_id      Int
    createdby             Int
    modifiedby            Int?
    event_ticket_setup    event_ticket_setup    @relation(fields: [ticket_setup_id], references: [id], onUpdate: Restrict, map: "event_ticket_gateway_setup_ibfk_1")
    payment_gateway_setup payment_gateway_setup @relation(fields: [gateway_setup_id], references: [id], onUpdate: Restrict, map: "event_ticket_gateway_setup_ibfk_2")

    @@index([gateway_setup_id], map: "gateway_setup_id")
    @@index([ticket_setup_id], map: "ticket_setup_id")
}

model event_ticket_setup {
    id                         Int                          @id @default(autoincrement())
    event_id                   Int                          @unique(map: "event_id")
    created                    DateTime                     @default(now()) @db.DateTime(0)
    modified                   DateTime?                    @db.DateTime(0)
    published                  Int                          @default(1) @db.TinyInt
    createdby                  Int
    modifiedby                 Int?
    event_ticket_gateway_setup event_ticket_gateway_setup[]
    event                      event                        @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "event_ticket_setup_ibfk_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_tracker {
    id          Int      @id @default(autoincrement())
    modify_type String   @db.VarChar(20)
    entity_type String   @db.VarChar(20)
    entity_id   Int
    title       String   @db.VarChar(2000)
    content     String?  @db.Text
    status      String?  @db.VarChar(4)
    modified    DateTime @default(now()) @db.Timestamp(0)
    modifiedby  Int

    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([modified], map: "modified")
    @@index([modifiedby], map: "modifiedby")
    @@index([modify_type], map: "modify_type")
}

model event_type {
    id              Int      @id @default(autoincrement())
    name            String   @db.VarChar(20)
    url             String?  @db.VarChar(50)
    parent_id       String?  @db.VarChar(20)
    created         DateTime @default(now()) @db.DateTime(0)
    modified        DateTime @default(now()) @db.DateTime(0)
    published       Int?     @db.TinyInt
    listing_setting String?  @db.VarChar(20)
    event_audience  String   @db.VarChar(10)
}

model event_type_event {
    id           Int      @id @default(autoincrement())
    eventtype_id Int
    event_id     Int
    created      DateTime @default(now()) @db.DateTime(0)
    modified     DateTime @default(now()) @db.DateTime(0)
    published    Int?     @db.TinyInt
    created_by   Int?
    modified_by  Int?
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model event_update {
    id                       Int       @default(autoincrement())
    event_id                 Int?
    event_name               String?   @db.Text
    total_current_ed_visitor Int?
    total_visitor            Int?
    total_follower           Int?      @default(0)
    visitor_meta             String?   @db.VarChar(10000)
    visitor_leads            Int?      @default(0)
    total_ratings            Int?      @default(0)
    avg_ratings              Float?    @db.Float
    total_reviews            Int?      @default(0)
    review_meta              String?   @db.VarChar(10000)
    total_media              Int?
    media_meta               String?   @db.VarChar(10000)
    exhibitor_count          Int
    visitor_count            Int
    company_id               Int?
    last_visitor             DateTime  @default(now()) @db.Timestamp(0)
    last_exhibitor           DateTime  @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    total_exhibitor          Int?
    exhibitor_lead           Int       @default(0)
    exhibitor_meta           String?   @db.VarChar(10000)
    total_speakers           Int?
    speakers_meta            String?   @db.VarChar(20000)
    stats                    String?   @db.VarChar(4000)
    created                  DateTime  @default(now()) @db.Timestamp(0)
    modified                 DateTime? @db.Date
    modified_stats           String?   @db.Text
    start_date               DateTime? @db.Date
    end_date                 DateTime  @default(dbgenerated("'0000-00-00'")) @db.Date
    city_name                String?   @db.VarChar(45)
    country_name             String?   @db.VarChar(45)
    edition                  Int?
    venue                    String?   @db.VarChar(200)
    venue_id                 Int?
    city_id                  Int?
    country_id               String?   @db.Char(2)
    company_country          String?   @db.Char(2)
    category_id              String?   @db.VarChar(200)
    geo_lat                  Decimal?  @db.Decimal(10, 6)
    event_type               Int?      @db.TinyInt
    geo_long                 Decimal?  @db.Decimal(10, 6)
    published                Boolean?  @default(false)
    url                      String?   @db.VarChar(200)
    status                   String?   @db.Char(1)
    recommended_by           String?   @db.Text
    score                    Int?
    rss_modified             DateTime? @db.Timestamp(0)
    total_edition            Int
    online_event             Int?      @db.SmallInt
    concurrent_field         String    @db.VarChar(50)

    @@id([id, end_date])
    @@unique([event_id, end_date], map: "event_id")
    @@index([category_id], map: "category_id")
    @@index([city_id], map: "city_id")
    @@index([city_id, published], map: "city_published")
    @@index([company_id], map: "company_id")
    @@index([concurrent_field], map: "concurrent_field")
    @@index([country_id], map: "country_id")
    @@index([edition], map: "edition")
    @@index([end_date], map: "end_date")
    @@index([end_date, status, published], map: "end_date_2")
    @@index([event_id], map: "event_id_2")
    @@index([event_id, published, score], map: "event_score")
    @@index([event_type], map: "event_type")
    @@index([exhibitor_count], map: "exhibitor_count_2")
    @@index([last_exhibitor], map: "last_exhibitor")
    @@index([last_visitor], map: "last_visitor")
    @@index([published], map: "published")
    @@index([rss_modified], map: "rss_modified")
    @@index([rss_modified], map: "rss_modified_2")
    @@index([score], map: "score")
    @@index([start_date], map: "start_date")
    @@index([status], map: "status")
    @@index([total_current_ed_visitor], map: "total_current_ed_visitor")
    @@index([total_follower], map: "total_follower")
    @@index([total_visitor], map: "total_visitor")
    @@index([url], map: "url")
    @@index([venue_id], map: "venue_id")
    @@index([visitor_count], map: "visitor_count")
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model event_update_bkp {
    id                       Int       @default(autoincrement())
    event_id                 Int?
    event_name               String?   @db.Text
    total_current_ed_visitor Int?
    total_visitor            Int?
    visitor_meta             String?   @db.VarChar(10000)
    total_reviews            Int?
    review_meta              String?   @db.VarChar(10000)
    total_media              Int?
    media_meta               String?   @db.VarChar(10000)
    exhibitor_count          Int       @default(0)
    visitor_count            Int       @default(0)
    company_id               Int       @default(0)
    last_visitor             DateTime  @default(now()) @db.Timestamp(0)
    last_exhibitor           DateTime  @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    total_exhibitor          Int?
    exhibitor_meta           String?   @db.VarChar(10000)
    total_speakers           Int?
    speakers_meta            String?   @db.VarChar(20000)
    stats                    String?   @db.VarChar(4000)
    created                  DateTime  @default(now()) @db.Timestamp(0)
    modified                 DateTime? @db.Date
    modified_stats           String?   @db.Text
    start_date               DateTime? @db.Date
    end_date                 DateTime  @default(dbgenerated("'0000-00-00'")) @db.Date
    city_name                String?   @db.VarChar(45)
    country_name             String?   @db.VarChar(45)
    edition                  Int?
    venue                    String?   @db.VarChar(200)
    venue_id                 Int?
    city_id                  Int?
    country_id               String?   @db.Char(2)
    category_id              String?   @db.VarChar(200)
    geo_lat                  Decimal?  @db.Decimal(10, 6)
    event_type               Int?      @db.TinyInt
    geo_long                 Decimal?  @db.Decimal(10, 6)
    published                Boolean?  @default(false)
    url                      String?   @db.VarChar(200)
    status                   String?   @db.Char(1)
    recommended_by           String?   @db.Text
    score                    Int?
    rss_modified             DateTime? @db.Timestamp(0)
    total_edition            Int       @default(0)

    @@id([id, end_date])
    @@unique([event_id, end_date], map: "event_id")
    @@index([category_id], map: "category_id")
    @@index([city_id], map: "city_id")
    @@index([city_id, published], map: "city_published")
    @@index([company_id], map: "company_id")
    @@index([country_id], map: "country_id")
    @@index([edition], map: "edition")
    @@index([end_date], map: "end_date")
    @@index([event_id], map: "event_id_2")
    @@index([event_id, published, score], map: "event_score")
    @@index([event_type], map: "event_type")
    @@index([exhibitor_count], map: "exhibitor_count_2")
    @@index([last_exhibitor], map: "last_exhibitor")
    @@index([last_visitor], map: "last_visitor")
    @@index([published], map: "published")
    @@index([rss_modified], map: "rss_modified")
    @@index([score], map: "score")
    @@index([start_date], map: "start_date")
    @@index([status], map: "status")
    @@index([total_current_ed_visitor], map: "total_current_ed_visitor")
    @@index([total_visitor], map: "total_visitor")
    @@index([url], map: "url")
    @@index([venue_id], map: "venue_id")
    @@index([visitor_count], map: "visitor_count")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model event_visitor {
    id                               Int                           @id @default(autoincrement())
    event                            Int
    edition                          Int
    user                             Int?
    visitor_city                     Int?
    visitor_country                  String?                       @db.Char(2)
    visitor_designation              String?                       @db.VarChar(100)
    designation_id                   Int?
    visitor_company                  String?                       @db.VarChar(100)
    visitor_phone                    String?                       @db.VarChar(25)
    company                          Int?
    interest                         Int?                          @default(1000)
    interest_date                    DateTime?                     @db.Timestamp(0)
    is_verified                      Int?                          @default(0) @db.TinyInt
    is_mobileverified                Int?                          @default(0) @db.TinyInt
    is_complete                      Int?                          @default(0) @db.TinyInt
    completed_on                     DateTime?                     @db.Timestamp(0)
    checkin_time                     DateTime?                     @db.Timestamp(0)
    checkin_source                   String?                       @db.VarChar(50)
    search                           String?                       @db.VarChar(500)
    evisitor                         Boolean?
    published                        Boolean?                      @default(true)
    flag                             Boolean?
    created                          DateTime?                     @default(now()) @db.Timestamp(0)
    modified                         DateTime?                     @db.Timestamp(0)
    createdby                        Int
    modifiedby                       Int?
    status                           Boolean?                      @default(false)
    source                           String?                       @db.VarChar(50)
    mail                             Int?                          @default(0) @db.TinyInt
    ip_add                           String?                       @db.Char(15)
    showme                           Int?                          @default(1) @db.TinyInt
    device_detect                    String?                       @db.VarChar(200)
    autointroduce                    Boolean?                      @default(false)
    checkin                          Boolean?
    badge                            String?                       @db.VarChar(20)
    badgetype                        Int?                          @db.TinyInt
    at_location                      DateTime?                     @db.Timestamp(0)
    visitor_score                    Int?
    relevancy_score                  Float?                        @db.Float
    language                         String?                       @default("en") @db.VarChar(10)
    spam                             String?                       @db.VarChar(30)
    last_share                       DateTime?                     @db.DateTime(0)
    invite_friend                    Boolean?
    checkedin_source                 String?                       @db.VarChar(50)
    agenda_answers                   agenda_answers[]
    event_agenda_speaker_rating      event_agenda_speaker_rating[]
    event_feed_comments              event_feed_comments[]
    event_feeds                      event_feeds[]
    event_event_visitor_eventToevent event                         @relation("event_visitor_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "event_visitor_ibfk_1")
    event_edition                    event_edition                 @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "event_visitor_ibfk_2")
    pending_checkins                 pending_checkins[]
    user_booking                     user_booking[]
    visitor_badge                    visitor_badge?
    visitor_questionnaire            visitor_questionnaire[]

    @@unique([edition, user], map: "edition_user")
    @@index([at_location], map: "at_location")
    @@index([autointroduce], map: "autointroduce")
    @@index([badge], map: "badge")
    @@index([completed_on], map: "completed_on")
    @@index([created], map: "created")
    @@index([designation_id], map: "designation_id")
    @@index([device_detect], map: "device_detect")
    @@index([event, edition, published, flag], map: "event_edition_published")
    @@index([event, edition, published], map: "event_edition_published1")
    @@index([event, published, flag, completed_on, user], map: "event_published_flag_completed_user")
    @@index([event, published, flag, user], map: "event_published_showme")
    @@index([event, published, completed_on], map: "event_published_showme1")
    @@index([evisitor], map: "evisitor")
    @@index([company], map: "fk_event_visitor_company")
    @@index([edition], map: "fk_event_visitor_edition")
    @@index([event], map: "fk_event_visitor_event")
    @@index([user], map: "fk_event_visitor_user")
    @@index([interest], map: "interest")
    @@index([invite_friend], map: "invite_friend")
    @@index([ip_add], map: "ip_add")
    @@index([is_complete], map: "is_complete")
    @@index([is_verified], map: "is_verified")
    @@index([language], map: "language")
    @@index([mail], map: "mail")
    @@index([modified], map: "modified")
    @@index([showme], map: "showme")
    @@index([source], map: "source")
    @@index([status], map: "status")
    @@index([visitor_city], map: "visitor_city")
    @@index([visitor_company], map: "visitor_company")
    @@index([visitor_country], map: "visitor_country")
    @@index([visitor_designation], map: "visitor_designation")
    @@index([visitor_phone], map: "visitor_phone")
}

model event_visitor_booking {
    id              Int       @id @default(autoincrement())
    event_id        Int?
    user_id         Int?
    visitor_id      Int?
    is_verified     String?   @db.Char(5)
    item_type       String    @default("HOTL") @db.VarChar(4)
    item_id         Int?
    booking_status  String    @default("confirm") @db.Char(50)
    arrival         DateTime? @db.DateTime(0)
    departure       DateTime? @db.DateTime(0)
    booking_ref     BigInt?
    booking_details String?   @db.VarChar(500)
    created         DateTime? @db.Timestamp(0)
    modified        DateTime? @db.Timestamp(0)
    edition_id      Int?

    @@index([booking_status], map: "boobking_status")
    @@index([edition_id], map: "edition_id")
    @@index([event_id], map: "event")
    @@index([is_verified], map: "is_verified")
    @@index([item_id], map: "item")
    @@index([user_id], map: "user")
    @@index([visitor_id], map: "visitor")
}

model event_visitor_queue {
    id            Int      @id @default(autoincrement())
    ga_user       Int
    event         Int
    edition       Int
    flag          Boolean  @default(true)
    interest      Int      @default(1000)
    source        String   @default("not set") @db.VarChar(50)
    created       DateTime @default(now()) @db.Timestamp(0)
    modified      DateTime @default(now()) @db.Timestamp(0)
    ip_addr       String?  @db.Char(15)
    ip_city       String?  @db.VarChar(20)
    ip_country    String?  @db.Char(2)
    device_detect String   @db.VarChar(10)
    spam          Boolean?
    published     Boolean  @default(true)

    @@unique([ga_user, edition], map: "gauser_edition")
}

model event_visitor_ticket {
    id                  Int                  @id @default(autoincrement())
    ticket_uuid         String?              @db.VarChar(32)
    edition_id          Int
    visitor_id          Int
    ticket_id           Int
    floor_id            Int?
    order_id            Int?
    amount              Decimal              @default(0.00) @db.Decimal(10, 2)
    tax                 Decimal?             @default(0.00) @db.Decimal(10, 2)
    payment_method      String?              @db.VarChar(24)
    currency            String               @default("USD") @db.Char(3)
    created             DateTime             @default(now()) @db.DateTime(0)
    status              String?              @db.VarChar(24)
    modified            DateTime?            @db.DateTime(0)
    channel             String?              @db.VarChar(20)
    event_ticket        event_ticket         @relation(fields: [ticket_id], references: [id], onUpdate: Restrict, map: "event_visitor_ticket_ibfk_1")
    payment_gateway_txn payment_gateway_txn? @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_visitor_ticket_ibfk_2")
    event_floorplan     event_floorplan?     @relation(fields: [floor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_visitor_ticket_ibfk_3")

    @@unique([ticket_uuid, edition_id], map: "visitor_ticket_uuid")
    @@index([floor_id], map: "floor_id")
    @@index([order_id], map: "order_id")
    @@index([ticket_id], map: "ticket_id")
}

model exchangerates {
    id       Int      @id @default(autoincrement())
    currency String   @db.VarChar(255)
    INR      Float
    USD      Float
    EUR      Float
    GBP      Float
    date     DateTime @db.Date
}

model exhibitor_connects {
    id                                 Int       @id @default(autoincrement())
    user                               Int
    exhibitor                          Int
    status                             Int       @db.TinyInt
    meeting                            DateTime? @db.Timestamp(0)
    time                               DateTime? @db.Time(0)
    created                            DateTime? @default(now()) @db.Timestamp(0)
    source                             String    @db.VarChar(50)
    ip                                 String?   @db.VarChar(30)
    user_exhibitor_connects_userTouser user      @relation("exhibitor_connects_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "exhibitor_connects_ibfk_1")

    @@index([exhibitor], map: "\tfk_exhibitor_connect_exhibitor")
    @@index([user], map: "fk_exhibitor_connect_user")
}

model faq {
    id                     Int            @id @default(autoincrement())
    question_id            Int
    answer                 String?        @db.VarChar(5000)
    edition                Int?
    published              Int            @default(1) @db.TinyInt
    created                DateTime       @default(now()) @db.DateTime(0)
    modified               DateTime?      @db.DateTime(0)
    event                  Int
    source                 String?        @db.VarChar(15)
    questionnaire          questionnaire  @relation(fields: [question_id], references: [id], onUpdate: Restrict, map: "faq_ibfk_1")
    event_edition          event_edition? @relation(fields: [edition], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "faq_ibfk_2")
    event_faq_eventToevent event          @relation("faq_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "faq_ibfk_3")
    faq_likes              faq_likes[]

    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([question_id], map: "faq_ibfk_1")
}

model faq_likes {
    id                        Int       @id @default(autoincrement())
    faq_id                    Int
    user                      Int?
    ga_user                   Int?
    status                    Int       @db.TinyInt
    published                 Int       @db.TinyInt
    created                   DateTime  @default(now()) @db.DateTime(0)
    modified                  DateTime? @db.DateTime(0)
    faq                       faq       @relation(fields: [faq_id], references: [id], onUpdate: Restrict, map: "faq_likes_ibfk_1")
    user_faq_likes_userTouser user?     @relation("faq_likes_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "faq_likes_ibfk_2")

    @@index([faq_id], map: "faq_id")
    @@index([user], map: "user")
}

model faq_question {
    id       Int    @id @default(autoincrement())
    question String @db.VarChar(500)
}

model feed_tag {
    id         Int       @id @default(autoincrement())
    feed_id    Int
    tag_id     Int
    created    DateTime  @default(now()) @db.DateTime(0)
    createdby  Int
    modified   DateTime? @db.DateTime(0)
    modifiedby Int?
    published  Int       @default(1) @db.TinyInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model feedback {
    id                Int       @id @default(autoincrement())
    event_id          String    @db.VarChar(11)
    edition           String    @db.VarChar(11)
    entity_id         String    @db.VarChar(11)
    entity_type       String?   @db.Char(1)
    created           DateTime? @default(now()) @db.Timestamp(0)
    modified          DateTime? @db.Timestamp(0)
    attend_source     Int?      @db.TinyInt
    attend_status     Boolean?
    feedback          String?   @db.VarChar(140)
    attend_experience Boolean?
    published         Boolean?
}

model feedback_question {
    id                                                                       Int              @id @default(autoincrement())
    visited                                                                  Boolean
    question                                                                 String           @db.VarChar(255)
    fa_icon                                                                  String?          @db.VarChar(30)
    fa_unicode                                                               String?          @db.VarChar(100)
    question_type                                                            String           @db.VarChar(10)
    question_subtype                                                         String           @db.VarChar(10)
    published                                                                Boolean
    sequence                                                                 Int
    display_name                                                             String?          @db.VarChar(50)
    descriptive_name                                                         String?          @db.VarChar(50)
    event_feedback_event_feedback_event_answerTofeedback_question            event_feedback[] @relation("event_feedback_event_answerTofeedback_question")
    event_feedback_event_feedback_venue_answerTofeedback_question            event_feedback[] @relation("event_feedback_venue_answerTofeedback_question")
    event_feedback_event_feedback_organiser_answerTofeedback_question        event_feedback[] @relation("event_feedback_organiser_answerTofeedback_question")
    event_feedback_event_feedback_event_answer_notvisitedTofeedback_question event_feedback[] @relation("event_feedback_event_answer_notvisitedTofeedback_question")

    @@unique([visited, question_type, question_subtype, question], map: "visit_question")
}

model floor_analytics {
    id        Int      @id @default(autoincrement())
    event_id  Int
    room_id   String   @db.VarChar(50)
    timestamp DateTime @default(now()) @db.Timestamp(0)
    user_id   Int
    action    String   @db.VarChar(100)
    user      user     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "floor_analytics_ibfk_1")
    event     event    @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "floor_analytics_ibfk_2")

    @@index([action], map: "action")
    @@index([event_id], map: "event_id")
    @@index([timestamp], map: "timestamp")
    @@index([user_id], map: "user_id")
}

model floor_contacts {
    id                                    Int          @id @default(autoincrement())
    agenda_id                             Int
    user_id                               Int
    type                                  String       @db.VarChar(10)
    created                               DateTime     @default(now()) @db.Timestamp(0)
    published                             Int
    created_by                            Int
    modified                              DateTime?    @db.Timestamp(0)
    modified_by                           Int?
    event_agenda                          event_agenda @relation(fields: [agenda_id], references: [id], onUpdate: Restrict, map: "fk_agenda")
    user_floor_contacts_created_byTouser  user         @relation("floor_contacts_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "fk_createdby")
    user_floor_contacts_modified_byTouser user?        @relation("floor_contacts_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_modifiedby")
    user_floor_contacts_user_idTouser     user         @relation("floor_contacts_user_idTouser", fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_user")

    @@unique([agenda_id, user_id], map: "agenda_user_unique")
    @@index([created_by], map: "fk_createdby")
    @@index([modified_by], map: "fk_modifiedby")
    @@index([user_id], map: "fk_user")
}

model follow_page {
    id          Int      @id @default(autoincrement())
    user_id     Int?
    event_type  Int?     @default(0)
    industry_id Int?
    city        Int?
    country     String?  @db.VarChar(5)
    published   Int?     @default(1)
    created     DateTime @default(now()) @db.Timestamp(0)
}

model follow_user {
    id                                 Int       @id @default(autoincrement())
    user_id                            Int
    follower_id                        Int
    published                          Boolean
    source                             String?   @db.VarChar(100)
    device                             String?   @db.VarChar(60)
    created                            DateTime? @default(now()) @db.Timestamp(0)
    modified                           DateTime? @default(now()) @db.Timestamp(0)
    user_follow_user_user_idTouser     user      @relation("follow_user_user_idTouser", fields: [user_id], references: [id], onUpdate: Restrict, map: "follow_user_ibfk_1")
    user_follow_user_follower_idTouser user      @relation("follow_user_follower_idTouser", fields: [follower_id], references: [id], onUpdate: Restrict, map: "follow_user_ibfk_2")

    @@index([follower_id], map: "follower_id")
    @@index([user_id, follower_id], map: "user_id")
}

model freelist_data {
    id          Int       @id @default(autoincrement())
    review_type String?   @db.Char(1)
    modify_type String?   @db.Char(1)
    entity_type String    @db.VarChar(200)
    entity_id   Int?
    company_id  Int?
    venue_id    Int?
    title       String    @db.VarChar(500)
    content     String?   @db.MediumText
    added_on    DateTime  @default(now()) @db.Timestamp(0)
    added_by    Int?
    qc_by       Int?
    qc_on       DateTime? @db.Timestamp(0)
    by_user     Int?
    status      String    @default("P") @db.Char(1)
    remark      String?   @db.VarChar(4000)
    dummy_url   String?   @db.VarChar(200)
    published   Boolean   @default(true)
    venue       venue?    @relation(fields: [venue_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "freelist_data_ibfk_2")

    @@index([by_user], map: "by_user")
    @@index([company_id], map: "company_id")
    @@index([dummy_url], map: "dummy_url")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([venue_id], map: "venue_id")
}

model ga_user {
    id                                                         Int                         @id @unique(map: "id") @default(autoincrement())
    user                                                       Int?
    ga_id                                                      String?                     @db.VarChar(50)
    created                                                    DateTime                    @default(now()) @db.Timestamp(0)
    modified                                                   DateTime?                   @db.Timestamp(0)
    agenda_analytics                                           agenda_analytics[]
    agenda_analytics_feedback                                  agenda_analytics_feedback[]
    event_feedback_likes_event_feedback_likes_ga_userToga_user event_feedback_likes[]      @relation("event_feedback_likes_ga_userToga_user")
    user_ga_user_userTouser                                    user?                       @relation("ga_user_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ga_user_ibfk_1")
    notification_bell                                          notification_bell[]
    push_tracker_push_tracker_ga_userToga_user                 push_tracker[]              @relation("push_tracker_ga_userToga_user")
    user_booking_user_booking_ga_userToga_user                 user_booking[]              @relation("user_booking_ga_userToga_user")
    user_device_user_device_ga_userToga_user                   user_device[]               @relation("user_device_ga_userToga_user")
    user_notification_user_notification_ga_userToga_user       user_notification[]         @relation("user_notification_ga_userToga_user")
    venue_feedback_likes_venue_feedback_likes_ga_userToga_user venue_feedback_likes[]      @relation("venue_feedback_likes_ga_userToga_user")

    @@unique([ga_id, user], map: "ga_id")
    @@index([user], map: "user")
}

model gmt_all {
    id   String  @id @db.Char(2)
    name String? @db.VarChar(45)
    gmt  String? @db.VarChar(7)
}

model group_follow {
    id            Int       @id @default(autoincrement())
    group_id      Int
    follower_id   Int
    status        Int       @default(1)
    created       DateTime  @default(now()) @db.DateTime(0)
    unfollow_date DateTime? @db.DateTime(0)
    source        String    @db.VarChar(20)
    groups        groups    @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "group_follow_ibfk_1")
    user          user      @relation(fields: [follower_id], references: [id], onUpdate: Restrict, map: "group_follow_ibfk_2")

    @@index([follower_id], map: "follower_id")
    @@index([group_id], map: "group_id")
}

model groups {
    id                                    Int            @id @default(autoincrement())
    name                                  String         @db.VarChar(50)
    city                                  Int?
    url                                   String?        @db.VarChar(50)
    description                           String         @db.Text
    functionality                         String         @db.VarChar(10)
    company_id                            Int?
    created                               DateTime       @default(now()) @db.DateTime(0)
    created_by                            Int
    modified                              DateTime?      @db.DateTime(0)
    modified_by                           Int?
    published                             Int            @default(1)
    verified                              DateTime?      @db.DateTime(0)
    verified_by                           Int?
    country                               String?        @db.Char(2)
    logo                                  Int?
    wrapper                               Int?
    interest_type                         String         @db.VarChar(50)
    interest_image                        String?        @db.VarChar(255)
    interests                             Int
    followers                             Int?
    totalEvent                            Int?
    mapping                               Int            @db.TinyInt
    value                                 String?        @db.VarChar(2000)
    business_floor                        Int?
    group_follow                          group_follow[]
    city_groups_cityTocity                city?          @relation("groups_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "groups_city")
    company                               company?       @relation(fields: [company_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "groups_company")
    country_groups_countryTocountry       country?       @relation("groups_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "groups_country")
    attachment_groups_logoToattachment    attachment?    @relation("groups_logoToattachment", fields: [logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "groups_logo")
    attachment_groups_wrapperToattachment attachment?    @relation("groups_wrapperToattachment", fields: [wrapper], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "groups_wrapper")

    @@index([city], map: "city")
    @@index([company_id], map: "company_id")
    @@index([country], map: "groups_country")
    @@index([logo], map: "groups_logo")
    @@index([wrapper], map: "groups_wrapper")
}

model holiday {
    id              Int       @id @unique(map: "id") @default(autoincrement())
    holiday_edition Int?
    name            String?   @db.VarChar(200)
    state           String?   @db.VarChar(45)
    state_iso       String?   @db.VarChar(10)
    country         String?   @db.VarChar(5)
    description     String?   @db.VarChar(250)
    start_date      DateTime? @db.Date
    end_date        DateTime? @db.Date
    type            String?   @db.VarChar(15)
    sub_type        String?   @db.VarChar(300)
    created_on      DateTime? @db.Timestamp(0)
    modified_on     DateTime? @db.Timestamp(0)
}

model holiday_edition {
    id          Int       @id @unique(map: "id") @default(autoincrement())
    holiday_id  Int?
    start_date  DateTime? @db.Date
    end_date    DateTime? @db.Date
    created_on  DateTime? @db.Timestamp(0)
    modified_on DateTime? @db.Timestamp(0)
}

model hotel_desc {
    hotel_id        Int       @id
    hotel_name      String?   @db.VarChar(200)
    url             String?   @db.VarChar(200)
    address         String?   @db.VarChar(200)
    longitude       Float?    @db.Float
    latitude        Float?    @db.Float
    currencycode    String?   @db.VarChar(4)
    countrycode     String?   @db.VarChar(4)
    class           Int?
    city_id         Int?
    hotel_city_id   Int?
    city_url        String?   @db.VarChar(200)
    min_total_price Float?    @db.Float
    city            String?   @db.Text
    minrate         Float?    @db.Float
    photo_url       String?   @db.VarChar(200)
    photo_60        String?   @db.VarChar(200)
    membership      Int?      @default(0)
    custom_url      String?   @db.VarChar(100)
    created         DateTime? @default(now()) @db.Timestamp(0)
    published       Int       @default(1) @db.TinyInt

    @@index([city_id], map: "city_id")
    @@index([city_url], map: "city_url")
    @@index([countrycode], map: "countrycode")
    @@index([created], map: "created")
    @@index([hotel_city_id], map: "hotel_city_id")
    @@index([latitude], map: "latitude")
    @@index([longitude], map: "longitude")
    @@index([membership], map: "membership")
    @@index([minrate], map: "minrate")
}

model hotel_desc_21dec {
    hotel_id        Int       @id @db.MediumInt
    hotel_name      String?   @db.VarChar(200)
    url             String?   @db.VarChar(200)
    address         String?   @db.VarChar(200)
    longitude       Float?    @db.Float
    latitude        Float?    @db.Float
    currencycode    String?   @db.VarChar(4)
    countrycode     String?   @db.VarChar(4)
    class           Int?
    city_id         Int?
    hotel_city_id   Int?
    city_url        String?   @db.VarChar(200)
    min_total_price Float?    @db.Float
    city            String?   @db.Text
    minrate         Float?    @db.Float
    photo_url       String?   @db.VarChar(200)
    photo_60        String?   @db.VarChar(200)
    membership      Int?      @default(0)
    custom_url      String?   @db.VarChar(100)
    created         DateTime? @default(now()) @db.Timestamp(0)
    city21          city?     @relation(fields: [city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "hotel_desc_21dec_ibfk_1")

    @@index([city_id], map: "city_id")
    @@index([city_url], map: "city_url")
    @@index([countrycode], map: "countrycode")
    @@index([created], map: "created")
    @@index([hotel_city_id], map: "hotel_city_id")
    @@index([latitude], map: "latitude")
    @@index([longitude], map: "longitude")
    @@index([membership], map: "membership")
    @@index([minrate], map: "minrate")
}

model hubs_track {
    id          Int      @id @default(autoincrement())
    url         String   @db.VarChar(5000)
    content     String   @db.VarChar(5000)
    source      String   @db.VarChar(50)
    feedback_id Int?
    entity      String?  @db.VarChar(20)
    entity_id   Int?
    feed_id     Int?
    created     DateTime @default(now()) @db.Timestamp(0)
    response    String?  @db.VarChar(5000)
}

model invite {
    id                            Int      @id @default(autoincrement())
    sender_id                     Int?
    receiver_id                   Int
    entity_id                     Int?
    type                          String?  @db.VarChar(50)
    mail                          Int      @default(0) @db.TinyInt
    source                        String?  @db.VarChar(50)
    published                     Int      @default(1)
    created                       DateTime @default(now()) @db.Timestamp(0)
    ga_user                       String?  @db.VarChar(100)
    user_invite_sender_idTouser   user?    @relation("invite_sender_idTouser", fields: [sender_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "invite_ibfk_1")
    user_invite_receiver_idTouser user     @relation("invite_receiver_idTouser", fields: [receiver_id], references: [id], onUpdate: Restrict, map: "invite_ibfk_2")

    @@index([entity_id], map: "entity_id")
    @@index([receiver_id], map: "receiver_id")
    @@index([sender_id], map: "sender_id")
    @@index([source], map: "source")
    @@index([type], map: "type")
}

model ip_country {
    id           Int      @id @default(autoincrement())
    ip_from      String   @db.Text
    ip_to        String   @db.Text
    ip_int_from  BigInt
    ip_int_to    BigInt
    country_iso  String   @db.Char(2)
    country_name String   @db.VarChar(60)
    created      DateTime @default(now()) @db.Timestamp(0)
    country      country  @relation(fields: [country_iso], references: [id], onUpdate: Restrict, map: "ip_country_ibfk_1")

    @@index([country_iso], map: "country_iso")
    @@index([ip_int_from, ip_int_to], map: "ip_int_from_to")
}

model ip_location {
    id                Int      @id @default(autoincrement())
    user_id           Int?
    ip_address        String?  @db.VarChar(50)
    country_maxmind   String?  @db.VarChar(11)
    city_name_maxmind String?  @db.VarChar(50)
    city_id           Int?
    city_user         Int?
    city_name_user    String?  @db.VarChar(50)
    country_user      String?  @db.VarChar(11)
    created           DateTime @default(now()) @db.Timestamp(0)
    cloud             Boolean  @default(false)
}

model json_cache {
    tweet_id   BigInt   @db.UnsignedBigInt
    cache_id   Int      @id @default(autoincrement()) @db.UnsignedInt
    cache_date DateTime @default(now()) @db.Timestamp(0)
    raw_tweet  String   @db.Text

    @@index([cache_date], map: "cache_date")
    @@index([tweet_id], map: "tweet_id")
}

model leads {
    id                               Int          @id @default(autoincrement())
    user_id                          Int?
    company_id                       Int?
    event_id                         Int?
    source                           leads_source
    date                             DateTime?    @default(now()) @db.Timestamp(0)
    details                          String?      @db.VarChar(4000)
    level                            Int?
    status                           Boolean?
    account_manager                  Int?
    lead_assigned_on                 DateTime?    @db.Timestamp(0)
    not_qualified_on                 DateTime?    @db.Timestamp(0)
    lost_time                        DateTime?    @db.Timestamp(0)
    won_time                         DateTime?    @db.Timestamp(0)
    type                             String?      @db.VarChar(50)
    user_leads_user_idTouser         user?        @relation("leads_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "leads_ibfk_1")
    event                            event?       @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "leads_ibfk_3")
    user_leads_account_managerTouser user?        @relation("leads_account_managerTouser", fields: [account_manager], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "leads_ibfk_4")

    @@index([company_id], map: "company_id")
    @@index([user_id], map: "leads_ibfk_1")
    @@index([event_id], map: "leads_ibfk_3")
    @@index([account_manager], map: "leads_ibfk_4")
}

model leads_push {
    id                            Int       @id @default(autoincrement())
    event                         Int       @unique(map: "event")
    url                           String    @db.VarChar(300)
    fixed_fields                  String?   @db.VarChar(500)
    custom_fields                 String?   @db.VarChar(500)
    published                     Boolean   @default(false)
    last_run                      DateTime? @db.Timestamp(0)
    created                       DateTime  @default(now()) @db.Timestamp(0)
    modified                      DateTime? @db.Timestamp(0)
    event_leads_push_eventToevent event     @relation("leads_push_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "leads_push_ibfk_1")
}

model listing_combo {
    id                                     Int       @id @default(autoincrement())
    entity_type                            Int       @db.TinyInt
    category                               Int?      @db.MediumInt
    country                                String?   @db.Char(2)
    city                                   Int?
    total_event                            Int?
    up_event                               Int?
    near_event                             Int?
    follow_count                           Int?      @default(0)
    month_1                                Int?      @default(0) @db.MediumInt
    month_2                                Int?      @default(0) @db.SmallInt
    month_3                                Int?      @default(0) @db.MediumInt
    month_4                                Int?      @default(0) @db.MediumInt
    month_5                                Int?      @default(0) @db.MediumInt
    month_6                                Int?      @default(0) @db.MediumInt
    month_7                                Int?      @default(0) @db.MediumInt
    month_8                                Int?      @default(0) @db.MediumInt
    month_9                                Int?      @default(0) @db.MediumInt
    month_10                               Int?      @default(0) @db.MediumInt
    month_11                               Int?      @default(0) @db.MediumInt
    month_12                               Int?      @default(0) @db.MediumInt
    modified                               DateTime? @default(now()) @db.Timestamp(0)
    published                              Int?      @db.TinyInt
    canonical                              String?   @db.VarChar(200)
    title                                  String?   @db.VarChar(1000)
    display                                String?   @db.VarChar(1000)
    url                                    String?   @db.VarChar(1000)
    priority                               Int?
    group_list                             String?   @db.VarChar(20000)
    zh_published                           Boolean?  @default(false)
    area_values                            Int?
    event_audience                         String?   @db.VarChar(10)
    total_event_b2c                        Int?
    up_event_b2c                           Int?
    near_event_b2c                         Int?
    pre_combo_id                           Int?
    country_listing_combo_countryTocountry country?  @relation("listing_combo_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "listing_combo_ibfk_1")
    city_listing_combo_cityTocity          city?     @relation("listing_combo_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "listing_combo_ibfk_2")

    @@unique([entity_type, category, country, city], map: "entity_type_2")
    @@index([month_1], map: "1")
    @@index([month_10], map: "10")
    @@index([month_11], map: "11")
    @@index([month_12], map: "12")
    @@index([month_2], map: "2")
    @@index([month_3], map: "3")
    @@index([month_4], map: "4")
    @@index([month_5], map: "5")
    @@index([month_6], map: "6")
    @@index([month_7], map: "7")
    @@index([month_8], map: "8")
    @@index([month_9], map: "9")
    @@index([category], map: "category")
    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([entity_type], map: "entity_type")
    @@index([entity_type, country, city], map: "entity_type_3")
    @@index([follow_count], map: "follow_count")
    @@index([near_event], map: "near_event")
    @@index([total_event], map: "total_event")
    @@index([up_event], map: "up_event")
}

model listing_follow_page {
    id                                           Int       @id @default(autoincrement())
    user_id                                      Int
    event_type                                   Int?
    industry_id                                  Int?
    city                                         Int?
    country                                      String?   @db.Char(2)
    combo_id                                     Int?
    published                                    Boolean?  @default(true)
    created                                      DateTime? @default(now()) @db.Timestamp(0)
    source                                       String?   @db.VarChar(100)
    user                                         user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "listing_follow_page_ibfk_1")
    category                                     category? @relation(fields: [industry_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "listing_follow_page_ibfk_2")
    city_listing_follow_page_cityTocity          city?     @relation("listing_follow_page_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "listing_follow_page_ibfk_3")
    country_listing_follow_page_countryTocountry country?  @relation("listing_follow_page_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "listing_follow_page_ibfk_4")

    @@index([city], map: "city")
    @@index([combo_id], map: "combo_id")
    @@index([country], map: "country")
    @@index([industry_id], map: "industry_id")
    @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model listingsitedata {
    id                   Int      @id @default(autoincrement())
    listing_site_parsing Int
    created              DateTime @db.Date
    event_name           String   @db.VarChar(200)
    event_start_date     DateTime @db.Date
    event_end_date       DateTime @db.Date
    venue_name           String?  @db.VarChar(200)
    venue_city           String   @db.VarChar(200)
    venue_country        String   @db.VarChar(200)
    event_website        String?  @db.VarChar(200)
    organizer_name       String   @db.VarChar(200)
    organizer_website    String?  @db.VarChar(200)
    contact_email        String?  @db.VarChar(200)
    contact_phone        String?  @db.VarChar(200)
    event_type           String?  @db.Char(1)
    event_bucket         String?  @db.Char(1)
    status               String?  @db.Char(2)
    remark               String?  @db.VarChar(200)
    review_id            Int?

    @@index([listing_site_parsing], map: "listing_site_parsing")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model listingsiteparsing {
    id               Int       @id @default(autoincrement())
    listing_site_url String    @unique(map: "listing_site_url") @db.VarChar(200)
    tentimes_url     String?   @db.VarChar(200)
    last_checked     DateTime? @db.DateTime(0)
    error_flag       Boolean   @default(false)
    listing_domain   String    @db.VarChar(50)
    parse_error      Boolean   @default(false)
    event_id         Int?
    server_response  Int       @db.TinyInt
    next_check       DateTime? @db.DateTime(0)

    @@unique([listing_domain, tentimes_url], map: "10times_url_listing_domain")
    @@index([tentimes_url], map: "10times_url")
    @@index([error_flag], map: "error_flag")
    @@index([last_checked], map: "last_checked")
}

model log_info {
    id            Int       @id @default(autoincrement())
    log_type      String?   @db.VarChar(50)
    date          DateTime? @db.Date
    total_request Int?      @default(0)
    total_time    Int?      @default(0)
    avg_time      Float?    @default(0) @db.Float
}

model login_info {
    id          Int       @id @default(autoincrement())
    user        Int
    session_id  String    @db.VarChar(100)
    ip_address  String    @db.VarChar(100)
    login_time  DateTime  @default(now()) @db.Timestamp(0)
    logout_time DateTime? @db.Timestamp(0)
    source      String?   @default("direct") @db.VarChar(30)

    @@index([login_time], map: "login_time")
    @@index([logout_time], map: "logout_time")
    @@index([user], map: "user")
}

model mailhistory {
    id        Int       @id @default(autoincrement())
    mail_type Int?
    mail_date DateTime? @db.DateTime(0)
    eventid   Int?
    contactid Int?

    @@index([contactid], map: "contactid")
    @@index([eventid], map: "eventid")
    @@index([mail_date], map: "mail_date")
}

model marketing_credits {
    id                                Int              @id @default(autoincrement())
    company_id                        Int
    credits                           Float            @db.Float
    created                           DateTime         @default(now()) @db.Timestamp(0)
    redemption_details                String?          @db.VarChar(5000)
    scheduled                         DateTime?        @db.Timestamp(0)
    user                              Int?
    transaction_type                  String?          @db.VarChar(100)
    reference_id                      Int?
    published                         Int              @default(1) @db.TinyInt
    user_marketing_credits_userTouser user?            @relation("marketing_credits_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "redeem_user_fk")
    webinar_ledger                    webinar_ledger[]

    @@index([user], map: "redeem_user_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model match_making {
    id                Int      @id @default(autoincrement())
    event             Int      @unique(map: "event")
    type              String?  @db.VarChar(200)
    matched_user      Int?     @default(0)
    location_match    Boolean? @default(false)
    designation_match Boolean? @default(false)
    filter            Boolean? @default(false)
}

model merging_batch_process {
    id           Int      @id @default(autoincrement())
    entity_type  String   @db.VarChar(15)
    duplicate_id Int
    original_id  Int
    status       String   @db.VarChar(20)
    created      DateTime @db.DateTime(0)
    created_by   Int
    payload      String?  @db.VarChar(2000)
}

model messages {
    id         Int       @id @default(autoincrement())
    connect_id Int       @default(-1)
    sender     Int
    receiver   Int
    message    String?   @db.Text
    created    DateTime  @default(now()) @db.Timestamp(0)
    modified   DateTime? @db.DateTime(0)
    published  Boolean   @default(false)
    event      Int?

    @@index([event], map: "event")
    @@index([receiver], map: "receiver")
    @@index([sender], map: "sender")
}

model migrations {
    id        BigInt @id @default(autoincrement()) @db.UnsignedBigInt
    version   String @db.VarChar(255)
    class     String @db.VarChar(255)
    group     String @db.VarChar(255)
    namespace String @db.VarChar(255)
    time      Int
    batch     Int    @db.UnsignedInt
}

model month {
    id  Int    @id @default(autoincrement())
    no  Int
    url String @db.VarChar(20)

    @@index([no], map: "no")
}

model notification {
    id        Int      @id @default(autoincrement())
    user_id   Int
    entity_id Int
    message   String   @db.VarChar(200)
    type      Int      @db.TinyInt
    rea       Int      @db.TinyInt
    mode      String   @db.VarChar(20)
    created   DateTime @default(now()) @db.Timestamp(0)
}

model notification_bell {
    id                                                  Int         @id @default(autoincrement())
    gauser                                              Int
    description                                         String      @db.VarChar(150)
    attachment                                          Int?
    seen                                                Int         @default(0) @db.TinyInt
    published                                           Int         @default(1) @db.TinyInt
    created                                             DateTime    @default(now()) @db.DateTime(0)
    modified                                            DateTime?   @db.DateTime(0)
    ga_user                                             ga_user     @relation(fields: [gauser], references: [id], onUpdate: Restrict, map: "notification_bell_ibfk_1")
    attachment_notification_bell_attachmentToattachment attachment? @relation("notification_bell_attachmentToattachment", fields: [attachment], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "notification_bell_ibfk_2")

    @@index([attachment], map: "attachment")
    @@index([gauser], map: "gauser")
}

model organizer_follow {
    id          Int       @id @default(autoincrement())
    entity_id   Int
    follower_id Int
    source      String?   @db.VarChar(30)
    device      String?   @db.VarChar(10)
    published   Boolean?  @default(true)
    created     DateTime? @default(now()) @db.Timestamp(0)
    user        user      @relation(fields: [follower_id], references: [id], onUpdate: Restrict, map: "organizer_follow_ibfk_2")

    @@unique([entity_id, follower_id], map: "entity_follower_id")
    @@index([entity_id], map: "entity_id")
    @@index([follower_id], map: "follower_id")
}

model page_cache {
    id               Int      @id @default(autoincrement())
    page_type        String   @db.VarChar(20)
    page_id          Int
    cache_version    Int      @default(0)
    cache_version_ts DateTime @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    cache_expire_ts  DateTime @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    last_cache_ttl   Int      @default(0)
    avg_cache_ttl    Int      @default(0)
    priority         Int      @default(100)
    update_version   Int      @default(0)
    update_ts        DateTime @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    url              String?  @db.VarChar(200)

    @@unique([page_type, page_id], map: "index_1")
    @@index([cache_version_ts], map: "cache_version_ts")
    @@index([priority, cache_expire_ts], map: "index_2")
}

model payment_gateway {
    id                    Int                     @id @default(autoincrement())
    name                  String                  @db.VarChar(200)
    created               DateTime                @default(now()) @db.DateTime(0)
    modified              DateTime?               @db.DateTime(0)
    published             Int                     @default(1) @db.TinyInt
    logo                  Int?
    payment_gateway_setup payment_gateway_setup[]
}

model payment_gateway_setup {
    id                         Int                          @id @default(autoincrement())
    name                       String                       @db.VarChar(200)
    created                    DateTime                     @default(now()) @db.DateTime(0)
    modified                   DateTime?                    @db.DateTime(0)
    published                  Int                          @default(1) @db.TinyInt
    createdby                  Int
    modifiedby                 Int?
    payment_gateway_id         Int
    inputs                     String?                      @db.Text
    company_id                 Int
    event_ticket_gateway_setup event_ticket_gateway_setup[]
    payment_gateway            payment_gateway              @relation(fields: [payment_gateway_id], references: [id], onUpdate: Restrict, map: "payment_gateway_setup_ibfk_1")
    company                    company                      @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "payment_gateway_setup_ibfk_2")

    @@unique([payment_gateway_id, company_id], map: "payment_gateway_id_2")
    @@index([company_id], map: "company_id")
    @@index([payment_gateway_id], map: "payment_gateway_id")
}

model payment_gateway_txn {
    id                   Int                    @id @default(autoincrement())
    order_type           String                 @db.VarChar(11)
    order_refid          String                 @db.VarChar(255)
    amount               Decimal                @db.Decimal(10, 2)
    currency             String                 @db.Char(3)
    gateway              String                 @db.VarChar(20)
    gateway_txn_id       String                 @unique(map: "gateway_txn_id") @db.VarChar(255)
    gateway_profile_id   String?                @unique(map: "gateway_profile_id") @db.VarChar(255)
    payment_status       String                 @db.VarChar(24)
    created              DateTime               @default(now()) @db.DateTime(0)
    modified             DateTime?              @db.DateTime(0)
    gateway_response     String                 @db.LongText
    event_visitor_ticket event_visitor_ticket[]
}

model payment_transaction {
    id                Int       @id @default(autoincrement())
    visitor_id        Int
    amount            Float?    @db.Float
    total_amount      Float?    @db.Float
    currency          String?   @db.VarChar(45)
    charges           String?   @db.LongText
    mode              String?   @db.VarChar(45)
    mode_number       BigInt?
    txn_id            String?   @db.VarChar(255)
    status            String?   @db.VarChar(45)
    coupon_number     String?   @db.VarChar(255)
    payment_date      DateTime? @db.DateTime(0)
    created           DateTime? @db.DateTime(0)
    modified          DateTime? @db.DateTime(0)
    ex_amount         Float?    @db.Float
    ex_total_amount   Float?    @db.Float
    ex_charges_amount Float?    @db.Float
    charges_amount    Float?    @db.Float
    ex_currency       String?   @db.VarChar(45)
    provider_amount   Decimal?  @db.Decimal(10, 0)
}

model pending_checkins {
    id            Int            @id @default(autoincrement())
    session_id    String         @db.VarChar(50)
    user_id       Int
    company_id    Int
    event_id      Int
    visitor_id    Int?
    created       DateTime       @default(now()) @db.Timestamp(0)
    lastping      DateTime       @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    timespent     Int
    status        Int
    ip_address    String?        @db.VarChar(20)
    company       company        @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "fk_company")
    event         event          @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "fk_event")
    user          user           @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_pen_user")
    event_visitor event_visitor? @relation(fields: [visitor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_visitor")

    @@index([company_id], map: "fk_company")
    @@index([event_id], map: "fk_event")
    @@index([user_id], map: "fk_pen_user")
    @@index([visitor_id], map: "fk_visitor")
}

model pipedrive {
    id                    Int       @id @default(autoincrement())
    company               Int
    user                  Int
    prospect_score        Float?    @db.Float
    pd_deal_id            Int?
    pd_deal_status        String?   @db.VarChar(200)
    pd_deal_last_activity DateTime? @db.DateTime(0)
    created               DateTime  @default(now()) @db.DateTime(0)
    modified              DateTime? @db.DateTime(0)
    published             Int       @default(1) @db.TinyInt
    odash_last_login      DateTime? @db.DateTime(0)
    activityCount         String?   @db.VarChar(255)

    @@unique([company, user], map: "company")
}

model poll {
    id           Int            @id @default(autoincrement())
    name         String         @db.VarChar(200)
    created      DateTime       @db.DateTime(0)
    created_by   Int
    modified     DateTime?      @db.Timestamp(0)
    modified_by  Int?
    start        DateTime       @db.DateTime(0)
    end          DateTime       @db.DateTime(0)
    published    Int
    entity_id    Int
    entity_type  String         @db.VarChar(15)
    show_result  Int            @default(1)
    source       String?        @db.VarChar(15)
    poll_mapping poll_mapping[]
}

model poll_answer {
    id              Int          @id @default(autoincrement())
    poll_mapping_id Int
    user_id         Int
    answer          String       @db.VarChar(100)
    created         DateTime     @db.DateTime(0)
    published       Int
    poll_mapping    poll_mapping @relation(fields: [poll_mapping_id], references: [id], onUpdate: Restrict, map: "poll_mapping_id")

    @@index([poll_mapping_id], map: "poll_mapping_id")
}

model poll_mapping {
    id                Int           @id @default(autoincrement())
    poll_id           Int
    question          String        @db.VarChar(60)
    question_type     String        @db.VarChar(20)
    question_option   String?       @db.VarChar(400)
    question_position Int
    published         Int
    created           DateTime      @db.DateTime(0)
    created_by        Int
    modified          DateTime?     @db.DateTime(0)
    modified_by       Int?
    poll_answer       poll_answer[]
    poll              poll          @relation(fields: [poll_id], references: [id], onUpdate: Restrict, map: "poll_id")

    @@index([poll_id], map: "poll_id")
}

model post_event_survey {
    ID          Int      @id @default(autoincrement())
    event_id    Int
    email_id    String   @db.VarChar(200)
    badge_no    String   @db.VarChar(20)
    response    Int      @default(0) @db.TinyInt
    source      String?  @db.VarChar(50)
    comment     String?  @db.VarChar(500)
    modified_on DateTime @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_review {
    id                 Int         @id @default(autoincrement())
    review_type        String?     @db.Char(1)
    modify_type        String?     @db.Char(1)
    title              String      @db.VarChar(2000)
    content_approved   String?     @db.MediumText
    entity_type        String?     @db.VarChar(20)
    entity_id          Int?
    company_id         Int?
    venue_id           Int?
    review_id          Int?
    added_by           Int?
    added_on           DateTime?   @db.Timestamp(0)
    qc_by              Int?
    qc_on              DateTime?   @default(now()) @db.Timestamp(0)
    by_user            Int?
    pay_status         Boolean?    @default(false)
    paid_on            DateTime?   @db.Timestamp(0)
    pay_amount         Float?
    remark             String?     @db.VarChar(4000)
    inhouse_qc         Int?        @default(0)
    inhouse_qc_comment String?     @db.VarChar(15)
    qc_modified        Int?
    post_status        String?     @default("A") @db.Char(1)
    screenshot         String?     @db.VarChar(200)
    score              Int?
    city               Int?
    country            String?     @db.VarChar(2)
    system_verified    Boolean?    @default(false)
    start_date         DateTime?   @db.Date
    end_date           DateTime?   @db.Date
    website            String?     @db.VarChar(300)
    functionality      String?     @db.VarChar(20)
    entity_name        String?     @db.VarChar(200)
    online_event       Int?
    event_audience     String?     @db.VarChar(20)
    pre_review         pre_review? @relation(fields: [review_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "post_review_ibfk_1")
    venue              venue?      @relation(fields: [venue_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "post_review_ibfk_3")

    @@index([added_by], map: "added_by")
    @@index([added_on], map: "added_on")
    @@index([company_id, venue_id], map: "company_id")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([inhouse_qc], map: "inhouse_qc")
    @@index([modify_type], map: "modify_type")
    @@index([qc_by], map: "qc_by")
    @@index([qc_modified], map: "qc_modified")
    @@index([qc_on], map: "qc_on")
    @@index([review_id], map: "review_id")
    @@index([review_type], map: "review_type")
    @@index([score], map: "score")
    @@index([venue_id], map: "venue_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_review_archive {
    id                 Int       @id @default(autoincrement())
    review_type        String?   @db.Char(1)
    modify_type        String?   @db.Char(1)
    title              String    @db.VarChar(2000)
    content_approved   String?   @db.MediumText
    entity_type        String?   @db.VarChar(20)
    entity_id          Int?
    company_id         Int?
    venue_id           Int?
    review_id          Int?
    added_by           Int?
    added_on           DateTime? @db.Timestamp(0)
    qc_by              Int?
    qc_on              DateTime? @default(now()) @db.Timestamp(0)
    by_user            Int?
    pay_status         Boolean?  @default(false)
    paid_on            DateTime? @db.Timestamp(0)
    pay_amount         Float?
    remark             String?   @db.VarChar(4000)
    inhouse_qc         Int?      @default(0)
    inhouse_qc_comment String?   @db.VarChar(15)
    qc_modified        Int?
    post_status        String?   @default("A") @db.VarChar(1)
    screenshot         String?   @db.VarChar(200)
    score              Int?
    city               Int?
    country            String?   @db.VarChar(2)
    system_verified    Boolean?  @default(false)
    start_date         DateTime? @db.Date
    end_date           DateTime? @db.Date
    website            String?   @db.VarChar(300)
    functionality      String?   @db.VarChar(20)
    entity_name        String?   @db.VarChar(200)
    online_event       Int?
    event_audience     String?   @db.VarChar(20)

    @@index([added_by], map: "added_by")
    @@index([added_on], map: "added_on")
    @@index([company_id], map: "company_id")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([inhouse_qc, qc_modified], map: "inhouse_qc")
    @@index([modify_type], map: "modify_type")
    @@index([post_status], map: "post_status")
    @@index([qc_by], map: "qc_by")
    @@index([qc_on], map: "qc_on")
    @@index([review_id], map: "review_id")
    @@index([review_type], map: "review_type")
    @@index([score], map: "score")
    @@index([venue_id], map: "venue_id")
}

model pre_listing_combo {
    id                    Int       @id @default(autoincrement())
    entity_type           Int       @default(0) @db.TinyInt
    category              Int?      @db.MediumInt
    country               String?   @db.Char(2)
    city                  Int?
    total_event           Int?
    up_event              Int?
    near_event            Int?
    follow_count          Int?      @default(0)
    month_1               Int?      @default(0) @db.MediumInt
    month_2               Int?      @default(0) @db.SmallInt
    month_3               Int?      @default(0) @db.MediumInt
    month_4               Int?      @default(0) @db.MediumInt
    month_5               Int?      @default(0) @db.MediumInt
    month_6               Int?      @default(0) @db.MediumInt
    month_7               Int?      @default(0) @db.MediumInt
    month_8               Int?      @default(0) @db.MediumInt
    month_9               Int?      @default(0) @db.MediumInt
    month_10              Int?      @default(0) @db.MediumInt
    month_11              Int?      @default(0) @db.MediumInt
    month_12              Int?      @default(0) @db.MediumInt
    modified              DateTime? @default(now()) @db.Timestamp(0)
    published             Int?      @db.TinyInt
    canonical             String?   @db.VarChar(200)
    title                 String?   @db.VarChar(1000)
    display               String?   @db.VarChar(1000)
    url                   String?   @db.VarChar(1000)
    priority              Int?
    group_list            String?   @db.VarChar(20000)
    zh_published          Boolean?  @default(false)
    area_values           Int?
    lc_push               DateTime? @db.Date
    qualification_rule    Int?
    disqualification_rule Int?
    event_audience        String?   @db.VarChar(10)

    @@index([area_values], map: "area_values")
    @@index([category], map: "category")
    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([disqualification_rule], map: "disqualification_rule")
    @@index([entity_type], map: "entity_type")
    @@index([event_audience], map: "event_audience")
    @@index([lc_push], map: "lc_push")
    @@index([modified], map: "modified")
    @@index([qualification_rule], map: "qualification_rule")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model pre_review {
    id                 Int           @id @default(autoincrement())
    review_type        String?       @db.Char(1)
    modify_type        String?       @db.Char(1)
    entity_type        String        @db.VarChar(20)
    entity_id          Int?
    company_id         Int?
    venue_id           Int?
    title              String        @db.VarChar(500)
    content            String?       @db.MediumText
    added_on           DateTime?     @default(now()) @db.Timestamp(0)
    added_by           Int?
    qc_by              Int?
    qc_on              DateTime?     @db.Timestamp(0)
    by_user            Int?
    status             String?       @default("P") @db.Char(2)
    remark             String?       @db.VarChar(4000)
    inhouse_qc         Int?          @default(0)
    inhouse_qc_comment String?       @db.VarChar(15)
    score              Int?
    city               Int?
    country            String?       @db.VarChar(2)
    system_verified    Boolean?      @default(false)
    start_date         DateTime?     @db.Date
    end_date           DateTime?     @db.Date
    website            String?       @db.VarChar(300)
    functionality      String?       @db.VarChar(20)
    entity_name        String?       @db.VarChar(200)
    online_event       Int?
    event_audience     String?       @db.VarChar(20)
    post_review        post_review[]
    venue              venue?        @relation(fields: [venue_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "pre_review_ibfk_2")

    @@index([added_by], map: "added_by")
    @@index([added_on], map: "added_on")
    @@index([company_id, venue_id], map: "company_id")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([inhouse_qc], map: "inhouse_qc")
    @@index([modify_type], map: "modify_type")
    @@index([qc_by], map: "qc_by")
    @@index([qc_on], map: "qc_on")
    @@index([review_type], map: "review_type")
    @@index([score], map: "score")
    @@index([status], map: "status")
    @@index([venue_id], map: "venue_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model pre_review_archive {
    id                 Int       @id @default(autoincrement())
    review_type        String?   @db.Char(1)
    modify_type        String?   @db.Char(1)
    entity_type        String    @db.VarChar(20)
    entity_id          Int?
    venue_id           Int?
    company_id         Int?
    title              String    @db.VarChar(500)
    content            String?   @db.MediumText
    added_on           DateTime? @default(now()) @db.Timestamp(0)
    added_by           Int?
    qc_by              Int?
    qc_on              DateTime? @db.Timestamp(0)
    by_user            Int?
    status             String?   @default("P") @db.Char(1)
    remark             String?   @db.VarChar(4000)
    inhouse_qc         Int?      @default(0)
    inhouse_qc_comment String?   @db.VarChar(15)
    score              Int?
    city               Int?
    country            String?   @db.VarChar(2)
    system_verified    Boolean?  @default(false)
    start_date         DateTime? @db.Date
    website            String?   @db.VarChar(300)
    end_date           DateTime? @db.Date
    functionality      String?   @db.VarChar(20)
    entity_name        String?   @db.VarChar(200)
    online_event       Int?
    event_audience     String?   @db.VarChar(20)

    @@index([added_by], map: "added_by")
    @@index([added_on], map: "added_on")
    @@index([company_id], map: "company_id")
    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([inhouse_qc], map: "inhouse_qc")
    @@index([modify_type], map: "modify_type")
    @@index([qc_by], map: "qc_by")
    @@index([qc_on], map: "qc_on")
    @@index([review_type], map: "review_type")
    @@index([score], map: "score")
    @@index([status], map: "status")
    @@index([venue_id, company_id], map: "venue_id")
    @@index([venue_id], map: "venue_id_2")
}

model product {
    id                                               Int               @id @default(autoincrement())
    name                                             String            @unique(map: "name_2") @db.VarChar(500)
    product_image                                    Int?
    category                                         Int?
    product_pic                                      Int?
    created                                          DateTime?         @default(now()) @db.Timestamp(0)
    created_by                                       Int?
    modified                                         DateTime?         @db.Timestamp(0)
    modified_by                                      Int?
    verified_by                                      Int?
    verified_on                                      DateTime?         @db.Timestamp(0)
    is_verified                                      Int?              @db.TinyInt
    parent_id                                        Int?
    published                                        Int               @default(1) @db.TinyInt
    company_product_company_product_productToproduct company_product[] @relation("company_product_productToproduct")
    event_products_event_products_productToproduct   event_products[]  @relation("event_products_productToproduct")
    category_product_categoryTocategory              category?         @relation("product_categoryTocategory", fields: [category], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "product_ibfk_1")
    attachment                                       attachment?       @relation(fields: [product_pic], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "product_ibfk_2")

    @@index([category], map: "category")
    @@index([product_image], map: "product_image")
    @@index([product_pic], map: "product_pic")
    @@index([verified_on], map: "verified_on")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model public_api {
    id                    Int     @id @default(autoincrement())
    user_name             String  @db.VarChar(50)
    passkey               String  @db.VarChar(50)
    event_id              Int?
    company_id            Int?    @unique(map: "company_id")
    number_of_request_min Int?
    number_of_request_hr  Int?
    number_of_request_day Int?
    api                   String? @db.VarChar(500)
    data_access_request   String? @db.VarChar(500)
    ip_add                String? @db.Char(200)
    domain                String? @db.VarChar(200)
    filter_type           String? @db.VarChar(100)
    filter_value          String? @db.VarChar(4000)
    published             Int     @default(1)
    salt_key              String? @db.VarChar(6)
    return_key_points     String? @db.VarChar(500)

    @@index([domain], map: "domain")
    @@index([event_id], map: "event_id")
}

model push_notification {
    id            Int          @id @default(autoincrement())
    device        Int
    title         String?      @db.VarChar(50)
    message       String?      @db.VarChar(500)
    launch_url    String?      @db.VarChar(256)
    entity_type   String       @db.VarChar(32)
    entity_action String?      @db.VarChar(128)
    level         Int
    deliver       DateTime?    @db.DateTime(0)
    action        DateTime?    @db.DateTime(0)
    created       DateTime     @db.DateTime(0)
    modified      DateTime?    @db.DateTime(0)
    status        String       @default("pending") @db.VarChar(10)
    user_devices  user_devices @relation(fields: [device], references: [id], onUpdate: Restrict, map: "device_ibfk_1")

    @@index([device], map: "device_ibfk_1")
}

model push_notification_user {
    id            Int      @id @default(autoincrement())
    ga_id         Int
    user_id       Int
    user_city     Int
    user_country  Int
    page_type     Int
    page_industry Int
    page_city     Int
    page_country  Int
    created       DateTime @db.DateTime(0)
    mapped        DateTime @db.DateTime(0)
    modified      DateTime @db.DateTime(0)
}

model push_tracker {
    id                                    Int       @id @default(autoincrement())
    ga_user                               Int
    user_device_id                        Int
    source                                String    @db.VarChar(255)
    campaign                              String    @db.VarChar(255)
    campaign_ref                          String    @db.VarChar(255)
    created                               DateTime  @default(now()) @db.Timestamp(0)
    title                                 String    @db.VarChar(255)
    body                                  String?   @db.VarChar(255)
    media                                 String?   @db.VarChar(255)
    url                                   String?   @db.VarChar(255)
    deliver                               DateTime? @db.Timestamp(0)
    display                               DateTime? @db.Timestamp(0)
    click                                 DateTime? @db.Timestamp(0)
    dismss                                DateTime? @db.Timestamp(0)
    ga_user_push_tracker_ga_userToga_user ga_user   @relation("push_tracker_ga_userToga_user", fields: [ga_user], references: [id], onUpdate: Restrict, map: "push_tracker_ibfk_1")

    @@index([ga_user], map: "ga_user")
    @@index([user_device_id], map: "user_device_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model questionnaire {
    id                    Int                     @id @default(autoincrement())
    question              String                  @db.VarChar(1500)
    options               String?                 @db.VarChar(15000)
    answer_type           Boolean                 @default(false)
    configuration         String?                 @db.VarChar(1000)
    campaign_feedback     campaign_feedback[]
    faq                   faq[]
    visitor_questionnaire visitor_questionnaire[]
}

model reminder {
    id            Int       @id @default(autoincrement())
    user_id       Int
    event_id      Int?
    published     Int       @default(1)
    remainder_for String    @default("event") @db.VarChar(20)
    referral      String?   @db.VarChar(200)
    created       DateTime? @db.DateTime(0)
    createdby     Int?
    modified      DateTime? @db.DateTime(0)
    modifiedby    Int?
    remindme      Int?      @default(1) @db.TinyInt

    @@index([event_id], map: "event_id")
    @@index([published], map: "published")
    @@index([remainder_for], map: "remainder_for")
    @@index([remindme], map: "remindme")
    @@index([user_id], map: "user_id")
}

model report_issue {
    id          Int       @id @default(autoincrement())
    reporter_id Int
    entity_id   Int
    entity_type String    @db.VarChar(50)
    reason      String?   @db.VarChar(500)
    verified    Int?      @db.TinyInt
    verified_on DateTime? @db.DateTime(0)
    created     DateTime  @default(now()) @db.DateTime(0)
    user        user      @relation(fields: [reporter_id], references: [id], onUpdate: Restrict, map: "report_issue_ibfk_1")

    @@index([reporter_id], map: "reporter_id")
}

model request_user {
    id                           Int      @id @default(autoincrement())
    user                         Int
    request_user                 String   @db.VarChar(20)
    created                      DateTime @default(now()) @db.DateTime(0)
    remark                       String?  @db.VarChar(500)
    counter                      Int?
    user_request_user_userTouser user     @relation("request_user_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "request_user_ibfk_1")

    @@index([request_user], map: "request_user")
    @@index([user], map: "user")
}

model resolution {
    id                 Int                  @id @default(autoincrement())
    title              String?              @db.Text
    resolution_history resolution_history[]
}

model resolution_history {
    id             Int        @id @default(autoincrement())
    resolution_id  Int
    event_id       Int
    created        DateTime   @default(now()) @db.DateTime(0)
    created_by     Int
    action         String     @db.VarChar(20)
    action_date    DateTime?  @db.DateTime(0)
    action_by      Int?
    action_type    String?    @db.VarChar(20)
    action_hist_id Int?
    resolution     resolution @relation(fields: [resolution_id], references: [id], onUpdate: Restrict, map: "resolution_history_ibfk_1")
    event          event      @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "resolution_history_ibfk_2")

    @@index([event_id], map: "event_id")
    @@index([resolution_id], map: "resolution_id")
}

model scrap_event {
    id               Int         @id @default(autoincrement())
    event_name       String      @db.VarChar(200)
    start_date       DateTime    @db.Date
    end_date         DateTime    @db.Date
    city             Int
    venue            Int?
    type             Int         @db.TinyInt
    category         String      @db.VarChar(50)
    description      String      @db.Text
    timing           String?     @db.VarChar(200)
    tickets          String?     @db.VarChar(500)
    event_links      String?     @db.VarChar(1000)
    event_contacts   String?     @db.VarChar(1000)
    company_name     String?     @db.VarChar(100)
    company_website  String?     @db.VarChar(255)
    company_profile  String?     @db.VarChar(4000)
    company_contacts String?     @db.VarChar(1000)
    agenda           String?     @db.VarChar(2000)
    sponsors         String?     @db.VarChar(2000)
    source           String      @db.VarChar(20)
    scrapped_url     String      @db.VarChar(400)
    event_id         Int?
    send_qc          Boolean     @default(false)
    created          DateTime    @default(now()) @db.DateTime(0)
    remark           String?     @db.VarChar(100)
    status           String      @default("P") @db.VarChar(5)
    event_website    String?     @db.VarChar(200)
    company_id       Int?
    country          String      @db.Char(2)
    screenshot       String?     @db.VarChar(200)
    scrape_log_id    Int?
    scrape_id        Int?
    speaker          String?     @db.Text
    exhibitor        String?     @db.Text
    content          String?     @db.VarChar(1000)
    scrape_log       scrape_log? @relation(fields: [scrape_log_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "scrap_event_ibfk_1")

    @@unique([event_name, scrapped_url], map: "event_name")
    @@index([scrape_log_id], map: "scrape_log_id")
}

model scrap_event_archive {
    id               Int         @id @default(autoincrement())
    event_name       String      @db.VarChar(200)
    start_date       DateTime    @db.Date
    end_date         DateTime    @db.Date
    city             Int
    venue            Int?
    type             Int         @db.TinyInt
    category         String      @db.VarChar(50)
    description      String      @db.Text
    timing           String?     @db.VarChar(200)
    tickets          String?     @db.VarChar(500)
    event_links      String?     @db.VarChar(1000)
    event_contacts   String?     @db.VarChar(1000)
    company_name     String?     @db.VarChar(100)
    company_website  String?     @db.VarChar(255)
    company_profile  String?     @db.VarChar(4000)
    company_contacts String?     @db.VarChar(1000)
    agenda           String?     @db.VarChar(2000)
    sponsors         String?     @db.VarChar(2000)
    source           String      @db.VarChar(20)
    scrapped_url     String      @db.VarChar(400)
    event_id         Int?
    send_qc          Boolean     @default(false)
    created          DateTime    @default(now()) @db.DateTime(0)
    remark           String?     @db.VarChar(100)
    status           String      @default("P") @db.VarChar(5)
    event_website    String?     @db.VarChar(200)
    company_id       Int?
    country          String      @db.Char(2)
    screenshot       String?     @db.VarChar(200)
    scrape_log_id    Int?
    scrape_id        Int?
    speaker          String?     @db.Text
    exhibitor        String?     @db.Text
    scrape_log       scrape_log? @relation(fields: [scrape_log_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "scrap_event_archive_ibfk_1")

    @@unique([event_name, scrapped_url], map: "event_name")
    @@index([scrape_log_id], map: "scrape_log_id")
}

model scrape {
    id               Int              @id @default(autoincrement())
    source           String           @unique(map: "source") @db.VarChar(100)
    frequency        Int              @default(360)
    last_run         DateTime?        @db.Timestamp(0)
    next_run         DateTime         @default(now()) @db.Timestamp(0)
    last_run_success String           @default("T") @db.VarChar(1)
    created          DateTime         @default(now()) @db.Timestamp(0)
    rehost_only      Boolean          @default(false)
    status           String           @default("Enabled") @db.VarChar(10)
    source_type      String?          @db.VarChar(20)
    scrape_mode      String?          @db.VarChar(10)
    bl_id            Int?
    process_by       String?          @default("system") @db.VarChar(20)
    remark           String?          @db.VarChar(200)
    data             String?          @db.VarChar(500)
    scrape_dev       scrape_dev?
    scrape_log       scrape_log[]
    scrape_log_dev   scrape_log_dev[]
}

model scrape_dev {
    id               Int       @id @default(autoincrement())
    scrape_id        Int       @unique(map: "scrape_id")
    entry_on         DateTime? @default(now()) @db.Timestamp(0)
    last_run         DateTime? @db.Timestamp(0)
    last_run_success String    @default("F") @db.VarChar(1)
    assigned_to      Int?
    assigned_on      DateTime? @db.Timestamp(0)
    review_by        Int?
    review_on        DateTime? @db.Timestamp(0)
    stage            String    @default("Unassigned") @db.VarChar(15)
    remark           String?   @db.VarChar(200)
    redo             Int?      @default(0)
    scrape           scrape    @relation(fields: [scrape_id], references: [id], onUpdate: Restrict, map: "scrape_dev_ibfk_1")
}

model scrape_history {
    id             Int       @id @default(autoincrement())
    updated_on     DateTime? @default(now()) @db.Timestamp(0)
    updated_by     Int?
    content        String?   @db.VarChar(3000)
    history_remark String?   @db.VarChar(500)
    entity_type    String?   @db.VarChar(20)
    entity_id      Int?
    review_type    String?   @db.Char(1)
}

model scrape_log {
    id                  Int                   @id @default(autoincrement())
    scrape_id           Int
    run_start_time      DateTime              @default(now()) @db.Timestamp(0)
    run_end_time        DateTime?             @db.Timestamp(0)
    run_status          String                @default("R") @db.VarChar(1)
    error_details       String?               @db.VarChar(1000)
    events_scrapped     Int?
    events_added        Int?
    events_published    Int?
    run_duration        Int?
    scrap_event         scrap_event[]
    scrap_event_archive scrap_event_archive[]
    scrape              scrape                @relation(fields: [scrape_id], references: [id], onUpdate: Restrict, map: "scrape_log_ibfk_1")

    @@index([scrape_id], map: "scrape_id")
}

model scrape_log_dev {
    id              Int       @id @default(autoincrement())
    created         DateTime  @default(now()) @db.Timestamp(0)
    source_id       Int?
    run_start_time  DateTime? @db.Timestamp(0)
    run_end_time    DateTime? @db.Timestamp(0)
    run_status      String    @default("T") @db.VarChar(1)
    error_details   String?   @db.VarChar(1000)
    events_scrapped Int?
    run_duration    Int?
    scrape          scrape?   @relation(fields: [source_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "scrape_log_dev_ibfk_1")

    @@index([source_id], map: "source_id")
}

model scrapping_event {
    id           Int       @id @default(autoincrement())
    scrapped_url String    @unique(map: "scrapped_url") @db.VarChar(300)
    source       String?   @db.VarChar(20)
    website      String?   @db.VarChar(50)
    name         String    @db.VarChar(100)
    description  String    @db.Text
    start_date   DateTime  @db.DateTime(0)
    end_date     DateTime? @db.DateTime(0)
    start_time   String?   @db.VarChar(50)
    end_time     String?   @db.VarChar(50)
    timezone     String?   @db.VarChar(50)
    gmt          String?   @db.VarChar(10)
    event_id     Int?
    status       String?   @db.VarChar(5)
    remark       String?   @db.VarChar(50)
    created      DateTime  @default(now()) @db.DateTime(0)
}

model service_agreement {
    id                                                                                             Int                            @id @default(autoincrement())
    created_by                                                                                     Int
    created_date                                                                                   DateTime                       @db.Date
    company                                                                                        Int?
    user                                                                                           Int?
    last_modified_by                                                                               Int?
    modified_date                                                                                  DateTime?                      @db.Date
    status                                                                                         String                         @db.VarChar(45)
    amount                                                                                         Float?                         @db.Float
    discount                                                                                       Float?                         @db.Float
    gst                                                                                            Float?                         @db.Float
    is_igst                                                                                        Boolean?
    total                                                                                          Float?                         @db.Float
    currency                                                                                       String                         @db.Char(5)
    service_by                                                                                     Int?
    instruction                                                                                    String?                        @db.VarChar(2000)
    type                                                                                           String                         @db.VarChar(50)
    campaign_assign_date                                                                           DateTime?                      @db.DateTime(0)
    user_service_agreement_created_byTouser                                                        user                           @relation("service_agreement_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "service_agreement_ibfk_1")
    user_service_agreement_last_modified_byTouser                                                  user?                          @relation("service_agreement_last_modified_byTouser", fields: [last_modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_ibfk_2")
    user_service_agreement_service_byTouser                                                        user?                          @relation("service_agreement_service_byTouser", fields: [service_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_ibfk_3")
    user_service_agreement_userTouser                                                              user?                          @relation("service_agreement_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_ibfk_4")
    service_agreement_service_service_agreement_service_service_agreementToservice_agreement       service_agreement_service[]    @relation("service_agreement_service_service_agreementToservice_agreement")
    service_invoice_service_invoice_service_agreementToservice_agreement                           service_invoice[]              @relation("service_invoice_service_agreementToservice_agreement")
    service_payment_receipt_service_payment_receipt_service_agreementToservice_agreement           service_payment_receipt[]      @relation("service_payment_receipt_service_agreementToservice_agreement")
    service_pg_transaction_service_pg_transaction_service_agreementToservice_agreement             service_pg_transaction[]       @relation("service_pg_transaction_service_agreementToservice_agreement")
    service_standing_instruction_service_standing_instruction_service_agreementToservice_agreement service_standing_instruction[] @relation("service_standing_instruction_service_agreementToservice_agreement")
    service_subscription_service_subscription_service_agreementToservice_agreement                 service_subscription[]         @relation("service_subscription_service_agreementToservice_agreement")
    service_subscription_history_service_subscription_history_service_agreementToservice_agreement service_subscription_history[] @relation("service_subscription_history_service_agreementToservice_agreement")

    @@index([company], map: "company")
    @@index([id], map: "createby")
    @@index([created_by], map: "created_by")
    @@index([last_modified_by], map: "last_modified_by")
    @@index([service_by], map: "service_by")
    @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_agreement_service {
    id                                                                                                             Int                            @id @default(autoincrement())
    service_agreement                                                                                              Int?
    service                                                                                                        Int?
    event                                                                                                          Int?
    company                                                                                                        Int?
    user                                                                                                           Int?
    service_subscription                                                                                           Int?
    start_date                                                                                                     DateTime?                      @db.Date
    end_date                                                                                                       DateTime?                      @db.Date
    quantity                                                                                                       Int?
    is_complementry                                                                                                Boolean?
    expectation                                                                                                    Int?
    instruction                                                                                                    String?                        @db.VarChar(4000)
    status                                                                                                         Int?
    price                                                                                                          Float?                         @db.Float
    schedule                                                                                                       Boolean?
    campaign_preference                                                                                            String?                        @db.VarChar(4000)
    campaign_tracker_campaign_tracker_service_agreement_serviceToservice_agreement_service                         campaign_tracker[]             @relation("campaign_tracker_service_agreement_serviceToservice_agreement_service")
    service_agreement_service_agreement_service_service_agreementToservice_agreement                               service_agreement?             @relation("service_agreement_service_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_service_ibfk_1")
    services                                                                                                       services?                      @relation(fields: [service], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_service_ibfk_2")
    user_service_agreement_service_userTouser                                                                      user?                          @relation("service_agreement_service_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_service_ibfk_3")
    service_checklist                                                                                              service_checklist[]
    service_invoice_mapping_service_invoice_mapping_service_agreement_serviceToservice_agreement_service           service_invoice_mapping[]      @relation("service_invoice_mapping_service_agreement_serviceToservice_agreement_service")
    service_pg_transaction_service_pg_transaction_service_agreement_serviceToservice_agreement_service             service_pg_transaction[]       @relation("service_pg_transaction_service_agreement_serviceToservice_agreement_service")
    service_standing_instruction_service_standing_instruction_service_agreement_serviceToservice_agreement_service service_standing_instruction[] @relation("service_standing_instruction_service_agreement_serviceToservice_agreement_service")
    service_weekly_check                                                                                           service_weekly_check[]
    work_order_work_order_service_agreement_serviceToservice_agreement_service                                     work_order[]                   @relation("work_order_service_agreement_serviceToservice_agreement_service")
    work_order_history_work_order_history_service_agreement_serviceToservice_agreement_service                     work_order_history[]           @relation("work_order_history_service_agreement_serviceToservice_agreement_service")

    @@index([company], map: "company")
    @@index([event], map: "event")
    @@index([service_agreement], map: "service_agreement_service_ibfk_1")
    @@index([service], map: "service_agreement_service_ibfk_2")
    @@index([user], map: "user")
}

model service_checklist {
    id                          Int                       @id @default(autoincrement())
    sas_id                      Int
    content_check               DateTime?                 @db.DateTime(0)
    intro_received              DateTime?                 @db.DateTime(0)
    contact_made                DateTime?                 @db.DateTime(0)
    demo                        DateTime?                 @db.DateTime(0)
    payment_received            DateTime?                 @db.DateTime(0)
    payment_delayed             DateTime?                 @db.DateTime(0)
    campaign_lead_report_status DateTime?                 @db.DateTime(0)
    case_study                  DateTime?                 @db.DateTime(0)
    feedback_status             DateTime?                 @db.DateTime(0)
    review_score                Int?
    review_comment              String?                   @db.VarChar(1000)
    fnr_reason                  String?                   @db.VarChar(500)
    fnr_status                  DateTime?                 @db.DateTime(0)
    created                     DateTime                  @default(now()) @db.Timestamp(0)
    created_by                  Int
    modified                    DateTime?                 @db.Timestamp(0)
    Criticality                 Int?
    service_agreement_service   service_agreement_service @relation(fields: [sas_id], references: [id], onUpdate: Restrict, map: "service_checklist_ibfk_1")
    user                        user                      @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "service_checklist_ibfk_2")

    @@index([created_by], map: "created_by")
    @@index([sas_id], map: "sas_id")
}

model service_invoice {
    id                                                                                         Int                            @id @default(autoincrement())
    service_agreement                                                                          Int
    amount                                                                                     Float?                         @db.Float
    discount                                                                                   Float?                         @db.Float
    gst                                                                                        Float?                         @db.Float
    is_igst                                                                                    Int?                           @db.TinyInt
    total                                                                                      Float                          @db.Float
    currency                                                                                   String                         @db.Char(3)
    instruction                                                                                String?                        @db.VarChar(4000)
    receipt_total                                                                              Float?                         @db.Float
    created                                                                                    DateTime                       @default(now()) @db.Timestamp(0)
    modified                                                                                   DateTime?                      @db.Timestamp(0)
    created_by                                                                                 Int?
    currency_conversion_rate                                                                   Float?                         @db.Float
    credit_note_credit_note_service_invoiceToservice_invoice                                   credit_note[]                  @relation("credit_note_service_invoiceToservice_invoice")
    service_agreement_service_invoice_service_agreementToservice_agreement                     service_agreement              @relation("service_invoice_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onUpdate: Restrict, map: "service_invoice_ibfk_1")
    service_invoice_mapping_service_invoice_mapping_service_invoiceToservice_invoice           service_invoice_mapping[]      @relation("service_invoice_mapping_service_invoiceToservice_invoice")
    service_invoice_receipt_service_invoice_receipt_service_invoiceToservice_invoice           service_invoice_receipt[]      @relation("service_invoice_receipt_service_invoiceToservice_invoice")
    service_payment_receipt_service_payment_receipt_service_invoiceToservice_invoice           service_payment_receipt[]      @relation("service_payment_receipt_service_invoiceToservice_invoice")
    service_subscription_history_service_subscription_history_service_invoiceToservice_invoice service_subscription_history[] @relation("service_subscription_history_service_invoiceToservice_invoice")

    @@index([service_agreement], map: "service_agreement")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_invoice_mapping {
    id                                                                                                     Int                       @id @default(autoincrement())
    service_invoice                                                                                        Int
    service_agreement_service                                                                              Int
    tagged_amount                                                                                          Float?                    @db.Float
    type                                                                                                   String?                   @db.Char(1)
    service_invoice_service_invoice_mapping_service_invoiceToservice_invoice                               service_invoice           @relation("service_invoice_mapping_service_invoiceToservice_invoice", fields: [service_invoice], references: [id], onUpdate: Restrict, map: "service_invoice_mapping_ibfk_1")
    service_agreement_service_service_invoice_mapping_service_agreement_serviceToservice_agreement_service service_agreement_service @relation("service_invoice_mapping_service_agreement_serviceToservice_agreement_service", fields: [service_agreement_service], references: [id], onUpdate: Restrict, map: "service_invoice_mapping_ibfk_2")

    @@index([service_invoice], map: "service_invoice_mapping_ibfk_1")
    @@index([service_agreement_service], map: "service_invoice_mapping_ibfk_2")
}

model service_invoice_receipt {
    id                                                                       Int                     @id @default(autoincrement())
    service_receipt                                                          Int
    service_invoice                                                          Int
    service_receipt_amount_mapped                                            Float?                  @db.Float
    created                                                                  DateTime                @default(now()) @db.Timestamp(0)
    service_payment_receipt                                                  service_payment_receipt @relation(fields: [service_receipt], references: [id], onUpdate: Restrict, map: "service_invoice_receipt_ibfk_1")
    service_invoice_service_invoice_receipt_service_invoiceToservice_invoice service_invoice         @relation("service_invoice_receipt_service_invoiceToservice_invoice", fields: [service_invoice], references: [id], onUpdate: Restrict, map: "service_invoice_receipt_ibfk_2")

    @@index([service_invoice], map: "service_invoice")
    @@index([service_receipt], map: "service_receipt")
}

model service_payment_receipt {
    id                                                                             Int                       @id @default(autoincrement())
    type                                                                           String                    @db.Char(10)
    service_agreement                                                              Int
    amount                                                                         Float?                    @db.Float
    service_invoice                                                                Int?
    created                                                                        DateTime                  @default(now()) @db.Timestamp(0)
    created_by                                                                     Int
    service_receipt_balance                                                        Float?                    @db.Float
    service_invoice_receipt                                                        service_invoice_receipt[]
    service_agreement_service_payment_receipt_service_agreementToservice_agreement service_agreement         @relation("service_payment_receipt_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onUpdate: Restrict, map: "service_payment_receipt_ibfk_1")
    service_invoice_service_payment_receipt_service_invoiceToservice_invoice       service_invoice?          @relation("service_payment_receipt_service_invoiceToservice_invoice", fields: [service_invoice], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_payment_receipt_ibfk_2")
    user                                                                           user                      @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "service_payment_receipt_ibfk_3")

    @@index([created_by], map: "created_by")
    @@index([service_agreement], map: "service_agreement")
    @@index([service_invoice], map: "service_invoice")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_pg_transaction {
    id                                                                                                             Int                            @id @default(autoincrement())
    service_agreement_service                                                                                      Int
    amount                                                                                                         Float?                         @db.Float
    gateway                                                                                                        String                         @db.VarChar(20)
    gateway_txn_id                                                                                                 String?                        @db.VarChar(30)
    gateway_profile_id                                                                                             String?                        @db.VarChar(30)
    service_standing_instruction                                                                                   Int
    status                                                                                                         String?                        @db.VarChar(10)
    created                                                                                                        DateTime                       @default(now()) @db.Timestamp(0)
    created_by                                                                                                     Int
    service_agreement                                                                                              Int?
    service_agreement_service_pg_transaction_service_agreementToservice_agreement                                  service_agreement?             @relation("service_pg_transaction_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement_1")
    service_agreement_service_service_pg_transaction_service_agreement_serviceToservice_agreement_service          service_agreement_service      @relation("service_pg_transaction_service_agreement_serviceToservice_agreement_service", fields: [service_agreement_service], references: [id], onUpdate: Restrict, map: "service_pg_transaction_ibfk_1")
    service_standing_instruction_service_pg_transaction_service_standing_instructionToservice_standing_instruction service_standing_instruction   @relation("service_pg_transaction_service_standing_instructionToservice_standing_instruction", fields: [service_standing_instruction], references: [id], onUpdate: Restrict, map: "service_pg_transaction_ibfk_2")
    service_subscription_history_service_subscription_history_service_pg_transactionToservice_pg_transaction       service_subscription_history[] @relation("service_subscription_history_service_pg_transactionToservice_pg_transaction")

    @@index([service_agreement], map: "service_agreement_1")
    @@index([service_agreement_service, service_standing_instruction, created_by], map: "service_agreement_service")
    @@index([service_standing_instruction], map: "service_standing_instruction")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_standing_instruction {
    id                                                                                                          Int                       @id @default(autoincrement())
    service_agreement_service                                                                                   Int
    gateway                                                                                                     String                    @db.VarChar(20)
    gateway_profile_id                                                                                          String?                   @db.VarChar(30)
    status                                                                                                      String?                   @db.VarChar(10)
    frequency                                                                                                   Int
    service_agreement                                                                                           Int?
    expiry                                                                                                      DateTime?                 @db.DateTime(0)
    service_pg_transaction_service_pg_transaction_service_standing_instructionToservice_standing_instruction    service_pg_transaction[]  @relation("service_pg_transaction_service_standing_instructionToservice_standing_instruction")
    service_agreement_service_standing_instruction_service_agreementToservice_agreement                         service_agreement?        @relation("service_standing_instruction_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_agreement")
    service_agreement_service_service_standing_instruction_service_agreement_serviceToservice_agreement_service service_agreement_service @relation("service_standing_instruction_service_agreement_serviceToservice_agreement_service", fields: [service_agreement_service], references: [id], onUpdate: Restrict, map: "service_standing_instruction_ibfk_1")

    @@index([service_agreement], map: "service_agreement")
    @@index([service_agreement_service], map: "service_agreement_service")
}

model service_subscription {
    id                                                                          Int                 @id @default(autoincrement())
    service                                                                     Int
    event                                                                       Int?
    company                                                                     Int?
    user                                                                        Int?
    start_date                                                                  DateTime            @db.Date
    end_date                                                                    DateTime            @db.Date
    quantity                                                                    Int?
    status                                                                      String              @db.VarChar(20)
    frequency                                                                   Int?
    renewable_date                                                              DateTime?           @db.Date
    service_agreement                                                           Int
    case_study                                                                  String?             @db.Text
    created                                                                     DateTime            @default(now()) @db.Timestamp(0)
    avg_rating                                                                  Float?              @db.Float
    campaign_feedback                                                           campaign_feedback[]
    services                                                                    services            @relation(fields: [service], references: [id], onUpdate: Restrict, map: "service_subscription_ibfk_1")
    event_service_subscription_eventToevent                                     event?              @relation("service_subscription_eventToevent", fields: [event], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_subscription_ibfk_2")
    service_agreement_service_subscription_service_agreementToservice_agreement service_agreement   @relation("service_subscription_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onUpdate: Restrict, map: "service_subscription_ibfk_4")
    user_service_subscription_userTouser                                        user?               @relation("service_subscription_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_subscription_ibfk_5")

    @@unique([service, service_agreement, start_date, event, company], map: "service_service_agreement")
    @@index([avg_rating], map: "avg_rating")
    @@index([company], map: "company")
    @@index([event], map: "event")
    @@index([service], map: "service")
    @@index([service_agreement], map: "service_agreement")
    @@index([user], map: "user")
}

model service_subscription_history {
    id                                                                                                 Int                     @id @default(autoincrement())
    service                                                                                            Int
    event                                                                                              Int?
    company                                                                                            Int?
    user                                                                                               Int?
    start_date                                                                                         DateTime?               @db.Date
    end_date                                                                                           DateTime?               @db.Date
    service_agreement                                                                                  Int
    status                                                                                             String                  @db.VarChar(20)
    comments                                                                                           String?                 @db.VarChar(200)
    created                                                                                            DateTime?               @default(now()) @db.Timestamp(0)
    createdby                                                                                          Int?
    service_pg_transaction                                                                             Int?
    service_invoice                                                                                    Int?
    services                                                                                           services                @relation(fields: [service], references: [id], onUpdate: Restrict, map: "service_subscription_history_ibfk_1")
    event_service_subscription_history_eventToevent                                                    event?                  @relation("service_subscription_history_eventToevent", fields: [event], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_subscription_history_ibfk_2")
    service_agreement_service_subscription_history_service_agreementToservice_agreement                service_agreement       @relation("service_subscription_history_service_agreementToservice_agreement", fields: [service_agreement], references: [id], onUpdate: Restrict, map: "service_subscription_history_ibfk_4")
    service_pg_transaction_service_subscription_history_service_pg_transactionToservice_pg_transaction service_pg_transaction? @relation("service_subscription_history_service_pg_transactionToservice_pg_transaction", fields: [service_pg_transaction], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_subscription_history_ibfk_5")
    service_invoice_service_subscription_history_service_invoiceToservice_invoice                      service_invoice?        @relation("service_subscription_history_service_invoiceToservice_invoice", fields: [service_invoice], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_subscription_history_ibfk_6")
    user_service_subscription_history_userTouser                                                       user?                   @relation("service_subscription_history_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "service_subscription_history_ibfk_7")

    @@index([company], map: "company")
    @@index([event], map: "event")
    @@index([service], map: "service")
    @@index([service_agreement], map: "service_agreement")
    @@index([service_pg_transaction], map: "service_subscription_history_ibfk_5")
    @@index([service_invoice], map: "service_subscription_history_ibfk_6")
    @@index([user], map: "user")
}

model service_weekly_check {
    id                        Int                       @id @default(autoincrement())
    sas_id                    Int
    start_date                DateTime                  @db.Date
    end_date                  DateTime                  @db.Date
    checked_on                DateTime?                 @db.DateTime(0)
    created                   DateTime                  @default(now()) @db.Timestamp(0)
    published                 Int                       @default(1)
    service_agreement_service service_agreement_service @relation(fields: [sas_id], references: [id], onUpdate: Restrict, map: "service_weekly_check_ibfk_1")

    @@index([sas_id], map: "sas_id")
}

model services {
    id                           Int                            @id @default(autoincrement())
    type                         String?                        @db.VarChar(20)
    name                         String?                        @db.VarChar(45)
    entity                       Int?
    plan_type                    String?                        @db.VarChar(20)
    price                        Float?                         @db.Float
    service_agreement_service    service_agreement_service[]
    service_subscription         service_subscription[]
    service_subscription_history service_subscription_history[]
    user_subscription            user_subscription[]
}

model settings {
    id         Int      @id @default(autoincrement())
    class      String   @db.VarChar(255)
    key        String   @db.VarChar(255)
    value      String?  @db.Text
    type       String   @default("string") @db.VarChar(31)
    context    String?  @db.VarChar(255)
    created_at DateTime @db.DateTime(0)
    updated_at DateTime @db.DateTime(0)
}

model slow_log {
    id                  Int       @id @default(autoincrement())
    url                 String    @db.VarChar(5000)
    total_time          BigInt?
    total_frequency     Int?
    first_date          DateTime? @db.DateTime(0)
    last_date           DateTime? @db.DateTime(0)
    yesterday_time      Int?
    yesterday_frequency Int?
    domain              String?   @db.MediumText
    fixed_date          DateTime? @db.DateTime(0)

    @@index([first_date], map: "first_date")
    @@index([last_date], map: "last_date")
    @@index([total_frequency], map: "total_frequency")
    @@index([total_time], map: "total_time")
    @@index([url(length: 767)], map: "url")
    @@index([yesterday_frequency], map: "yesterday_frequency")
    @@index([yesterday_time], map: "yesterday_time")
}

model slow_query {
    id            Int       @id @default(autoincrement())
    query         String    @db.Text
    total_time    DateTime? @db.Time(0)
    frequency     Int?
    fixed         DateTime? @db.DateTime(0)
    last_detected DateTime? @db.DateTime(0)

    @@index([total_time, frequency, fixed, last_detected], map: "total_time")
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model social_id {
    social_id BigInt   @id
    created   DateTime @default(now()) @db.Timestamp(0)
}

model social_keyword {
    id        Int       @id @default(autoincrement())
    event_id  Int
    hashtag   String    @db.VarChar(500)
    prime     String    @unique(map: "prime") @db.VarChar(400)
    published Int       @default(1)
    created   DateTime? @default(now()) @db.Timestamp(0)

    @@index([event_id], map: "event_id")
    @@index([hashtag], map: "hashtag")
    @@index([published], map: "published")
}

model social_profile {
    id               Int     @id @default(autoincrement())
    user_id          Int
    facebook_profile String? @db.LongText
    linkedin_profile String? @db.LongText
    google_profile   String? @db.LongText
    user             user    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "social_profile_ibfk_1")

    @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model spammessage {
    id                              Int       @id @default(autoincrement())
    sender                          Int
    receiver                        Int
    event                           Int
    message                         String?   @db.Text
    created                         DateTime? @default(now()) @db.Timestamp(0)
    source                          String?   @db.VarChar(50)
    device                          String?   @db.VarChar(50)
    ip                              String?   @db.Char(15)
    spamCheck                       Boolean?  @default(false)
    reason                          Int?      @default(0) @db.TinyInt
    user_spammessage_senderTouser   user      @relation("spammessage_senderTouser", fields: [sender], references: [id], onUpdate: Restrict, map: "spamMessage_ibfk_1")
    user_spammessage_receiverTouser user      @relation("spammessage_receiverTouser", fields: [receiver], references: [id], onUpdate: Restrict, map: "spamMessage_ibfk_2")

    @@index([receiver], map: "receiver")
    @@index([sender], map: "sender")
}

model speaker_event_stats {
    id              Int           @id @default(autoincrement())
    speaker_id      Int           @unique(map: "speaker_id")
    total_events    Int           @default(0)
    upcoming_events Int           @default(0)
    follower_count  Int           @default(0)
    created         DateTime      @default(now()) @db.DateTime(0)
    modified        DateTime?     @db.DateTime(0)
    published       Int           @default(1) @db.TinyInt
    event_speaker   event_speaker @relation(fields: [speaker_id], references: [id], onUpdate: Restrict, map: "speaker_event_ibfk_1")
}

model stats_myadmin {
    id           Int      @id @default(autoincrement())
    status       String   @db.VarChar(500)
    event        String   @db.VarChar(500)
    company      String   @db.VarChar(500)
    venue        String   @db.VarChar(500)
    org_events   String   @db.VarChar(500)
    registration String   @db.VarChar(500)
    enrichment   String   @db.VarChar(2000)
    created      DateTime @default(now()) @db.Timestamp(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sub_tranx {
    id                 Int      @id @default(autoincrement())
    sub_id             Int
    user_id            Int
    amount             Int
    payment_gateway    Int
    gateway_profile_id String?  @db.VarChar(20)
    gateway_txn_id     String?  @db.VarChar(20)
    status             Boolean
    created            DateTime @default(now()) @db.Timestamp(0)
    paid_currency      String?  @db.Char(5)
    paid_amount        Int?

    @@index([sub_id], map: "sub_id")
    @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sub_venue {
    id             Int             @id @default(autoincrement())
    venue          Int
    name           String          @db.VarChar(200)
    area           Decimal?        @db.Decimal(10, 2)
    unit           String?         @db.VarChar(20)
    attachments    String?         @db.VarChar(1000)
    description    String?         @db.VarChar(4000)
    published      Boolean?        @default(false)
    created        DateTime?       @default(now()) @db.Timestamp(0)
    modified       DateTime?       @db.Timestamp(0)
    createdby      Int?
    modifiedby     Int?
    length         Decimal?        @db.Decimal(10, 2)
    breath         Decimal?        @db.Decimal(10, 2)
    height         Decimal?        @db.Decimal(10, 2)
    price_per_hour Float?          @db.Float
    price_per_day  Float?          @db.Float
    type           Int?
    verified       DateTime?       @db.Timestamp(0)
    rec_status     Int             @default(0) @db.TinyInt
    joined         Int             @default(0)
    rec_vid        Int?
    hosted_on      String?         @db.VarChar(50)
    start_utc      BigInt?
    end_utc        BigInt?
    event_agenda   event_agenda[]
    venue_category venue_category? @relation(fields: [type], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sub_venue_ibfk_1")

    @@unique([name, venue], map: "name_venue")
    @@index([venue], map: "fk_sub_venue_venue")
    @@index([type], map: "sub_venue_ibfk_1")
}

model subscribe {
    id         Int       @id @default(autoincrement())
    user_id    Int
    created    DateTime? @db.DateTime(0)
    createdby  Int?
    modified   DateTime? @db.DateTime(0)
    modifiedby Int?
    user       user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "subscribe_ibfk_1")

    @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscription {
    id         Int       @id @default(autoincrement())
    last_tranx Int?
    company    Int?
    event      Int?
    status     Boolean   @default(false)
    created    DateTime  @default(now()) @db.Timestamp(0)
    modified   DateTime? @db.Timestamp(0)
    sub_till   DateTime? @db.Timestamp(0)
    membership Int
    currency   String    @db.Char(3)
    amount     Int
    frequency  Int?
    sub_start  DateTime? @db.Timestamp(0)
    comment    String?   @db.VarChar(200)
    createdby  Int?
    user       user?     @relation(fields: [createdby], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subscription_ibfk_1")

    @@unique([company, event, membership], map: "company_event_mermbership")
    @@index([company], map: "company")
    @@index([createdby], map: "createdby")
    @@index([event], map: "event")
    @@index([last_tranx], map: "latest_tranx")
}

model sync_connect {
    connect_id Int      @id
    source     String?  @db.VarChar(255)
    created    DateTime @default(now()) @db.DateTime(0)
}

model sync_thread {
    thread_id Int      @id
    source    String?  @db.VarChar(255)
    created   DateTime @default(now()) @db.DateTime(0)
}

model sync_user {
    user_id Int      @id
    source  String?  @db.VarChar(255)
    created DateTime @default(now()) @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model t1 {
    id        Int?
    FirstName String? @db.VarChar(20)
    lastName  String? @db.VarChar(20)

    @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model table_name {
    id              Float?
    holiday_edition Float?
    name            String? @db.VarChar(100)
    country         String? @db.VarChar(100)
    description     String? @db.VarChar(100)
    start_date      String? @db.VarChar(100)
    end_date        String? @db.VarChar(100)
    type            String? @db.VarChar(100)
    subtype         String? @db.VarChar(100)
    created_on      String? @db.VarChar(100)
    modified_on     String? @db.VarChar(100)
    state           String? @db.VarChar(100)
    state_iso       String? @db.VarChar(100)

    @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tags {
    id         Int       @id @default(autoincrement())
    name       String    @db.VarChar(500)
    created    DateTime  @default(now()) @db.DateTime(0)
    modified   DateTime? @db.DateTime(0)
    published  Int       @default(1) @db.TinyInt
    createdby  Int
    modifiedby Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model temp_en_id {
    id      Int?
    encrypt String? @db.VarChar(4)

    @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model temp_en_id1 {
    id      Int?
    encrypt String? @db.VarChar(4)

    @@ignore
}

model temp_logs_table {
    id        Int      @id @default(autoincrement())
    ip        String   @db.VarChar(50)
    timestamp DateTime @db.DateTime(0)
}

model temp_teacking_data {
    id      Int      @id @default(autoincrement())
    eventid Int
    ip      String   @db.VarChar(500)
    mode    String   @db.VarChar(100)
    roomid  String   @db.VarChar(500)
    time    DateTime @default(now()) @db.Timestamp(0)
    userid  Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model temp_user {
    id                      Int       @id @default(autoincrement())
    bts_id                  Int?
    email                   String?   @unique(map: "email_UNIQUE") @db.VarChar(100)
    phone                   String?   @db.VarChar(50)
    name                    String?   @db.VarChar(100)
    about                   String?   @db.VarChar(200)
    membership              Int?
    company                 Int?
    profile                 String?   @db.VarChar(4000)
    linkedin_profile        String?   @db.LongText
    city                    Int?
    country                 String?   @db.VarChar(2)
    gender                  String?   @db.Char(2)
    date_of_birth           DateTime? @db.Date
    industry_id             String?   @db.VarChar(400)
    geo_lat                 Decimal?  @db.Decimal(10, 6)
    geo_long                Decimal?  @db.Decimal(10, 6)
    last_sent_date          DateTime? @db.Date
    unsubscribe             Int?      @default(1) @db.TinyInt
    facebook_id             String?   @db.VarChar(100)
    linkedin_id             String?   @db.VarChar(100)
    twitter_id              String?   @db.VarChar(100)
    google_id               String?   @db.VarChar(100)
    wikipedia               String?   @db.VarChar(100)
    website                 String?   @db.VarChar(100)
    euser                   Boolean?
    published               Boolean?  @default(false)
    email_active            DateTime? @db.Timestamp(0)
    created                 DateTime? @default(now()) @db.Timestamp(0)
    createdby               Int?
    modified                DateTime? @db.Timestamp(0)
    modifiedby              Int?
    password                String?   @db.VarChar(255)
    verified                Boolean?  @default(false)
    user_company            String?   @db.VarChar(100)
    designation             String?   @db.VarChar(100)
    designation_id          Int?
    biz_type                String?   @db.VarChar(50)
    google_profile          String?   @db.VarChar(4000)
    reminder                Int       @default(1) @db.TinyInt
    source                  String?   @db.VarChar(100)
    profile_picture         String?   @db.Char(175)
    show_profile            Boolean?  @default(true)
    autointroduce           Boolean?  @default(false)
    profile_score           Int?      @default(0)
    notification            Int?      @default(111)
    url                     String?   @unique(map: "url_2") @db.VarChar(100)
    email_verified          DateTime? @db.DateTime(0)
    phone_verified          DateTime? @db.Timestamp(0)
    profile_completed       DateTime? @db.DateTime(0)
    profile_modified        DateTime? @db.Timestamp(0)
    profile_verified        DateTime? @db.DateTime(0)
    crawl_status            Int?      @default(0) @db.TinyInt
    profile_page            Int?      @default(0) @db.TinyInt
    total_event_attend      Int?
    total_event_speak       Int?
    last_active             DateTime? @db.Timestamp(0)
    ip_address              String?   @db.Char(15)
    profile_score_completed Int?
    speaker_profile_score   Int?
    language                String?   @default("en") @db.VarChar(10)
    u_phone                 String?   @unique(map: "u_phone") @db.VarChar(50)
    publicid                String?   @db.VarChar(50)
    odash_activeness        Int?
    spam_flag               Int?
    last_flagged            DateTime? @db.Timestamp(0)
    spam_score              Int?

    @@index([autointroduce], map: "autointroduce")
    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([crawl_status], map: "crawl_status")
    @@index([designation], map: "designation")
    @@index([email_verified, profile_completed, profile_verified], map: "email_verified")
    @@index([euser], map: "euser")
    @@index([facebook_id], map: "facebook_id")
    @@index([company], map: "fk_user_company")
    @@index([bts_id], map: "fk_user_user1")
    @@index([google_id], map: "google_id")
    @@index([industry_id], map: "industry_id")
    @@index([ip_address, created], map: "ip_address")
    @@index([last_active], map: "last_active")
    @@index([last_sent_date], map: "last_sent_date")
    @@index([linkedin_id], map: "linkedin_id")
    @@index([notification], map: "notification")
    @@index([password], map: "password")
    @@index([phone], map: "phone")
    @@index([phone_verified], map: "phone_verified")
    @@index([profile_modified], map: "profile_modified")
    @@index([profile_page], map: "profile_page")
    @@index([profile_page, published], map: "profile_page_2")
    @@index([profile_picture], map: "profile_picture")
    @@index([profile_score], map: "profile_score")
    @@index([published], map: "published")
    @@index([reminder], map: "reminder")
    @@index([show_profile], map: "show_profile")
    @@index([show_profile, published], map: "show_profile_2")
    @@index([speaker_profile_score], map: "speaker_profile_score")
    @@index([total_event_attend], map: "total_event_attend")
    @@index([total_event_speak], map: "total_event_speak")
    @@index([twitter_id], map: "twitter_id")
    @@index([unsubscribe], map: "unsubscribe")
    @@index([wikipedia], map: "wikipedia")
}

model testingPurpose {
    oid  Int       @id
    cid  Int?
    ov   Int?
    time DateTime? @db.DateTime(0)
}

model thread {
    id         Int       @id @default(autoincrement())
    connect_id Int
    sender     Int
    receiver   Int
    message    String?   @db.Text
    seen       Boolean?  @default(false)
    created    DateTime? @default(now()) @db.Timestamp(0)
    modified   DateTime? @db.DateTime(0)
    published  Boolean   @default(true)
    ip_addr    String?   @db.Char(20)
    source     String?   @db.VarChar(50)
    device     String?   @db.VarChar(50)
    private    Boolean?  @default(false)
    spam_flag  Int?

    @@index([connect_id], map: "connect_id")
    @@index([created], map: "created")
    @@index([ip_addr, source], map: "ip_addr")
    @@index([ip_addr], map: "ip_addr_2")
    @@index([modified], map: "modified")
    @@index([private], map: "private")
    @@index([published], map: "published")
    @@index([receiver], map: "receiver")
    @@index([seen], map: "seen")
    @@index([sender], map: "sender")
    @@index([sender, created], map: "sender_2")
    @@index([source], map: "source")
}

model ticket_configuration {
    id            Int       @id @default(autoincrement())
    name          String?   @db.VarChar(255)
    rule          String?   @db.VarChar(255)
    absorb_extras String?   @db.VarChar(255)
    calc_type     String?   @db.VarChar(255)
    rate          Float?
    status        String?   @db.VarChar(255)
    created       DateTime? @db.DateTime(0)
    modified      DateTime? @db.DateTime(0)
    event_id      Int?
    createdby     String?   @db.VarChar(45)
    modifiedby    String?   @db.VarChar(45)
    currency      String?   @db.VarChar(45)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tmp {
    id Int

    @@ignore
}

model top10000 {
    id    Int    @id @default(autoincrement())
    event Int
    name  String @db.VarChar(200)
    url   String @db.VarChar(200)

    @@index([event], map: "event")
    @@index([url], map: "url")
}

model translation {
    id          Int       @id @default(autoincrement())
    name        String    @unique(map: "name") @db.VarChar(200)
    zh_name     String?   @db.VarChar(200)
    label       String    @db.VarChar(30)
    created     DateTime? @default(now()) @db.Timestamp(0)
    modified    DateTime? @db.Timestamp(0)
    modified_by Int?
    published   Int       @default(0) @db.TinyInt

    @@index([zh_name(length: 191)], map: "zh_name")
}

model translation_track {
    id            Int       @id @default(autoincrement())
    page_id       String    @db.VarChar(11)
    page_type     String    @db.VarChar(30)
    modified      DateTime? @db.Timestamp(0)
    zh_history_id Int?
    status        String    @default("P") @db.Char(1)

    @@unique([page_id, page_type], map: "page_id")
}

model translation_track_history {
    id           Int       @id @default(autoincrement())
    track_id     Int
    insert_by    Int
    insert_time  DateTime  @default(now()) @db.Timestamp(0)
    checked_by   Int?
    checked_time DateTime? @db.Timestamp(0)
    zh_value     String?   @db.VarChar(50)
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tweets {
    id             Int
    event_id       Int?
    hashtag        String?  @db.VarChar(200)
    tweet_id       BigInt   @db.UnsignedBigInt
    tweet_text     String   @db.VarChar(300)
    tweeted_at     DateTime @db.DateTime(0)
    source         String?  @db.VarChar(700)
    published      Boolean  @default(true)
    geo_lat        Decimal? @db.Decimal(10, 5)
    geo_long       Decimal? @db.Decimal(10, 5)
    retweet_count  Int?
    favorite_count Int?
    user_id        BigInt   @db.UnsignedBigInt
    image_url      String?  @db.VarChar(200)
    video_url      String?  @db.VarChar(200)
    lang           String?  @db.VarChar(50)
    is_retweet     BigInt   @db.UnsignedBigInt
    is_rest        Boolean
    created        DateTime @default(now()) @db.Timestamp(0)
    url            String?  @db.VarChar(2000)
    api            String?  @db.VarChar(25)
    image_flag     String?  @default("1") @db.VarChar(50)
    image_check    Boolean? @default(false)

    @@index([event_id], map: "event_id")
    @@index([event_id, tweeted_at], map: "event_id_tweeted_at")
    @@index([hashtag], map: "hashtag")
    @@index([image_flag], map: "image_flag")
    @@index([image_url], map: "image_url")
    @@index([is_rest], map: "is_rest")
    @@index([is_retweet], map: "is_retweet")
    @@index([published], map: "published")
    @@index([retweet_count], map: "retweet_count")
    @@index([tweet_id], map: "tweet_id")
    @@index([tweeted_at], map: "tweeted_at")
    @@index([user_id], map: "user_id")
    @@ignore
}

model twitter_user {
    user_id           BigInt   @id @unique(map: "user_id_2") @db.UnsignedBigInt
    screen_name       String   @db.VarChar(20)
    name              String?  @db.VarChar(20)
    profile_image_url String?  @db.VarChar(200)
    location          String?  @db.VarChar(30)
    url               String?  @db.VarChar(200)
    description       String?  @db.VarChar(200)
    published         Boolean  @default(true)
    created_at        DateTime @db.DateTime(0)
    followers_count   Int?     @db.UnsignedInt
    friends_count     Int?     @db.UnsignedInt
    statuses_count    Int?     @db.UnsignedInt
    time_zone         String?  @db.VarChar(40)
    listed_count      Int?     @db.UnsignedInt
    favourites_count  Int?     @db.UnsignedInt
    verified          Boolean
    last_update       DateTime @default(now()) @db.Timestamp(0)

    @@index([created_at], map: "created_at")
    @@index([description], map: "description")
    @@index([last_update], map: "last_update")
    @@index([published], map: "published")
    @@index([screen_name], map: "screen_name")
    @@index([user_id], map: "user_id")
    @@index([name], map: "user_name")
}

model url {
    id         String    @id @db.Char(150)
    metadata   String?   @db.VarChar(4000)
    created    DateTime  @default(now()) @db.Timestamp(0)
    modified   DateTime? @db.Timestamp(0)
    createdby  Int
    modifiedby Int?
}

model url_validation {
    id              Int       @id @default(autoincrement())
    entity_type     String    @db.VarChar(255)
    entity_id       Int
    url             String    @unique(map: "url") @db.VarChar(300)
    created         DateTime? @default(now()) @db.Timestamp(0)
    is_valid        Int       @db.TinyInt
    last_validation DateTime? @db.Timestamp(0)
    status_code     String?   @db.VarChar(255)
    count           Int?      @default(1)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
    id                                                                   Int                            @id @default(autoincrement())
    bts_id                                                               Int?
    email                                                                String?                        @unique(map: "email_UNIQUE") @db.VarChar(100)
    phone                                                                String?                        @db.VarChar(50)
    name                                                                 String?                        @db.VarChar(100)
    about                                                                String?                        @db.VarChar(200)
    membership                                                           Int?
    company                                                              Int?
    profile                                                              String?                        @db.VarChar(4000)
    linkedin_profile                                                     String?                        @db.LongText
    city                                                                 Int?
    country                                                              String?                        @db.VarChar(2)
    gender                                                               String?                        @db.Char(2)
    date_of_birth                                                        DateTime?                      @db.Date
    industry_id                                                          String?                        @db.VarChar(400)
    geo_lat                                                              Decimal?                       @db.Decimal(10, 6)
    geo_long                                                             Decimal?                       @db.Decimal(10, 6)
    last_sent_date                                                       DateTime?                      @db.Date
    unsubscribe                                                          Int?                           @default(1) @db.TinyInt
    facebook_id                                                          String?                        @db.VarChar(100)
    linkedin_id                                                          String?                        @db.VarChar(100)
    twitter_id                                                           String?                        @db.VarChar(100)
    google_id                                                            String?                        @db.VarChar(100)
    wikipedia                                                            String?                        @db.VarChar(100)
    website                                                              String?                        @db.VarChar(100)
    euser                                                                Boolean?
    published                                                            Boolean?                       @default(false)
    email_active                                                         DateTime?                      @db.Timestamp(0)
    created                                                              DateTime?                      @default(now()) @db.Timestamp(0)
    createdby                                                            Int?
    modified                                                             DateTime?                      @db.Timestamp(0)
    modifiedby                                                           Int?
    password                                                             String?                        @db.VarChar(255)
    verified                                                             Boolean?                       @default(false)
    user_company                                                         String?                        @db.VarChar(100)
    designation                                                          String?                        @db.VarChar(100)
    designation_id                                                       Int?
    biz_type                                                             String?                        @db.VarChar(50)
    google_profile                                                       String?                        @db.VarChar(4000)
    reminder                                                             Int                            @default(1) @db.TinyInt
    source                                                               String?                        @db.VarChar(100)
    profile_picture                                                      String?                        @db.Char(175)
    show_profile                                                         Boolean?                       @default(true)
    autointroduce                                                        Boolean?                       @default(false)
    profile_score                                                        Int?                           @default(0)
    notification                                                         Int?                           @default(111)
    url                                                                  String?                        @unique(map: "url_2") @db.VarChar(100)
    email_verified                                                       DateTime?                      @db.DateTime(0)
    phone_verified                                                       DateTime?                      @db.Timestamp(0)
    profile_completed                                                    DateTime?                      @db.DateTime(0)
    profile_modified                                                     DateTime?                      @db.Timestamp(0)
    profile_verified                                                     DateTime?                      @db.DateTime(0)
    crawl_status                                                         Int?                           @default(0) @db.TinyInt
    profile_page                                                         Int?                           @default(0) @db.TinyInt
    total_event_attend                                                   Int?
    total_event_speak                                                    Int?
    last_active                                                          DateTime?                      @db.Timestamp(0)
    ip_address                                                           String?                        @db.Char(15)
    profile_score_completed                                              Int?
    speaker_profile_score                                                Int?
    language                                                             String?                        @default("en") @db.VarChar(10)
    u_phone                                                              String?                        @unique(map: "u_phone") @db.VarChar(50)
    publicid                                                             String?                        @db.VarChar(50)
    odash_activeness                                                     Int?
    spam_flag                                                            Int?
    last_flagged                                                         DateTime?                      @db.Timestamp(0)
    spam_score                                                           Int?
    ad_audience_ad_audience_createdbyTouser                              ad_audience[]                  @relation("ad_audience_createdbyTouser")
    ad_audience_ad_audience_modifiedbyTouser                             ad_audience[]                  @relation("ad_audience_modifiedbyTouser")
    ad_budget_history                                                    ad_budget_history[]
    ad_campaign_ad_campaign_createdbyTouser                              ad_campaign[]                  @relation("ad_campaign_createdbyTouser")
    ad_campaign_ad_campaign_modifiedbyTouser                             ad_campaign[]                  @relation("ad_campaign_modifiedbyTouser")
    agenda_follow                                                        agenda_follow[]
    alternate_contacts                                                   alternate_contacts[]
    app                                                                  app[]
    badge_setup_badge_setup_created_byTouser                             badge_setup[]                  @relation("badge_setup_created_byTouser")
    badge_setup_badge_setup_modified_byTouser                            badge_setup[]                  @relation("badge_setup_modified_byTouser")
    badge_type_badge_type_created_byTouser                               badge_type[]                   @relation("badge_type_created_byTouser")
    badge_type_badge_type_modified_byTouser                              badge_type[]                   @relation("badge_type_modified_byTouser")
    board_access_board_access_user_idTouser                              board_access[]                 @relation("board_access_user_idTouser")
    board_access_board_access_modified_byTouser                          board_access[]                 @relation("board_access_modified_byTouser")
    board_access_board_access_created_byTouser                           board_access[]                 @relation("board_access_created_byTouser")
    campaign_feedback_campaign_feedback_created_byTouser                 campaign_feedback[]            @relation("campaign_feedback_created_byTouser")
    campaign_feedback_campaign_feedback_modified_byTouser                campaign_feedback[]            @relation("campaign_feedback_modified_byTouser")
    campaign_pool_campaign_pool_userTouser                               campaign_pool[]                @relation("campaign_pool_userTouser")
    campaign_tracker_campaign_tracker_escalatedtoTouser                  campaign_tracker[]             @relation("campaign_tracker_escalatedtoTouser")
    campaign_tracker_campaign_tracker_sourceTouser                       campaign_tracker[]             @relation("campaign_tracker_sourceTouser")
    claim_claim_userTouser                                               claim[]                        @relation("claim_userTouser")
    claim_claim_approvedbyTouser                                         claim[]                        @relation("claim_approvedbyTouser")
    claim_claim_requested_fromTouser                                     claim[]                        @relation("claim_requested_fromTouser")
    company_company_account_managerTouser                                company[]                      @relation("company_account_managerTouser")
    company_follow                                                       company_follow[]
    company_tag_company_tag_createdbyTouser                              company_tag[]                  @relation("company_tag_createdbyTouser")
    company_tag_company_tag_modifiedbyTouser                             company_tag[]                  @relation("company_tag_modifiedbyTouser")
    company_user                                                         company_user[]
    conv_member_conv_member_userTouser                                   conv_member[]                  @relation("conv_member_userTouser")
    conv_message                                                         conv_message[]
    credit_note                                                          credit_note[]
    credits_config_credits_config_created_byTouser                       credits_config[]               @relation("credits_config_created_byTouser")
    credits_config_credits_config_modified_byTouser                      credits_config[]               @relation("credits_config_modified_byTouser")
    crons                                                                crons[]
    designation45                                                        designation[]
    document_tracker_document_tracker_userTouser                         document_tracker[]             @relation("document_tracker_userTouser")
    enquiry_enquiry_userTouser                                           enquiry[]                      @relation("enquiry_userTouser")
    escalation_tracking                                                  escalation_tracking[]
    event_exhibitor_event_exhibitor_created_byTouser                     event_exhibitor[]              @relation("event_exhibitor_created_byTouser")
    event_exhibitor_event_exhibitor_modified_byTouser                    event_exhibitor[]              @relation("event_exhibitor_modified_byTouser")
    event_feed_comments_event_feed_comments_userTouser                   event_feed_comments[]          @relation("event_feed_comments_userTouser")
    event_feed_likes_event_feed_likes_userTouser                         event_feed_likes[]             @relation("event_feed_likes_userTouser")
    event_feedback                                                       event_feedback[]
    event_feedback_comments_event_feedback_comments_userTouser           event_feedback_comments[]      @relation("event_feedback_comments_userTouser")
    event_feedback_likes_event_feedback_likes_userTouser                 event_feedback_likes[]         @relation("event_feedback_likes_userTouser")
    event_feedback_media_event_feedback_media_created_byTouser           event_feedback_media[]         @relation("event_feedback_media_created_byTouser")
    event_feedback_media_event_feedback_media_modified_byTouser          event_feedback_media[]         @relation("event_feedback_media_modified_byTouser")
    event_feeds_event_feeds_userTouser                                   event_feeds[]                  @relation("event_feeds_userTouser")
    event_settings_event_settings_created_byTouser                       event_settings[]               @relation("event_settings_created_byTouser")
    event_settings_event_settings_modified_byTouser                      event_settings[]               @relation("event_settings_modified_byTouser")
    event_speaker                                                        event_speaker[]
    exhibitor_connects_exhibitor_connects_userTouser                     exhibitor_connects[]           @relation("exhibitor_connects_userTouser")
    faq_likes_faq_likes_userTouser                                       faq_likes[]                    @relation("faq_likes_userTouser")
    floor_analytics                                                      floor_analytics[]
    floor_contacts_floor_contacts_created_byTouser                       floor_contacts[]               @relation("floor_contacts_created_byTouser")
    floor_contacts_floor_contacts_modified_byTouser                      floor_contacts[]               @relation("floor_contacts_modified_byTouser")
    floor_contacts_floor_contacts_user_idTouser                          floor_contacts[]               @relation("floor_contacts_user_idTouser")
    follow_user_follow_user_user_idTouser                                follow_user[]                  @relation("follow_user_user_idTouser")
    follow_user_follow_user_follower_idTouser                            follow_user[]                  @relation("follow_user_follower_idTouser")
    ga_user_ga_user_userTouser                                           ga_user[]                      @relation("ga_user_userTouser")
    group_follow                                                         group_follow[]
    invite_invite_sender_idTouser                                        invite[]                       @relation("invite_sender_idTouser")
    invite_invite_receiver_idTouser                                      invite[]                       @relation("invite_receiver_idTouser")
    leads_leads_user_idTouser                                            leads[]                        @relation("leads_user_idTouser")
    leads_leads_account_managerTouser                                    leads[]                        @relation("leads_account_managerTouser")
    listing_follow_page                                                  listing_follow_page[]
    marketing_credits_marketing_credits_userTouser                       marketing_credits[]            @relation("marketing_credits_userTouser")
    organizer_follow                                                     organizer_follow[]
    pending_checkins                                                     pending_checkins[]
    report_issue                                                         report_issue[]
    request_user_request_user_userTouser                                 request_user[]                 @relation("request_user_userTouser")
    service_agreement_service_agreement_created_byTouser                 service_agreement[]            @relation("service_agreement_created_byTouser")
    service_agreement_service_agreement_last_modified_byTouser           service_agreement[]            @relation("service_agreement_last_modified_byTouser")
    service_agreement_service_agreement_service_byTouser                 service_agreement[]            @relation("service_agreement_service_byTouser")
    service_agreement_service_agreement_userTouser                       service_agreement[]            @relation("service_agreement_userTouser")
    service_agreement_service_service_agreement_service_userTouser       service_agreement_service[]    @relation("service_agreement_service_userTouser")
    service_checklist                                                    service_checklist[]
    service_payment_receipt                                              service_payment_receipt[]
    service_subscription_service_subscription_userTouser                 service_subscription[]         @relation("service_subscription_userTouser")
    service_subscription_history_service_subscription_history_userTouser service_subscription_history[] @relation("service_subscription_history_userTouser")
    social_profile                                                       social_profile[]
    spammessage_spammessage_senderTouser                                 spammessage[]                  @relation("spammessage_senderTouser")
    spammessage_spammessage_receiverTouser                               spammessage[]                  @relation("spammessage_receiverTouser")
    subscribe                                                            subscribe[]
    subscription                                                         subscription[]
    city_user_cityTocity                                                 city?                          @relation("user_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_ibfk_1")
    country_user_countryTocountry                                        country?                       @relation("user_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_ibfk_2")
    company_user_companyTocompany                                        company?                       @relation("user_companyTocompany", fields: [company], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_ibfk_3")
    user_collections_user_collections_userTouser                         user_collections[]             @relation("user_collections_userTouser")
    user_consent                                                         user_consent[]
    user_devices                                                         user_devices[]
    user_enquiry_user_enquiry_userTouser                                 user_enquiry[]                 @relation("user_enquiry_userTouser")
    user_history                                                         user_history[]
    user_interests_user_interests_userTouser                             user_interests[]               @relation("user_interests_userTouser")
    user_notes_user_notes_userTouser                                     user_notes[]                   @relation("user_notes_userTouser")
    user_notification_user_notification_userTouser                       user_notification[]            @relation("user_notification_userTouser")
    user_otp                                                             user_otp[]
    user_subscription                                                    user_subscription[]
    user_unsubscribe_user_unsubscribe_userTouser                         user_unsubscribe[]             @relation("user_unsubscribe_userTouser")
    vendor_vendor_parent_userTouser                                      vendor[]                       @relation("vendor_parent_userTouser")
    vendor_vendor_userTouser                                             vendor[]                       @relation("vendor_userTouser")
    venue_category_mapping_venue_category_mapping_created_byTouser       venue_category_mapping[]       @relation("venue_category_mapping_created_byTouser")
    venue_category_mapping_venue_category_mapping_modified_byTouser      venue_category_mapping[]       @relation("venue_category_mapping_modified_byTouser")
    venue_feedback                                                       venue_feedback[]
    venue_feedback_comments_venue_feedback_comments_userTouser           venue_feedback_comments[]      @relation("venue_feedback_comments_userTouser")
    venue_follow                                                         venue_follow[]
    visitor_meetings                                                     visitor_meetings[]
    webinar_ledger                                                       webinar_ledger[]
    whitelabel_conf                                                      whitelabel_conf[]

    @@index([autointroduce], map: "autointroduce")
    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([crawl_status], map: "crawl_status")
    @@index([email_verified, profile_completed, profile_verified], map: "email_verified")
    @@index([euser], map: "euser")
    @@index([facebook_id], map: "facebook_id")
    @@index([company], map: "fk_user_company")
    @@index([bts_id], map: "fk_user_user1")
    @@index([google_id], map: "google_id")
    @@index([industry_id], map: "industry_id")
    @@index([ip_address, created], map: "ip_address")
    @@index([last_active], map: "last_active")
    @@index([last_sent_date], map: "last_sent_date")
    @@index([linkedin_id], map: "linkedin_id")
    @@index([notification], map: "notification")
    @@index([password], map: "password")
    @@index([phone], map: "phone")
    @@index([phone_verified], map: "phone_verified")
    @@index([profile_modified], map: "profile_modified")
    @@index([profile_page], map: "profile_page")
    @@index([profile_page, published], map: "profile_page_2")
    @@index([profile_picture], map: "profile_picture")
    @@index([profile_score], map: "profile_score")
    @@index([published], map: "published")
    @@index([reminder], map: "reminder")
    @@index([show_profile], map: "show_profile")
    @@index([show_profile, published], map: "show_profile_2")
    @@index([speaker_profile_score], map: "speaker_profile_score")
    @@index([total_event_attend], map: "total_event_attend")
    @@index([total_event_speak], map: "total_event_speak")
    @@index([twitter_id], map: "twitter_id")
    @@index([unsubscribe], map: "unsubscribe")
    @@index([wikipedia], map: "wikipedia")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user1 {
    id                      Int       @id @default(autoincrement())
    bts_id                  Int?
    email                   String?   @unique(map: "email_UNIQUE") @db.VarChar(100)
    phone                   String?   @db.VarChar(50)
    name                    String?   @db.VarChar(100)
    about                   String?   @db.VarChar(200)
    company                 Int?
    profile                 String?   @db.VarChar(4000)
    linkedin_profile        String?   @db.LongText
    city                    Int?
    country                 String?   @db.VarChar(2)
    gender                  String?   @db.Char(2)
    date_of_birth           DateTime? @db.Date
    industry_id             String?   @db.VarChar(400)
    geo_lat                 Decimal?  @db.Decimal(10, 6)
    geo_long                Decimal?  @db.Decimal(10, 6)
    last_sent_date          DateTime? @db.Date
    unsubscribe             Int?      @default(1) @db.TinyInt
    facebook_id             String?   @db.VarChar(100)
    linkedin_id             String?   @db.VarChar(100)
    twitter_id              String?   @db.VarChar(100)
    google_id               String?   @db.VarChar(100)
    wikipedia               String?   @db.VarChar(100)
    website                 String?   @db.VarChar(100)
    euser                   Boolean?
    published               Boolean?  @default(false)
    created                 DateTime? @default(now()) @db.Timestamp(0)
    createdby               Int?
    modified                DateTime? @db.Timestamp(0)
    modifiedby              Int?
    password                String?   @db.VarChar(255)
    verified                Boolean?  @default(false)
    user_company            String?   @db.VarChar(100)
    designation             String?   @db.VarChar(100)
    google_profile          String?   @db.VarChar(4000)
    reminder                Int       @default(1) @db.TinyInt
    source                  String?   @db.VarChar(100)
    profile_picture         String?   @db.Char(175)
    show_profile            Boolean?  @default(true)
    autointroduce           Boolean?  @default(false)
    profile_score           Int?      @default(0)
    notification            Int?      @default(111)
    url                     String?   @unique(map: "url_2") @db.VarChar(100)
    email_verified          DateTime? @db.DateTime(0)
    phone_verified          DateTime? @db.Timestamp(0)
    profile_completed       DateTime? @db.DateTime(0)
    profile_modified        DateTime? @db.Timestamp(0)
    profile_verified        DateTime? @db.DateTime(0)
    crawl_status            Int?      @default(0) @db.TinyInt
    profile_page            Int?      @default(0) @db.TinyInt
    total_event_attend      Int?
    total_event_speak       Int?
    last_active             DateTime? @db.Timestamp(0)
    ip_address              String?   @db.Char(15)
    profile_score_completed Int?

    @@index([autointroduce], map: "autointroduce")
    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([crawl_status], map: "crawl_status")
    // @@index([designation], map: "designation")
    @@index([email_verified, profile_completed, profile_verified], map: "email_verified")
    @@index([euser], map: "euser")
    @@index([facebook_id], map: "facebook_id")
    @@index([company], map: "fk_user_company")
    @@index([bts_id], map: "fk_user_user1")
    @@index([google_id], map: "google_id")
    @@index([industry_id], map: "industry_id")
    @@index([last_active], map: "last_active")
    @@index([last_sent_date], map: "last_sent_date")
    @@index([linkedin_id], map: "linkedin_id")
    @@index([notification], map: "notification")
    @@index([password], map: "password")
    @@index([phone], map: "phone")
    @@index([phone_verified], map: "phone_verified")
    @@index([profile_modified], map: "profile_modified")
    @@index([profile_page], map: "profile_page")
    @@index([profile_page, published], map: "profile_page_2")
    @@index([profile_picture], map: "profile_picture")
    @@index([profile_score], map: "profile_score")
    @@index([published], map: "published")
    @@index([reminder], map: "reminder")
    @@index([show_profile], map: "show_profile")
    @@index([total_event_attend], map: "total_event_attend")
    @@index([total_event_speak], map: "total_event_speak")
    @@index([twitter_id], map: "twitter_id")
    @@index([unsubscribe], map: "unsubscribe")
    @@index([wikipedia], map: "wikipedia")
}

model user_activity {
    id           Int       @id @default(autoincrement())
    user         Int       @unique(map: "user")
    last_active  DateTime? @db.DateTime(0)
    last_engage  DateTime? @db.DateTime(0)
    last_connect DateTime? @db.DateTime(0)
    created      DateTime? @db.DateTime(0)
    ga           String?   @map("_ga") @db.VarChar(50)
    gid          String?   @map("_gid") @db.VarChar(50)

    @@index([last_active, last_engage, last_connect, created, ga, gid], map: "last_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_bkp {
    id                      Int       @id @default(autoincrement())
    bts_id                  Int?
    email                   String?   @unique(map: "email_UNIQUE") @db.VarChar(100)
    phone                   String?   @db.VarChar(50)
    name                    String?   @db.VarChar(100)
    about                   String?   @db.VarChar(200)
    company                 Int?
    profile                 String?   @db.VarChar(4000)
    linkedin_profile        String?   @db.LongText
    city                    Int?
    country                 String?   @db.VarChar(2)
    gender                  String?   @db.Char(2)
    date_of_birth           DateTime? @db.Date
    industry_id             String?   @db.VarChar(400)
    geo_lat                 Decimal?  @db.Decimal(10, 6)
    geo_long                Decimal?  @db.Decimal(10, 6)
    last_sent_date          DateTime? @db.Date
    unsubscribe             Int?      @default(1) @db.TinyInt
    facebook_id             String?   @db.VarChar(100)
    linkedin_id             String?   @db.VarChar(100)
    twitter_id              String?   @db.VarChar(100)
    google_id               String?   @db.VarChar(100)
    wikipedia               String?   @db.VarChar(100)
    website                 String?   @db.VarChar(100)
    euser                   Boolean?
    published               Boolean?  @default(false)
    created                 DateTime? @default(now()) @db.Timestamp(0)
    createdby               Int?
    modified                DateTime? @db.Timestamp(0)
    modifiedby              Int?
    password                String?   @db.VarChar(255)
    verified                Boolean?  @default(false)
    user_company            String?   @db.VarChar(100)
    designation             String?   @db.VarChar(100)
    google_profile          String?   @db.VarChar(4000)
    reminder                Int       @default(1) @db.TinyInt
    source                  String?   @db.VarChar(100)
    profile_picture         String?   @db.Char(175)
    show_profile            Boolean?  @default(true)
    autointroduce           Boolean?  @default(false)
    profile_score           Int?      @default(0)
    notification            Int?      @default(111)
    url                     String?   @unique(map: "url_2") @db.VarChar(100)
    email_verified          DateTime? @db.DateTime(0)
    phone_verified          DateTime? @db.Timestamp(0)
    profile_completed       DateTime? @db.DateTime(0)
    profile_modified        DateTime? @db.Timestamp(0)
    profile_verified        DateTime? @db.DateTime(0)
    crawl_status            Int?      @default(0) @db.TinyInt
    profile_page            Int?      @default(0) @db.TinyInt
    total_event_attend      Int?
    total_event_speak       Int?
    last_active             DateTime? @db.Timestamp(0)
    ip_address              String?   @db.Char(15)
    profile_score_completed Int?
    speaker_profile_score   Int?
    language                String?   @default("en") @db.VarChar(10)
    u_phone                 String?   @unique(map: "u_phone") @db.VarChar(50)
    publicid                String?   @db.VarChar(50)

    @@index([autointroduce], map: "autointroduce")
    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([crawl_status], map: "crawl_status")
    @@index([designation], map: "designation")
    @@index([email_verified, profile_completed, profile_verified], map: "email_verified")
    @@index([euser], map: "euser")
    @@index([facebook_id], map: "facebook_id")
    @@index([company], map: "fk_user_company")
    @@index([bts_id], map: "fk_user_user1")
    @@index([google_id], map: "google_id")
    @@index([industry_id], map: "industry_id")
    @@index([last_active], map: "last_active")
    @@index([last_sent_date], map: "last_sent_date")
    @@index([linkedin_id], map: "linkedin_id")
    @@index([notification], map: "notification")
    @@index([password], map: "password")
    @@index([phone], map: "phone")
    @@index([phone_verified], map: "phone_verified")
    @@index([profile_modified], map: "profile_modified")
    @@index([profile_page], map: "profile_page")
    @@index([profile_page, published], map: "profile_page_2")
    @@index([profile_picture], map: "profile_picture")
    @@index([profile_score], map: "profile_score")
    @@index([published], map: "published")
    @@index([reminder], map: "reminder")
    @@index([show_profile], map: "show_profile")
    @@index([speaker_profile_score], map: "speaker_profile_score")
    @@index([total_event_attend], map: "total_event_attend")
    @@index([total_event_speak], map: "total_event_speak")
    @@index([twitter_id], map: "twitter_id")
    @@index([unsubscribe], map: "unsubscribe")
    @@index([wikipedia], map: "wikipedia")
}

model user_booking {
    id                                    Int            @id @default(autoincrement())
    ga_user                               Int
    edition_id                            Int?
    event_id                              Int?
    item_type                             String         @db.Char(4)
    item_id                               Int?
    item_group                            String         @db.VarChar(10)
    visitor_id                            Int?
    source                                String?        @db.VarChar(150)
    booking_status                        String         @db.VarChar(20)
    arrival                               DateTime?      @db.DateTime(0)
    departure                             DateTime?      @db.DateTime(0)
    booking_ref                           BigInt?
    booking_details                       String?        @db.VarChar(500)
    created                               DateTime       @default(now()) @db.DateTime(0)
    modified                              DateTime?      @db.DateTime(0)
    modified_details                      String?        @db.Text
    ga_user_user_booking_ga_userToga_user ga_user        @relation("user_booking_ga_userToga_user", fields: [ga_user], references: [id], onUpdate: Restrict, map: "user_booking_ibfk_1")
    event_edition                         event_edition? @relation(fields: [edition_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_booking_ibfk_2")
    event                                 event?         @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_booking_ibfk_3")
    event_visitor                         event_visitor? @relation(fields: [visitor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_booking_ibfk_4")
    booking_type                          booking_type   @relation(fields: [item_type], references: [item_type], onUpdate: Restrict, map: "user_booking_ibfk_5")

    @@unique([ga_user, item_group, edition_id], map: "ga_user_2")
    @@index([edition_id], map: "edition")
    @@index([event_id], map: "event")
    @@index([ga_user], map: "ga_user")
    @@index([item_type], map: "item_type")
    @@index([visitor_id], map: "visitor_id")
}

model user_bucket {
    id       Int       @id @default(autoincrement())
    sender   Int
    receiver Int
    event    Int
    status   Boolean?
    created  DateTime? @default(now()) @db.Timestamp(0)

    @@index([created], map: "created")
    @@index([receiver], map: "receiver")
    @@index([sender], map: "sender")
}

model user_collections {
    id                               Int       @id @default(autoincrement())
    name                             String    @db.VarChar(200)
    user                             Int
    search_string                    String    @db.Text
    similar_flag                     Boolean   @default(false)
    published                        Boolean   @default(true)
    created                          DateTime  @default(now()) @db.Timestamp(0)
    modified                         DateTime? @db.Timestamp(0)
    private                          Boolean   @default(false)
    last_view                        DateTime? @db.DateTime(0)
    notification                     Boolean   @default(true)
    user_user_collections_userTouser user      @relation("user_collections_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "user_collections_ibfk_1")

    @@index([user], map: "user")
}

model user_consent {
    id             Int       @id @default(autoincrement())
    ga_id          String?   @db.VarChar(200)
    user_id        Int?
    consent_type   Int       @default(0)
    consent_date   DateTime? @db.Timestamp(0)
    policy_version String?   @db.VarChar(200)
    user           user?     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_consent_ibfk_1")

    @@index([ga_id, user_id], map: "ga_id")
    @@index([user_id], map: "user_id")
}

model user_contact {
    id           Int       @id @default(autoincrement())
    user         Int
    contact      Int
    connect_id   Int
    connect_type String    @db.VarChar(10)
    bcard        Int?
    created      DateTime? @default(now()) @db.Timestamp(0)
    modified     DateTime? @db.DateTime(0)

    @@unique([user, contact], map: "sender_2")
    @@index([created], map: "created")
    @@index([modified], map: "modified")
}

model user_data {
    id        Int      @id @default(autoincrement())
    user_id   Int
    data_type String   @db.VarChar(50)
    title     String   @db.VarChar(50)
    value     String?  @db.VarChar(5000)
    published Boolean? @default(true)
    created   DateTime @default(now()) @db.Timestamp(0)
    user      Int?
    param     String?  @db.VarChar(50)
    confirmed Int?
    source    String?  @db.VarChar(500)

    @@index([user_id], map: "user_id")
    @@index([value(length: 3072)], map: "value")
}

model user_data_request {
    id         Int      @id @default(autoincrement())
    type       String   @db.VarChar(16)
    user_id    Int
    created    DateTime @default(now()) @db.DateTime(0)
    created_by Int
    status     Int      @db.TinyInt
}

model user_device {
    id                                   Int       @id @default(autoincrement())
    ga_user                              Int
    token                                String    @db.VarChar(200)
    onesignal_id                         String    @unique(map: "onesignal_id") @db.VarChar(200)
    device_uuid                          String    @unique(map: "device_uuid") @db.VarChar(200)
    device_type                          String    @db.VarChar(10)
    device_os                            String    @db.VarChar(10)
    created                              DateTime  @default(now()) @db.Timestamp(0)
    subscribed                           DateTime? @db.Timestamp(0)
    unsubscribed                         DateTime? @db.Timestamp(0)
    published                            Int       @default(1) @db.TinyInt
    ga_user_user_device_ga_userToga_user ga_user   @relation("user_device_ga_userToga_user", fields: [ga_user], references: [id], onUpdate: Restrict, map: "user_device_ibfk_1")

    @@index([ga_user], map: "ga_user")
}

model user_devices {
    id                Int                 @id @default(autoincrement())
    onesignal_id      String?             @db.VarChar(100)
    user_id           Int?
    user_token        String              @db.VarChar(200)
    device_id         String?             @db.VarChar(500)
    device_type       Int                 @default(0) @db.TinyInt
    device_model      String?             @db.VarChar(60)
    created           DateTime            @default(now()) @db.Timestamp(0)
    last_active       DateTime?           @db.Timestamp(0)
    version           String?             @db.VarChar(5)
    total_time_spent  Int?
    unsubscribe       Int?                @db.TinyInt
    login_status      Boolean?
    app_id            Int?
    ga_id             String?             @db.VarChar(128)
    device_city       Int?
    device_country    String?             @db.VarChar(10)
    session_count     Int?                @default(0)
    last_view         String?             @db.VarChar(500)
    modified          DateTime?           @db.DateTime(0)
    push_notification push_notification[]
    city              city?               @relation(fields: [device_city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "device_city_ibfk_3")
    country           country?            @relation(fields: [device_country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "device_country_ibfk_4")
    user              user?               @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_devices_ibfk_1")

    @@unique([app_id, onesignal_id], map: "app_id")
    @@index([created], map: "active_date")
    @@index([device_city], map: "device_city_ibfk_3")
    @@index([device_country], map: "device_country_ibfk_4")
    @@index([device_id], map: "device_id")
    @@index([onesignal_id], map: "onesignal_id")
    @@index([user_id], map: "user_id")
    @@index([version], map: "version")
}

model user_enquiry {
    id                                    Int      @id @default(autoincrement())
    company                               Int
    entity_type                           String   @db.VarChar(20)
    entity_id                             Int
    status                                Int      @default(0)
    user                                  Int
    created                               DateTime @db.DateTime(0)
    createdby                             Int
    source                                String   @db.VarChar(50)
    published                             Int
    interest                              String   @db.VarChar(20)
    company_user_enquiry_companyTocompany company  @relation("user_enquiry_companyTocompany", fields: [company], references: [id], onUpdate: Restrict, map: "comapny_fk")
    user_user_enquiry_userTouser          user     @relation("user_enquiry_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "user_fk")

    @@index([company], map: "comapny_fk")
    @@index([user], map: "user_fk")
}

model user_extend {
    id      Int      @id @default(autoincrement())
    user    Int
    created DateTime @default(now()) @db.DateTime(0)

    @@index([user], map: "user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_history {
    id                                    Int       @id @default(autoincrement())
    user_id                               Int
    created                               DateTime? @default(now()) @db.Timestamp(0)
    created_source                        String    @db.VarChar(50)
    entry_type                            Int?
    designation                           String?   @db.VarChar(100)
    company                               String?   @db.VarChar(200)
    city                                  Int?
    country                               String?   @db.Char(2)
    description                           String?   @db.VarChar(4000)
    date_from                             DateTime? @db.Date
    date_to                               DateTime? @db.Date
    user                                  user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_history_ibfk_1")
    city_user_history_cityTocity          city?     @relation("user_history_cityTocity", fields: [city], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_history_ibfk_2")
    country_user_history_countryTocountry country?  @relation("user_history_countryTocountry", fields: [country], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_history_ibfk_3")

    @@index([city], map: "city")
    @@index([country], map: "country")
    @@index([user_id], map: "user_id")
}

model user_images {
    id              Int      @id @default(autoincrement())
    user_id         Int?     @unique(map: "user_id_2")
    profile_picture String?  @db.VarChar(1000)
    cdn_url         String?  @db.VarChar(1000)
    created         DateTime @default(now()) @db.Timestamp(0)

    @@index([user_id], map: "user_id")
}

model user_interests {
    id                             Int       @id @default(autoincrement())
    user                           Int
    interest                       String?   @db.VarChar(50)
    value                          String?   @db.VarChar(200)
    created                        DateTime? @default(now()) @db.Timestamp(0)
    confirmed                      Boolean?  @default(false)
    modified                       DateTime? @db.Timestamp(0)
    primary_order                  Int?      @default(0)
    user_user_interests_userTouser user      @relation("user_interests_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "user_interests_ibfk_1")

    @@unique([user, interest, value], map: "user_2")
    @@index([confirmed], map: "confirmed")
    @@index([interest], map: "interest")
    @@index([user], map: "user")
}

model user_interests_bkp {
    id        Int       @id @default(autoincrement())
    user      Int
    interest  String?   @db.VarChar(50)
    value     String?   @db.VarChar(200)
    created   DateTime? @default(now()) @db.Timestamp(0)
    confirmed Boolean?  @default(false)
    modified  DateTime? @db.Timestamp(0)

    @@index([confirmed], map: "confirmed")
    @@index([interest], map: "interest")
    @@index([user], map: "user")
}

model user_notes {
    id                         Int       @id @default(autoincrement())
    user                       Int
    entity_type                String    @db.VarChar(10)
    entity_id                  Int
    created                    DateTime  @default(now()) @db.Timestamp(0)
    modified                   DateTime? @db.Timestamp(0)
    note                       String    @db.VarChar(200)
    published                  Boolean   @default(true)
    user_user_notes_userTouser user      @relation("user_notes_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "notes_to_user")

    @@index([entity_id], map: "entity_id")
    @@index([entity_type], map: "entity_type")
    @@index([user], map: "user")
}

model user_notification {
    id                                         Int       @id @default(autoincrement())
    ga_user                                    Int?
    channel                                    String    @db.VarChar(10)
    source                                     String    @db.VarChar(255)
    campaign                                   String    @db.VarChar(255)
    tracker                                    String?   @unique(map: "tracker") @db.VarChar(255)
    sent                                       DateTime  @default(now()) @db.Timestamp(0)
    expire                                     DateTime? @db.Timestamp(0)
    title                                      String?   @db.VarChar(255)
    body                                       String?   @db.VarChar(255)
    media                                      String?   @db.VarChar(255)
    url                                        String?   @db.VarChar(255)
    priority                                   String?   @db.VarChar(10)
    published                                  String    @db.VarChar(1)
    seen                                       DateTime? @db.Timestamp(0)
    click                                      DateTime? @db.Timestamp(0)
    user                                       Int?
    ga_user_user_notification_ga_userToga_user ga_user?  @relation("user_notification_ga_userToga_user", fields: [ga_user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_notification_ibfk_1")
    user_user_notification_userTouser          user?     @relation("user_notification_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_notification_ibfk_2")

    @@index([ga_user], map: "ga_user")
    @@index([user], map: "user_notification_ibfk_2")
}

model user_otp {
    id        Int       @id @default(autoincrement())
    created   DateTime  @default(now()) @db.Timestamp(0)
    user_id   Int
    channel   String    @db.VarChar(20)
    value     String    @db.VarChar(50)
    code      Int?
    type      String?   @db.VarChar(50)
    expire_ts DateTime? @db.Timestamp(0)
    expired   DateTime? @default(now()) @db.Timestamp(0)
    user      user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_user_id")

    @@index([user_id], map: "user_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_phone {
    user_id Int
    phone   String?   @db.VarChar(30)
    created DateTime? @default(now()) @db.Timestamp(0)

    @@ignore
}

model user_role {
    id          Int       @id @default(autoincrement())
    user_id     Int
    role_id     Int
    event_id    Int
    primary     Boolean?  @default(false)
    created     DateTime? @db.DateTime(0)
    modified    DateTime? @db.DateTime(0)
    delete_type Int?

    @@index([delete_type], map: "delete_type")
    @@index([event_id], map: "event_id")
    @@index([role_id], map: "role_id")
    @@index([user_id], map: "user_id")
}

model user_score_temp {
    id                   Int  @id @default(autoincrement())
    user_id              Int
    old_score            Int?
    new_score            Int?
    calculated_old_score Int?
}

model user_subscription {
    id         Int       @id @default(autoincrement())
    user_id    Int
    service_id Int
    start_date DateTime? @db.Date
    end_date   DateTime? @db.Date
    status     String    @db.VarChar(20)
    created    DateTime  @default(now()) @db.Timestamp(0)
    modified   DateTime? @db.Timestamp(0)
    in_mail    Int       @default(0)
    user       user      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_subscription_ibfk_1")
    services   services  @relation(fields: [service_id], references: [id], onUpdate: Restrict, map: "user_subscription_ibfk_2")

    @@index([service_id], map: "service_id")
    @@index([user_id], map: "user_id")
}

model user_tmp {
    id   Int     @id
    name String? @db.VarChar(50)
}

model user_tracking {
    id          Int      @id @default(autoincrement())
    user_id     Int
    device_type String   @db.VarChar(20)
    created     DateTime @default(now()) @db.Timestamp(0)
    source      String?  @db.VarChar(50)
    ip_addr     String?  @db.VarChar(20)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_unsubscribe {
    id                               Int       @id @default(autoincrement())
    user                             Int
    channel                          String    @db.VarChar(10)
    campaign                         String    @db.VarChar(100)
    status                           Int?      @db.TinyInt
    unsubscribe_time                 DateTime? @db.Timestamp(0)
    created                          DateTime  @default(now()) @db.Timestamp(0)
    modified                         DateTime? @db.Timestamp(0)
    user_user_unsubscribe_userTouser user      @relation("user_unsubscribe_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "user_unsubscribe_ibfk_1")

    @@index([channel], map: "channel")
    @@index([user], map: "user")
    @@index([user, channel, campaign], map: "user_2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_webinar_session {
    id                Int       @id @default(autoincrement())
    session_id        String    @unique(map: "sessiond") @db.VarChar(32)
    user_id           Int
    company_id        Int
    event_id          Int
    visitor_id        Int?
    created           DateTime? @db.Timestamp(0)
    lastping          DateTime  @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    timespent         Int       @default(0)
    status            Int?      @default(0) @db.TinyInt
    ip_address        String?   @db.VarChar(20)
    preview_timespent Int?      @default(0)
    validity          DateTime? @db.Timestamp(0)

    @@index([company_id], map: "company_id")
    @@index([created], map: "created")
    @@index([event_id], map: "event_id")
    @@index([lastping], map: "lastping")
    @@index([timespent], map: "timespent")
    @@index([user_id], map: "user_id")
}

model users {
    id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
    username               String?                  @unique(map: "username") @db.VarChar(30)
    status                 String?                  @db.VarChar(255)
    status_message         String?                  @db.VarChar(255)
    active                 Boolean                  @default(false)
    last_active            DateTime?                @db.DateTime(0)
    created_at             DateTime?                @db.DateTime(0)
    updated_at             DateTime?                @db.DateTime(0)
    deleted_at             DateTime?                @db.DateTime(0)
    auth_groups_users      auth_groups_users[]
    auth_identities        auth_identities[]
    auth_permissions_users auth_permissions_users[]
    auth_remember_tokens   auth_remember_tokens[]
}

model vendor {
    id                                              Int              @id @default(autoincrement())
    user                                            Int?
    name                                            String           @db.VarChar(20)
    login                                           String           @db.VarChar(50)
    password                                        String           @db.VarChar(50)
    parent_user                                     Int?
    role                                            String?          @db.VarChar(4000)
    published                                       String?          @db.VarChar(45)
    cc_action                                       cc_action[]
    cc_agent                                        cc_agent[]
    cc_escalation_cc_escalation_created_byTovendor  cc_escalation[]  @relation("cc_escalation_created_byTovendor")
    cc_escalation_cc_escalation_modified_byTovendor cc_escalation[]  @relation("cc_escalation_modified_byTovendor")
    event_reverify                                  event_reverify[]
    user_vendor_parent_userTouser                   user?            @relation("vendor_parent_userTouser", fields: [parent_user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_vendor_parent")
    user_vendor_userTouser                          user?            @relation("vendor_userTouser", fields: [user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_vendor_user")
    vendor_event                                    vendor_event[]

    @@index([parent_user], map: "fk_vendor_parent")
    @@index([user], map: "fk_vendor_user")
}

model vendor_event {
    id                Int     @id @default(autoincrement())
    vendor_id         Int?
    event_id          Int?
    source            String? @db.VarChar(30)
    sender_id         String? @db.VarChar(20)
    reminder_campaign Int?
    feedback_campaign Int?
    published         Int?
    note              String? @db.VarChar(55)
    percentage        Int?
    vendor            vendor? @relation(fields: [vendor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "vendor_event_ibfk_1")

    @@index([event_id], map: "event_id")
    @@index([sender_id], map: "sender_id")
    @@index([source], map: "source")
    @@index([vendor_id], map: "vendor_id")
}

model vendor_role {
    id            Int      @id @default(autoincrement())
    vendor        Int
    review_type   String   @db.VarChar(10)
    entity_type   String?  @db.VarChar(20)
    role          String   @db.VarChar(20)
    metadata      String?  @db.VarChar(2000)
    parent_vendor Int
    published     Int
    created       DateTime @default(now()) @db.Timestamp(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model venue {
    id                                                         Int                      @id @default(autoincrement())
    glast_synk                                                 DateTime?                @db.Timestamp(0)
    name                                                       String                   @db.VarChar(200)
    zh_name                                                    String?                  @db.VarChar(100)
    address                                                    String?                  @db.VarChar(500)
    postal_code                                                String?                  @db.VarChar(16)
    city                                                       Int
    country                                                    String                   @db.VarChar(2)
    geo_lat                                                    Decimal?                 @db.Decimal(10, 6)
    geo_long                                                   Decimal?                 @db.Decimal(10, 6)
    phone                                                      String?                  @db.VarChar(200)
    company                                                    Int?
    url                                                        String?                  @unique(map: "url") @db.Char(200)
    place_id                                                   String?                  @unique(map: "place_id") @db.VarChar(100)
    venue_type                                                 Int?
    area                                                       Decimal?                 @db.Decimal(10, 2)
    website                                                    String?                  @db.VarChar(200)
    membership                                                 Int?                     @default(0) @db.TinyInt
    map_image                                                  String?                  @db.VarChar(100)
    venue_logo                                                 Int?
    published                                                  Boolean                  @default(false)
    created                                                    DateTime                 @default(now()) @db.Timestamp(0)
    modified                                                   DateTime?                @default(now()) @db.Timestamp(0)
    createdby                                                  Int
    modifiedby                                                 Int?
    level                                                      Boolean?                 @default(false)
    score                                                      Float?                   @db.Float
    total_events                                               Int?                     @default(0)
    upcoming_events                                            Int?                     @default(0)
    search_level                                               String?                  @db.VarChar(200)
    google_synk                                                Boolean?                 @default(true)
    orig_venue                                                 Int?
    wrapper                                                    Int?
    small_wrapper                                              Int?
    largest_area                                               Float?
    no_meeting_rooms                                           Int?                     @db.TinyInt
    outdoor_space                                              Decimal?                 @db.Decimal(10, 2)
    indoor_space                                               Decimal?                 @db.Decimal(10, 2)
    nearest_airport                                            Float?                   @db.Float
    nearest_railway                                            Float?                   @db.Float
    nearest_metro                                              Float?                   @db.Float
    nearest_bus_stand                                          Float?                   @db.Float
    built_year                                                 Int?
    renovated_year                                             Int?
    profile_score                                              Float?
    average_rating                                             Float?                   @db.Float
    total_user                                                 Int?
    total_rating                                               Int?
    city_page                                                  Boolean
    country_page                                               Boolean
    claim_claim_venueTovenue                                   claim[]                  @relation("claim_venueTovenue")
    event_edition_event_edition_venueTovenue                   event_edition[]          @relation("event_edition_venueTovenue")
    freelist_data                                              freelist_data[]
    post_review                                                post_review[]
    pre_review                                                 pre_review[]
    city_venue_cityTocity                                      city                     @relation("venue_cityTocity", fields: [city], references: [id], onUpdate: Restrict, map: "fk_venue_city")
    company_venue_companyTocompany                             company?                 @relation("venue_companyTocompany", fields: [company], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_venue_company")
    country_venue_countryTocountry                             country                  @relation("venue_countryTocountry", fields: [country], references: [id], onUpdate: Restrict, map: "fk_venue_country")
    venue_category                                             venue_category?          @relation(fields: [venue_type], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "venue_ibfk_1")
    attachment_venue_venue_logoToattachment                    attachment?              @relation("venue_venue_logoToattachment", fields: [venue_logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "venue_ibfk_2")
    attachment_venue_wrapperToattachment                       attachment?              @relation("venue_wrapperToattachment", fields: [wrapper], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "venue_ibfk_3")
    attachment_venue_small_wrapperToattachment                 attachment?              @relation("venue_small_wrapperToattachment", fields: [small_wrapper], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "venue_ibfk_4")
    venue_category_mapping_venue_category_mapping_venueTovenue venue_category_mapping[] @relation("venue_category_mapping_venueTovenue")
    venue_data_venue_data_venueTovenue                         venue_data[]             @relation("venue_data_venueTovenue")
    venue_feedback                                             venue_feedback[]
    venue_follow                                               venue_follow[]

    @@index([city, published], map: "city")
    @@index([country, published], map: "country")
    @@index([city], map: "fk_venue_city")
    @@index([company], map: "fk_venue_company")
    @@index([country], map: "fk_venue_country")
    @@index([geo_lat], map: "geo_lat")
    @@index([geo_long], map: "geo_long")
    @@index([google_synk], map: "google_synk")
    @@index([largest_area], map: "largest_area")
    @@index([name], map: "name")
    @@index([orig_venue], map: "orig_venue")
    @@index([phone], map: "phone")
    @@index([published], map: "published")
    @@index([small_wrapper], map: "small_wrapper")
    @@index([total_events], map: "total_events")
    @@index([upcoming_events], map: "upcoming_events")
    @@index([venue_logo], map: "venue_logo")
    @@index([venue_type], map: "venue_type")
    @@index([venue_type, published], map: "venue_type_2")
    @@index([wrapper], map: "wrapper")
    @@index([zh_name], map: "zh_name")
}

model venue_category {
    id                     Int                      @id
    name                   String                   @unique(map: "name") @db.VarChar(100)
    url                    String?                  @unique(map: "url") @db.VarChar(100)
    created                DateTime                 @default(now()) @db.Timestamp(0)
    published              Boolean                  @default(true)
    modified               DateTime?                @db.DateTime(0)
    icon                   String?                  @db.VarChar(100)
    sub_venue              sub_venue[]
    venue                  venue[]
    venue_category_mapping venue_category_mapping[]
}

model venue_category_mapping {
    id                                            Int            @id @default(autoincrement())
    venue                                         Int
    category                                      Int
    published                                     Int            @default(1) @db.TinyInt
    created                                       DateTime       @default(now()) @db.DateTime(0)
    created_by                                    Int
    modified                                      DateTime?      @db.DateTime(0)
    modified_by                                   Int?
    venue_venue_category_mapping_venueTovenue     venue          @relation("venue_category_mapping_venueTovenue", fields: [venue], references: [id], onUpdate: Restrict, map: "venue_category_mapping_ibfk_1")
    venue_category                                venue_category @relation(fields: [category], references: [id], onUpdate: Restrict, map: "venue_category_mapping_ibfk_2")
    user_venue_category_mapping_created_byTouser  user           @relation("venue_category_mapping_created_byTouser", fields: [created_by], references: [id], onUpdate: Restrict, map: "venue_category_mapping_ibfk_3")
    user_venue_category_mapping_modified_byTouser user?          @relation("venue_category_mapping_modified_byTouser", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "venue_category_mapping_ibfk_4")

    @@unique([venue, category], map: "venue_2")
    @@index([category], map: "category")
    @@index([created_by], map: "created_by")
    @@index([modified_by], map: "modified_by")
    @@index([published], map: "published")
    @@index([venue, category, published, created_by, modified_by], map: "venue")
}

model venue_data {
    id                            Int       @id @default(autoincrement())
    venue                         Int?
    data_type                     String    @db.VarChar(10)
    title                         String    @db.VarChar(20)
    value                         String?   @db.VarChar(4000)
    published                     Boolean?  @default(false)
    created                       DateTime? @default(now()) @db.Timestamp(0)
    createdby                     Int
    modified                      DateTime? @db.Timestamp(0)
    modifiedby                    Int?
    venue_venue_data_venueTovenue venue?    @relation("venue_data_venueTovenue", fields: [venue], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "venue_data_ibfk_1")

    @@unique([venue, title], map: "venue")
    @@unique([venue, title], map: "venue_title")
    @@index([venue], map: "fk_venue_id")
}

model venue_feedback {
    id                      Int                       @id @default(autoincrement())
    venue_id                Int
    user_id                 Int
    rating                  Boolean?
    comment                 String?                   @db.VarChar(1000)
    venue_answer            Int?
    mark_spam               Boolean                   @default(false)
    confirmed_spam          String?                   @db.VarChar(20)
    push_to_top             DateTime?                 @db.Timestamp(0)
    published               Boolean                   @default(true)
    source                  String                    @db.VarChar(20)
    ip_addr                 String                    @db.Char(15)
    device                  String                    @db.VarChar(20)
    created                 DateTime                  @default(now()) @db.Timestamp(0)
    modified                DateTime?                 @db.Timestamp(0)
    venue                   venue                     @relation(fields: [venue_id], references: [id], onUpdate: Restrict, map: "venue_feedback_ibfk_1")
    user                    user                      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "venue_feedback_ibfk_2")
    venue_feedback_comments venue_feedback_comments[]
    venue_feedback_likes    venue_feedback_likes[]
    venue_feedback_media    venue_feedback_media[]

    @@index([published], map: "published")
    @@index([rating], map: "rating")
    @@index([user_id], map: "user_id")
    @@index([venue_id], map: "venue_id")
}

model venue_feedback_comments {
    id                                      Int            @id @default(autoincrement())
    feedback_id                             Int
    user                                    Int
    published                               Boolean        @default(true)
    comment                                 String         @db.VarChar(1000)
    from_contact                            Boolean?
    created                                 DateTime       @default(now()) @db.Timestamp(0)
    modified                                DateTime?      @db.Timestamp(0)
    venue_feedback                          venue_feedback @relation(fields: [feedback_id], references: [id], onUpdate: Restrict, map: "venue_feedback_comments_ibfk_1")
    user_venue_feedback_comments_userTouser user           @relation("venue_feedback_comments_userTouser", fields: [user], references: [id], onUpdate: Restrict, map: "venue_feedback_comments_ibfk_2")

    @@index([feedback_id], map: "feedback_id")
    @@index([user], map: "user")
}

model venue_feedback_likes {
    id                                            Int            @id @default(autoincrement())
    feedback_id                                   Int
    ga_user                                       Int
    status                                        Int
    published                                     Boolean
    created                                       DateTime       @default(now()) @db.Timestamp(0)
    modified                                      DateTime?      @db.Timestamp(0)
    venue_feedback                                venue_feedback @relation(fields: [feedback_id], references: [id], onUpdate: Restrict, map: "venue_feedback_likes_ibfk_1")
    ga_user_venue_feedback_likes_ga_userToga_user ga_user        @relation("venue_feedback_likes_ga_userToga_user", fields: [ga_user], references: [id], onUpdate: Restrict, map: "venue_feedback_likes_ibfk_2")

    @@index([feedback_id], map: "feedback_id")
    @@index([ga_user], map: "ga_user")
}

model venue_feedback_media {
    id             Int            @id @default(autoincrement())
    feedback_id    Int
    media_id       Int
    published      Int            @default(1)
    created        DateTime       @default(now()) @db.Timestamp(0)
    modified       DateTime?      @db.Timestamp(0)
    venue_feedback venue_feedback @relation(fields: [feedback_id], references: [id], onUpdate: Restrict, map: "venue_feedback_media_ibfk_1")
    attachment     attachment     @relation(fields: [media_id], references: [id], onUpdate: Restrict, map: "venue_feedback_media_ibfk_2")

    @@index([feedback_id], map: "feedback_id")
    @@index([media_id], map: "media_id")
}

model venue_follow {
    id            Int       @id @default(autoincrement())
    venue_id      Int
    follower_id   Int
    status        Boolean   @default(true)
    created       DateTime? @default(now()) @db.Timestamp(0)
    unfollow_date DateTime? @db.Timestamp(0)
    source        String?   @db.VarChar(20)
    user          user      @relation(fields: [follower_id], references: [id], onUpdate: Restrict, map: "venue_follow_ibfk_1")
    venue         venue     @relation(fields: [venue_id], references: [id], onUpdate: Restrict, map: "venue_follow_ibfk_2")

    @@index([follower_id], map: "follower_id")
    @@index([venue_id], map: "venue_id")
}

model visitor_badge {
    id                               Int            @id @default(autoincrement())
    event                            Int
    edition                          Int
    badge_id                         String         @db.VarChar(16)
    barcode                          String?        @db.Text
    visitor_id                       Int?           @unique(map: "visitor_id_3")
    created                          DateTime       @default(now()) @db.Timestamp(0)
    created_by                       Int
    modified                         DateTime?      @db.Timestamp(0)
    event_visitor_badge_eventToevent event          @relation("visitor_badge_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "visitor_badge_ibfk_1")
    event_edition                    event_edition  @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "visitor_badge_ibfk_2")
    event_visitor                    event_visitor? @relation(fields: [visitor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "visitor_badge_ibfk_3")

    @@unique([event, edition, badge_id], map: "event_2")
    @@index([edition], map: "edition")
    @@index([event], map: "event")
}

model visitor_meetings {
    id                                  Int           @default(autoincrement())
    connect_id                          Int
    confirmed_by                        Int
    event                               Int
    edition                             Int
    modified                            DateTime?     @db.Timestamp(0)
    created                             DateTime      @default(now()) @db.Timestamp(0)
    status                              Int           @db.TinyInt
    ip_addr                             String        @db.VarChar(20)
    connect                             connect       @relation(fields: [connect_id], references: [id], onUpdate: Restrict, map: "visitor_meetings_ibfk_1")
    user                                user          @relation(fields: [confirmed_by], references: [id], onUpdate: Restrict, map: "visitor_meetings_ibfk_2")
    event_visitor_meetings_eventToevent event         @relation("visitor_meetings_eventToevent", fields: [event], references: [id], onUpdate: Restrict, map: "visitor_meetings_ibfk_3")
    event_edition                       event_edition @relation(fields: [edition], references: [id], onUpdate: Restrict, map: "visitor_meetings_ibfk_4")

    @@unique([connect_id, event, edition], map: "connect_id_2")
    @@index([confirmed_by], map: "confirmed_by")
    @@index([connect_id], map: "connect_id")
    @@index([edition], map: "edition")
    @@index([event], map: "event")
    @@index([id], map: "id")
}

model visitor_questionnaire {
    id            Int           @id @default(autoincrement())
    event_id      Int
    visitor_id    Int
    question_id   Int
    answer        String?       @db.VarChar(2000)
    created       DateTime?     @db.DateTime(0)
    modified      DateTime?     @db.Timestamp(0)
    delval        Int?
    event_visitor event_visitor @relation(fields: [visitor_id], references: [id], onUpdate: Restrict, map: "visitor_questionnaire_ibfk_1")
    event         event         @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "visitor_questionnaire_ibfk_2")
    questionnaire questionnaire @relation(fields: [question_id], references: [id], onUpdate: Restrict, map: "visitor_questionnaire_ibfk_3")

    @@unique([visitor_id, question_id], map: "visitor_id_2")
    @@index([event_id], map: "event_id")
    @@index([question_id], map: "question_id")
    @@index([visitor_id], map: "visitor_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model webinar_ledger {
    id                  Int                @id @default(autoincrement())
    status              Int?               @db.TinyInt
    event_id            Int
    company_id          Int
    user_id             Int
    timespent           Int
    refdate             DateTime?          @db.Date
    refid               String?            @db.VarChar(50)
    ref_desc            String?            @db.VarChar(50)
    marketing_credit_id Int?
    created             DateTime           @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
    preview_timespent   Int?               @default(0)
    credit              Int?               @default(0)
    event               event              @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "webinar_ledger_ibfk_1")
    company             company            @relation(fields: [company_id], references: [id], onUpdate: Restrict, map: "webinar_ledger_ibfk_2")
    user                user               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "webinar_ledger_ibfk_3")
    marketing_credits   marketing_credits? @relation(fields: [marketing_credit_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "webinar_ledger_ibfk_4")

    @@unique([event_id, company_id, user_id, refdate], map: "uni_in_dex")
    @@index([company_id], map: "company_id")
    @@index([event_id], map: "event_id")
    @@index([marketing_credit_id], map: "marketing_credit_id")
    @@index([user_id], map: "user_id")
}

model whitelabel_conf {
    id           Int      @id @default(autoincrement())
    company_id   Int?
    email_domain String?  @db.VarChar(20)
    user_id      Int?
    published    Int?     @db.TinyInt
    spm_verified Int?     @db.TinyInt
    company      company? @relation(fields: [company_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "whitelabel_conf_ibfk_1")
    user         user?    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "whitelabel_conf_ibfk_2")

    @@index([company_id], map: "whitelabel_conf_ibfk_1")
    @@index([user_id], map: "whitelabel_conf_ibfk_2")
}

model work_order {
    id                                                                                        Int                        @id @default(autoincrement())
    service_agreement_service                                                                 Int?
    status                                                                                    Int?
    detail                                                                                    String?                    @db.MediumText
    service_agreement_service_work_order_service_agreement_serviceToservice_agreement_service service_agreement_service? @relation("work_order_service_agreement_serviceToservice_agreement_service", fields: [service_agreement_service], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_workorder_sas_id")

    @@index([service_agreement_service], map: "fk_workorder_sas_id")
}

model work_order_history {
    id                                                                                                Int                        @id @default(autoincrement())
    service_agreement_service                                                                         Int?
    status                                                                                            Int?
    detail                                                                                            String?                    @db.MediumText
    service_agreement_service_work_order_history_service_agreement_serviceToservice_agreement_service service_agreement_service? @relation("work_order_history_service_agreement_serviceToservice_agreement_service", fields: [service_agreement_service], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_workorderhis_sas_id")

    @@index([service_agreement_service], map: "fk_workorderhis_sas_id")
}

enum leads_source {
    Inbound
    Helpdesk
    Internal
    System
}
